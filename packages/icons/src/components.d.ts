/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface IvyArrowDown {
        "color": string;
        "size": string;
    }
    interface IvyArrowLeft {
        "color": string;
        "size": string;
    }
    interface IvyArrowRight {
        "color": string;
        "size": string;
    }
    interface IvyArrowUp {
        "color": string;
        "size": string;
    }
    interface IvyDown {
        "color": string;
        "size": string;
    }
    interface IvyDownCircle {
        "color": string;
        "size": string;
    }
    interface IvyLeft {
        "color": string;
        "size": string;
    }
    interface IvyLeftCircle {
        "color": string;
        "size": string;
    }
    interface IvyRefresh {
        "color": string;
        "size": string;
    }
    interface IvyRight {
        "color": string;
        "size": string;
    }
    interface IvyRightCircle {
        "color": string;
        "size": string;
    }
    interface IvyUp {
        "color": string;
        "size": string;
    }
    interface IvyUpCircle {
        "color": string;
        "size": string;
    }
}
declare global {
    interface HTMLIvyArrowDownElement extends Components.IvyArrowDown, HTMLStencilElement {
    }
    var HTMLIvyArrowDownElement: {
        prototype: HTMLIvyArrowDownElement;
        new (): HTMLIvyArrowDownElement;
    };
    interface HTMLIvyArrowLeftElement extends Components.IvyArrowLeft, HTMLStencilElement {
    }
    var HTMLIvyArrowLeftElement: {
        prototype: HTMLIvyArrowLeftElement;
        new (): HTMLIvyArrowLeftElement;
    };
    interface HTMLIvyArrowRightElement extends Components.IvyArrowRight, HTMLStencilElement {
    }
    var HTMLIvyArrowRightElement: {
        prototype: HTMLIvyArrowRightElement;
        new (): HTMLIvyArrowRightElement;
    };
    interface HTMLIvyArrowUpElement extends Components.IvyArrowUp, HTMLStencilElement {
    }
    var HTMLIvyArrowUpElement: {
        prototype: HTMLIvyArrowUpElement;
        new (): HTMLIvyArrowUpElement;
    };
    interface HTMLIvyDownElement extends Components.IvyDown, HTMLStencilElement {
    }
    var HTMLIvyDownElement: {
        prototype: HTMLIvyDownElement;
        new (): HTMLIvyDownElement;
    };
    interface HTMLIvyDownCircleElement extends Components.IvyDownCircle, HTMLStencilElement {
    }
    var HTMLIvyDownCircleElement: {
        prototype: HTMLIvyDownCircleElement;
        new (): HTMLIvyDownCircleElement;
    };
    interface HTMLIvyLeftElement extends Components.IvyLeft, HTMLStencilElement {
    }
    var HTMLIvyLeftElement: {
        prototype: HTMLIvyLeftElement;
        new (): HTMLIvyLeftElement;
    };
    interface HTMLIvyLeftCircleElement extends Components.IvyLeftCircle, HTMLStencilElement {
    }
    var HTMLIvyLeftCircleElement: {
        prototype: HTMLIvyLeftCircleElement;
        new (): HTMLIvyLeftCircleElement;
    };
    interface HTMLIvyRefreshElement extends Components.IvyRefresh, HTMLStencilElement {
    }
    var HTMLIvyRefreshElement: {
        prototype: HTMLIvyRefreshElement;
        new (): HTMLIvyRefreshElement;
    };
    interface HTMLIvyRightElement extends Components.IvyRight, HTMLStencilElement {
    }
    var HTMLIvyRightElement: {
        prototype: HTMLIvyRightElement;
        new (): HTMLIvyRightElement;
    };
    interface HTMLIvyRightCircleElement extends Components.IvyRightCircle, HTMLStencilElement {
    }
    var HTMLIvyRightCircleElement: {
        prototype: HTMLIvyRightCircleElement;
        new (): HTMLIvyRightCircleElement;
    };
    interface HTMLIvyUpElement extends Components.IvyUp, HTMLStencilElement {
    }
    var HTMLIvyUpElement: {
        prototype: HTMLIvyUpElement;
        new (): HTMLIvyUpElement;
    };
    interface HTMLIvyUpCircleElement extends Components.IvyUpCircle, HTMLStencilElement {
    }
    var HTMLIvyUpCircleElement: {
        prototype: HTMLIvyUpCircleElement;
        new (): HTMLIvyUpCircleElement;
    };
    interface HTMLElementTagNameMap {
        "ivy-arrow-down": HTMLIvyArrowDownElement;
        "ivy-arrow-left": HTMLIvyArrowLeftElement;
        "ivy-arrow-right": HTMLIvyArrowRightElement;
        "ivy-arrow-up": HTMLIvyArrowUpElement;
        "ivy-down": HTMLIvyDownElement;
        "ivy-down-circle": HTMLIvyDownCircleElement;
        "ivy-left": HTMLIvyLeftElement;
        "ivy-left-circle": HTMLIvyLeftCircleElement;
        "ivy-refresh": HTMLIvyRefreshElement;
        "ivy-right": HTMLIvyRightElement;
        "ivy-right-circle": HTMLIvyRightCircleElement;
        "ivy-up": HTMLIvyUpElement;
        "ivy-up-circle": HTMLIvyUpCircleElement;
    }
}
declare namespace LocalJSX {
    interface IvyArrowDown {
        "color"?: string;
        "size"?: string;
    }
    interface IvyArrowLeft {
        "color"?: string;
        "size"?: string;
    }
    interface IvyArrowRight {
        "color"?: string;
        "size"?: string;
    }
    interface IvyArrowUp {
        "color"?: string;
        "size"?: string;
    }
    interface IvyDown {
        "color"?: string;
        "size"?: string;
    }
    interface IvyDownCircle {
        "color"?: string;
        "size"?: string;
    }
    interface IvyLeft {
        "color"?: string;
        "size"?: string;
    }
    interface IvyLeftCircle {
        "color"?: string;
        "size"?: string;
    }
    interface IvyRefresh {
        "color"?: string;
        "size"?: string;
    }
    interface IvyRight {
        "color"?: string;
        "size"?: string;
    }
    interface IvyRightCircle {
        "color"?: string;
        "size"?: string;
    }
    interface IvyUp {
        "color"?: string;
        "size"?: string;
    }
    interface IvyUpCircle {
        "color"?: string;
        "size"?: string;
    }
    interface IntrinsicElements {
        "ivy-arrow-down": IvyArrowDown;
        "ivy-arrow-left": IvyArrowLeft;
        "ivy-arrow-right": IvyArrowRight;
        "ivy-arrow-up": IvyArrowUp;
        "ivy-down": IvyDown;
        "ivy-down-circle": IvyDownCircle;
        "ivy-left": IvyLeft;
        "ivy-left-circle": IvyLeftCircle;
        "ivy-refresh": IvyRefresh;
        "ivy-right": IvyRight;
        "ivy-right-circle": IvyRightCircle;
        "ivy-up": IvyUp;
        "ivy-up-circle": IvyUpCircle;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ivy-arrow-down": LocalJSX.IvyArrowDown & JSXBase.HTMLAttributes<HTMLIvyArrowDownElement>;
            "ivy-arrow-left": LocalJSX.IvyArrowLeft & JSXBase.HTMLAttributes<HTMLIvyArrowLeftElement>;
            "ivy-arrow-right": LocalJSX.IvyArrowRight & JSXBase.HTMLAttributes<HTMLIvyArrowRightElement>;
            "ivy-arrow-up": LocalJSX.IvyArrowUp & JSXBase.HTMLAttributes<HTMLIvyArrowUpElement>;
            "ivy-down": LocalJSX.IvyDown & JSXBase.HTMLAttributes<HTMLIvyDownElement>;
            "ivy-down-circle": LocalJSX.IvyDownCircle & JSXBase.HTMLAttributes<HTMLIvyDownCircleElement>;
            "ivy-left": LocalJSX.IvyLeft & JSXBase.HTMLAttributes<HTMLIvyLeftElement>;
            "ivy-left-circle": LocalJSX.IvyLeftCircle & JSXBase.HTMLAttributes<HTMLIvyLeftCircleElement>;
            "ivy-refresh": LocalJSX.IvyRefresh & JSXBase.HTMLAttributes<HTMLIvyRefreshElement>;
            "ivy-right": LocalJSX.IvyRight & JSXBase.HTMLAttributes<HTMLIvyRightElement>;
            "ivy-right-circle": LocalJSX.IvyRightCircle & JSXBase.HTMLAttributes<HTMLIvyRightCircleElement>;
            "ivy-up": LocalJSX.IvyUp & JSXBase.HTMLAttributes<HTMLIvyUpElement>;
            "ivy-up-circle": LocalJSX.IvyUpCircle & JSXBase.HTMLAttributes<HTMLIvyUpCircleElement>;
        }
    }
}
