var process = {
  env: {
    NODE_ENV: 'production'
  }
}
const iconfont = `<symbol id="text"></symbol><symbol id="ivy-icon-edit" viewBox="0 0 1024 1024"><path d="M199.008 672.992l194.016 112 224-388-194.016-112z m-24 60L208 880.992l144.992-46.016z m280-504l194.016 112 56.992-98.016L512 130.976z m-351.008 480l384-664.992 304.992 176-384 664.992-248 78.016z m384 254.016v-64h448v64h-448z"  ></path></symbol><symbol id="ivy-icon-download" viewBox="0 0 1024 1024"><path d="M160 832h704q14.016 0 23.008 8.992T896 864t-8.992 23.008T864 896H160q-14.016 0-23.008-8.992T128 864t8.992-23.008T160 832z m384-253.984l236-236 46.016 44.992L509.024 704l-316.992-316.992 44.992-44.992 243.008 243.008V128.032h64v450.016z"  ></path></symbol><symbol id="ivy-icon-coin" viewBox="0 0 1024 1024"><path d="M162.016 580.992L192.032 640q-31.008 30.016-32 64 4 64 102.496 111.008T512.032 864q151.008-2.016 249.504-48.992T864.032 704q-0.992-34.016-32-64l31.008-59.008q31.008 26.016 48 56.992T928.032 704q-4.992 99.008-123.008 160.512T512.032 928q-175.008-2.016-292.992-63.488T96.032 704q0-35.008 17.504-66.016t48.512-56.992z m0-192L192.032 448q-31.008 30.016-32 64 4 64 102.496 111.008T512.032 672q151.008-2.016 249.504-48.992T864.032 512q-0.992-34.016-32-64l31.008-59.008q31.008 26.016 48 56.992T928.032 512q-4.992 99.008-123.008 160.512T512.032 736q-175.008-2.016-292.992-63.488T96.032 512q0-35.008 17.504-66.016t48.512-56.992zM512 544q-175.008-2.016-292.992-63.488T96 320q4.992-99.008 123.008-160.512T512 96q175.008 2.016 292.992 63.488T928 320q-4.992 99.008-123.008 160.512T512 544z m0-64q151.008-2.016 249.504-48.992T864 320q-4-64-102.496-111.008T512 160q-151.008 2.016-249.504 48.992T160 320q4 64 102.496 111.008T512 480z"  ></path></symbol><symbol id="ivy-icon-female" viewBox="0 0 1024 1024"><path d="M512 640q108.992-3.008 180.992-75.008T768 384q-3.008-108.992-75.008-180.992T512 128q-108.992 3.008-180.992 75.008T256 384q3.008 108.992 75.008 180.992T512 640z m0 64q-136-3.008-226.496-93.504T192 384q3.008-136 93.504-226.496T512 64q136 3.008 226.496 93.504T832 384q-3.008 136-93.504 226.496T512 704z m0-64q32 0 32 32v256q0 32-32 32t-32-32v-256q0-32 32-32z m-160 160h320q32 0 32 32t-32 32H352q-32 0-32-32t32-32z"  ></path></symbol><symbol id="ivy-icon-edit-outline" viewBox="0 0 1024 1024"><path d="M832 512q0-14.016 8.992-23.008T864 480t23.008 8.992T896 512v352q0 14.016-8.992 23.008T864 896H160q-14.016 0-23.008-8.992T128 864V160q0-14.016 8.992-23.008T160 128h352q14.016 0 23.008 8.992T544 160t-8.992 23.008T512 192H192v640h640V512z m-361.984 42.016l52.992-7.008L847.008 222.016q12.992-12.992 8.512-30.496t-22.496-22.496-31.008 8L477.024 501.024zM892 132q28 28 28 67.488t-28 68.512L560.992 599.008q-8 8-19.008 10.016l-104.992 15.008q-16 2.016-27.008-9.504t-8.992-27.488L416 482.048q0.992-11.008 8.992-18.016L756.992 132.032q28.992-28 67.488-28t67.488 28z"  ></path></symbol><symbol id="ivy-icon-files" viewBox="0 0 1024 1024"><path d="M128 384v448h768V384H128z m-32-64h832q14.016 0 23.008 8.992T960 352v512q0 14.016-8.992 23.008T928 896H96q-14.016 0-23.008-8.992T64 864V352q0-14.016 8.992-23.008T96 320z m64-128h704v64H160V192z m96-128h512v64H256V64z"  ></path></symbol><symbol id="ivy-icon-film" viewBox="0 0 1024 1024"><path d="M160 160v704h704V160H160zM128 96h768q14.016 0 23.008 8.992T928 128v768q0 14.016-8.992 23.008T896 928H128q-14.016 0-23.008-8.992T96 896V128q0-14.016 8.992-23.008T128 96z m192 192V128h64v352h256V128h64v160h160v64h-160v128h160v64h-160v128h160v64h-160v160h-64V544h-256v352h-64v-160H128v-64h192v-128H128v-64h192v-128H128V288h192z"  ></path></symbol><symbol id="ivy-icon-error" viewBox="0 0 1024 1024"><path d="M512 64q190.016 4.992 316.512 131.488T960 512q-4.992 190.016-131.488 316.512T512 960q-190.016-4.992-316.512-131.488T64 512q4.992-190.016 131.488-316.512T512 64z m0 394.016l-104-104q-12-12-27.488-12t-27.008 11.488-11.488 27.008 12 27.488l104 104-104 104q-12 12-12 27.488t11.488 27.008 27.008 11.488 27.488-12l104-104 104 104q16 15.008 36.992 9.504t26.496-26.496-9.504-36.992L565.984 512l104-104q12-12 12-27.488t-11.488-27.008-27.008-11.488-27.488 12z"  ></path></symbol><symbol id="ivy-icon-eleme" viewBox="0 0 1024 1024"><path d="M300 188.992q136.992-84 284-52.992t238.016 162.016l18.016 31.008v0.992q3.008 7.008 0.512 14.496t-8.512 12.512l-352 228q-8 4.992-16 3.488t-12.992-8.512l-18.016-28q-12-20-7.488-40.992t23.488-34.016l224.992-147.008q8-4.992 9.504-12.992t-3.488-16q-0.992-3.008-4-4.992-68.992-55.008-154.496-60t-160.512 43.008q-94.016 64.992-116.512 170.016t37.504 202.016q64 92.992 168.512 115.488t201.504-37.504q20-12 40.992-7.008t34.016 24l18.016 26.016q4 8 2.496 15.488t-7.488 12.512q-12.992 12-28.992 20.992-136.992 84-284 52.992t-238.016-163.008q-84-136.992-52.512-284t163.488-238.016z m526.016 305.024q8-4 16-2.496t12.992 8.512l23.008 35.008q14.016 23.008 8.992 47.488t-27.008 40.512l-36 23.008q-7.008 4.992-15.008 3.008t-14.016-8.992l-46.016-71.008q-4.992-8-3.008-16t8.992-12.992z"  ></path></symbol><symbol id="ivy-icon-coffee" viewBox="0 0 1024 1024"><path d="M823.008 192h14.016q12 0 20.512 7.488t10.496 19.488l22.016 128q2.016 14.016-7.488 25.504t-24.512 11.488h-48.992l-39.008 546.016q-0.992 12.992-10.016 21.504t-22.016 8.512H286.016q-12.992 0-22.016-8.512t-10.016-21.504L214.976 383.968H165.984q-15.008 0-24.512-11.488t-7.488-25.504l22.016-128q2.016-12 10.496-19.488T187.008 192h14.016l-7.008-94.016q0-14.016 9.504-24t22.496-10.016h571.008q14.016 0 23.488 10.016t8.512 24z m-64.992 0l4.992-64H260.992l4 64h492.992zM210.016 320h610.016l-10.016-64H214.016l-10.016 64h6.016z m68.992 64l36.992 512h392l36.992-512H278.976z"  ></path></symbol><symbol id="ivy-icon-folder-remove" viewBox="0 0 1024 1024"><path d="M128 192v640h768V320H485.984l-128-128H127.968zM96 128h288l128 128h416q14.016 0 23.008 8.992T960 288v576q0 14.016-8.992 23.008T928 896H96q-14.016 0-23.008-8.992T64 864V160q0-14.016 8.992-23.008T96 128z m256 416h320v64H352v-64z"  ></path></symbol><symbol id="ivy-icon-folder-checked" viewBox="0 0 1024 1024"><path d="M128 192v640h768V320H485.984l-128-128H127.968zM96 128h288l128 128h416q14.016 0 23.008 8.992T960 288v576q0 14.016-8.992 23.008T928 896H96q-14.016 0-23.008-8.992T64 864V160q0-14.016 8.992-23.008T96 128z m414.016 502.016l180.992-180.992L736 494.016l-226.016 227.008-158.016-159.008 44.992-44.992z"  ></path></symbol><symbol id="ivy-icon-folder-add" viewBox="0 0 1024 1024"><path d="M128 192v640h768V320H485.984l-128-128H127.968zM96 128h288l128 128h416q14.016 0 23.008 8.992T960 288v576q0 14.016-8.992 23.008T928 896H96q-14.016 0-23.008-8.992T64 864V160q0-14.016 8.992-23.008T96 128z m384 416v-128h64v128h128v64h-128v128h-64v-128h-128v-64h128z"  ></path></symbol><symbol id="ivy-icon-folder-delete" viewBox="0 0 1024 1024"><path d="M128 192v640h768V320H485.984l-128-128H127.968zM96 128h288l128 128h416q14.016 0 23.008 8.992T960 288v576q0 14.016-8.992 23.008T928 896H96q-14.016 0-23.008-8.992T64 864V160q0-14.016 8.992-23.008T96 128z m371.008 448l-91.008-90.016 46.016-46.016 90.016 91.008 90.016-91.008 46.016 46.016L557.056 576l91.008 90.016-46.016 46.016-90.016-91.008-90.016 91.008-46.016-46.016z"  ></path></symbol><symbol id="ivy-icon-football" viewBox="0 0 1024 1024"><path d="M512 960q-190.016-4.992-316.512-131.488T64 512q4.992-190.016 131.488-316.512T512 64q190.016 4.992 316.512 131.488T960 512q-4.992 190.016-131.488 316.512T512 960z m0-64q163.008-4 271.488-112.512T896 512q-4-163.008-112.512-271.488T512 128q-163.008 4-271.488 112.512T128 512q4 163.008 112.512 271.488T512 896zM187.008 268q24-24 47.008-46.016 26.016 46.016 66.016 80.992l-32.992 56.992q-47.008-39.008-80-92z m653.984-4.992q-34.016 55.008-84 96.992L724 304q42.016-36.992 68.992-86.016 23.008 20.992 48 44.992z m-374.976 181.984l11.008-63.008q35.008 4 70.016 0l11.008 63.008q-46.016 6.016-92 0z m-63.008-12.992q-44-12.992-83.008-35.008l32-56q28.992 16.992 62.016 28zM704 396.992q-39.008 22.016-83.008 35.008l-11.008-63.008q32.992-11.008 62.016-28zM183.008 760.992q34.016-55.008 84-96.992l32.992 56q-40.992 36.992-68 84-24-20-48.992-43.008z m657.984 1.024q-24.992 23.008-48.992 43.008-27.008-48-68-84.992l32.992-56q50.016 42.016 84 98.016z m-374.976-183.008q46.016-6.016 92 0l-11.008 63.008q-35.008-4-70.016 0z m-63.008 12.992l11.008 63.008q-32.992 11.008-62.016 28l-32-56q39.008-22.016 83.008-35.008zM704 627.008l-32 56q-30.016-16.992-63.008-28l12-63.008q44 12.992 83.008 35.008z"  ></path></symbol><symbol id="ivy-icon-finished" viewBox="0 0 1024 1024"><path d="M280.992 754.016L691.008 167.008q11.008-15.008 29.504-13.504t26.016 18.016-2.496 32.512L314.016 817.024q-8 11.008-20.992 13.504t-24-5.504l-231.008-172.992q-10.016-8-12-20.992t6.016-24 20.992-12.512 24 6.496zM736 448q-14.016 0-23.008-8.992T704 416t8.992-23.008T736 384h192q14.016 0 23.008 8.992T960 416t-8.992 23.008T928 448h-192z m-128 192q-14.016 0-23.008-8.992T576 608t8.992-23.008T608 576h320q14.016 0 23.008 8.992T960 608t-8.992 23.008T928 640H608z m-128 192q-14.016 0-23.008-8.992T448 800t8.992-23.008T480 768h448q14.016 0 23.008 8.992T960 800t-8.992 23.008T928 832H480z"  ></path></symbol><symbol id="ivy-icon-folder" viewBox="0 0 1024 1024"><path d="M128 192v640h768V320H485.984l-128-128H127.968zM96 128h288l128 128h416q14.016 0 23.008 8.992T960 288v576q0 14.016-8.992 23.008T928 896H96q-14.016 0-23.008-8.992T64 864V160q0-14.016 8.992-23.008T96 128z"  ></path></symbol><symbol id="ivy-icon-fork-spoon" viewBox="0 0 1024 1024"><path d="M256 410.016V96q0-14.016 8.992-23.008T288 64t23.008 8.992T320 96v314.016q28.992-10.016 46.496-34.496T384 320.032v-224q0-14.016 8.992-23.008T416 64.032t23.008 8.992 8.992 23.008v224q-0.992 58.016-36 100.992T320 477.024v451.008q0 14.016-8.992 23.008T288 960.032t-23.008-8.992T256 928.032V477.024q-56.992-12.992-92-56T128 320.032v-224q0-14.016 8.992-23.008T160 64.032t23.008 8.992 8.992 23.008v224q0 31.008 17.504 55.488T256 410.016z m416 161.984q-70.016-16.992-114.496-86.016T512 319.968q2.016-108.992 56-180.992T704 63.968q82.016 3.008 136 75.008T896 319.968q-0.992 96.992-45.504 166.016T736 572V928q0 14.016-8.992 23.008T704 960t-23.008-8.992T672 928V572zM704 512q51.008-2.016 88.512-55.008T832 320q-2.016-84-39.488-136.992T704 128q-51.008 2.016-88.512 55.008T576 320q2.016 84 39.488 136.992T704 512z"  ></path></symbol><symbol id="ivy-icon-first-aid-kit" viewBox="0 0 1024 1024"><path d="M192 256q-27.008 0.992-44.992 19.008T128 320v448q0.992 27.008 19.008 44.992T192 832h640q27.008-0.992 44.992-19.008T896 768V320q-0.992-27.008-19.008-44.992T832 256H192z m0-64h640q54.016 0.992 90.496 37.504T960 320v448q-0.992 54.016-37.504 90.496T832 896H192q-54.016-0.992-90.496-37.504T64 768V320q0.992-54.016 37.504-90.496T192 192z m352 320h96q14.016 0 23.008 8.992T672 544t-8.992 23.008T640 576h-96v96q0 14.016-8.992 23.008T512 704t-23.008-8.992T480 672v-96h-96q-14.016 0-23.008-8.992T352 544t8.992-23.008T384 512h96v-96q0-14.016 8.992-23.008T512 384t23.008 8.992T544 416v96zM352 128v64h320V128H352z m-32-64h384q14.016 0 23.008 8.992T736 96v128q0 14.016-8.992 23.008T704 256H320q-14.016 0-23.008-8.992T288 224V96q0-14.016 8.992-23.008T320 64z"  ></path></symbol><symbol id="ivy-icon-goblet-full" viewBox="0 0 1024 1024"><path d="M256 320h512q0-118.016-36.992-192H296.992Q256 224 256 320z m504 64H264q24 86.016 91.488 138.016T512 576.032q88.992-2.016 156.512-54.016T760 384zM544 638.016v258.016h96q14.016 0 23.008 8.992t8.992 23.008-8.992 23.008-23.008 8.992h-256q-14.016 0-23.008-8.992T352 928.032t8.992-23.008 23.008-8.992h96v-258.016q-124.992-15.008-204.992-103.488T192 320.032q0-128 64-256h512q64 96 64 256-3.008 126.016-83.008 214.496T544 638.016z"  ></path></symbol><symbol id="ivy-icon-food" viewBox="0 0 1024 1024"><path d="M128 352.992V352q0.992-88.992 48.512-160t129.504-104.992 165.504-17.504 147.488 78.496q50.016-24 102.496-19.008t96.992 37.504 64 82.016 10.496 103.488q28 3.008 44.992 24.992t12.992 48.992q-44 262.016-215.008 331.008V800q-0.992 40.992-28 68T639.968 896h-256q-40.992-0.992-68-28T287.968 800v-43.008Q116.96 688 72.96 425.984q-4-26.016 12-47.488t43.008-25.504zM192 352h64q2.016-68 47.008-112.992T416 192q68 2.016 112.992 47.008T576 352h64q-2.016-95.008-65.504-158.496T416 128q-95.008 2.016-158.496 65.504T192 352z m128 0h192q-0.992-40.992-28-68T416 256.992t-68 27.008T320 352z m439.008 0h68.992q7.008-28.992 0.992-57.504t-24-52.512-44.512-36.992T703.968 192q-23.008 0-44 8 18.016 27.008 28 58.016 19.008-4.992 36.992 1.504t30.016 22.016 12.992 34.496-8.992 36zM672 768H352v32q0 14.016 8.992 23.008T384 832h256q14.016 0 23.008-8.992T672 800v-32z m-343.008-64h366.016q76-24 124-95.008T887.008 416H136.992q20 122.016 68 192.992T328.992 704z"  ></path></symbol><symbol id="ivy-icon-folder-opened" viewBox="0 0 1024 1024"><path d="M878.016 448H242.016l-96 384h636zM832 384v-64H485.984l-128-128H127.968v448l58.016-232q3.008-11.008 11.488-17.504T216.96 384h615.008z m-24.992 512H96q-14.016 0-23.008-8.992T64 864V160q0-14.016 8.992-23.008T96 128h288l128 128h352q14.016 0 23.008 8.992T896 288v96h23.008q15.008 0 24.512 12.512t6.496 27.488l-112 448q-3.008 11.008-11.488 17.504T807.04 896z"  ></path></symbol><symbol id="ivy-icon-full-screen" viewBox="0 0 1024 1024"><path d="M160 96h192q14.016 0.992 23.008 10.016t8.992 22.496-8.992 22.496T352 160H160v192q0 14.016-8.992 23.008T128 384t-23.008-8.992T96 352V96h64z m0 832H96v-256q0-14.016 8.992-23.008T128 640t23.008 8.992T160 672v192h192q14.016 0 23.008 8.992t8.992 22.496-8.992 22.496T352 928H160zM864 96h64v256q0 14.016-8.992 23.008T896 384t-23.008-8.992T864 352V160h-192q-14.016 0-23.008-8.992T640 128.512t8.992-22.496T672 96h192z m0 832h-192q-14.016-0.992-23.008-10.016T640 895.488t8.992-22.496T672 864h192v-192q0-14.016 8.992-23.008T896 640t23.008 8.992T928 672v256h-64z"  ></path></symbol><symbol id="ivy-icon-goblet-square-full" viewBox="0 0 1024 1024"><path d="M256 271.008l16 10.016 12.992 8.992q52.992 31.008 115.008 30.016 22.016 0.992 41.504-8.512t49.504-32.512q39.008-30.016 68-43.008T624 224q40.992 0 75.488 15.008t66.496 42.016l2.016 2.016V128.032H256V271.04z m0.992 76Q264 450.016 326.496 512T512 576q118.016-0.992 180-58.016t72.992-152q-20-16.992-40-36-24-20.992-48.512-31.488T622.976 288q-22.016-0.992-42.016 8.512t-51.008 33.504h-0.992q-36.992 28.992-65.504 42.016t-63.488 12q-40.992 0-76.512-9.504t-66.496-27.488zM480 639.008q-168.992-19.008-230.496-119.488T192 320.032v-224q0-14.016 8.992-23.008T224 64.032h576q14.016 0 23.008 8.992t8.992 23.008v224q4 99.008-57.504 199.488T544 639.008V896h96q14.016 0 23.008 8.992T672 928t-8.992 23.008T640 960h-256q-14.016 0-23.008-8.992T352 928t8.992-23.008T384 896h96v-256.992z"  ></path></symbol><symbol id="ivy-icon-goblet" viewBox="0 0 1024 1024"><path d="M544 638.016v258.016h96q14.016 0 23.008 8.992t8.992 23.008-8.992 23.008-23.008 8.992h-256q-14.016 0-23.008-8.992T352 928.032t8.992-23.008 23.008-8.992h96v-258.016q-124.992-15.008-204.992-103.488T192 320.032q0-128 64-256h512q64 96 64 256-3.008 126.016-83.008 214.496T544 638.016zM256 320q3.008 108.992 75.008 180.992T512 576q108.992-3.008 180.992-75.008T768 320q0-118.016-36.992-192H296.992Q256 224 256 320z"  ></path></symbol><symbol id="ivy-icon-goblet-square" viewBox="0 0 1024 1024"><path d="M544 639.008V896h96q14.016 0 23.008 8.992T672 928t-8.992 23.008T640 960h-256q-14.016 0-23.008-8.992T352 928t8.992-23.008T384 896h96v-256.992q-168.992-19.008-230.496-119.488T192 320.032v-224q0-14.016 8.992-23.008T224 64.032h576q14.016 0 23.008 8.992t8.992 23.008v224q4 99.008-57.504 199.488T544 639.008zM256 320q0 114.016 62.496 184T512 576q132-2.016 194.496-72T768 320V128H256v192z"  ></path></symbol><symbol id="ivy-icon-goods" viewBox="0 0 1024 1024"><path d="M320 288v-22.016q2.016-86.016 56-143.008T512 63.968q82.016 2.016 136 59.008T704 265.984V288h131.008q12.992 0 21.504 8t10.496 20.992l56.992 576q2.016 14.016-7.488 24.512t-23.488 10.496H131.008q-14.016 0-23.488-10.496t-7.488-24.512l56.992-576q2.016-12.992 10.496-20.992T189.024 288h131.008z m64 0h256v-22.016q-0.992-59.008-37.504-98.016T512 127.968q-54.016 0.992-90.496 40T384 265.984V288z m-64 64H217.984L166.976 864h690.016l-51.008-512h-102.016v96q0 14.016-8.992 23.008t-23.008 8.992-23.008-8.992-8.992-23.008v-96h-256v96q0 14.016-8.992 23.008t-23.008 8.992-23.008-8.992T319.968 448v-96z"  ></path></symbol><symbol id="ivy-icon-guide" viewBox="0 0 1024 1024"><path d="M640 608h-64v-192h64v192z m0 160v160q0 14.016-8.992 23.008T608 960h-192q-14.016 0-23.008-8.992T384 928v-160h64v128h128v-128h64z m-256-160v-192h64v192h-64z m256-352h-64V128h-128v128h-64V96q0-14.016 8.992-23.008T416 64h192q14.016 0 23.008 8.992T640 96v160zM220.992 256l-71.008 80L220.992 416H768V256H220.992z m-14.976-64h594.016q14.016 0 23.008 8.992t8.992 23.008v224q0 14.016-8.992 23.008t-23.008 8.992H206.016q-14.016 0-24-11.008l-99.008-112q-8-8.992-8-20.992t8-20.992l99.008-112Q192.032 192 206.016 192z m678.976 496L813.984 768H266.976v-160h547.008zM828 544H235.008q-14.016 0-23.008 8.992T203.008 576v224q0 14.016 8.992 23.008t23.008 8.992h592.992q15.008 0 24-11.008l100-112q8-8.992 8-20.992t-8-20.992l-100-112q-8.992-11.008-24-11.008z"  ></path></symbol><symbol id="ivy-icon-help" viewBox="0 0 1024 1024"><path d="M760 804.992l-91.008-91.008q-34.016 27.008-74.016 40.512T511.968 768t-83.008-13.504-74.016-40.512l-91.008 91.008q52 44 115.488 67.488t132.512 23.488q71.008 0 134.016-24t114.016-67.008z m44.992-44.992q44-52 67.488-115.488T895.968 512q0-71.008-24-134.016t-67.008-114.016l-91.008 91.008q26.016 32.992 40 72.512T767.968 512t-14.016 84.512-40 72.512zM760 219.008q-52-44-115.488-67.488T512 128.032q-71.008 0-134.016 24T263.968 219.04l91.008 91.008q34.016-27.008 74.016-40.512t84-13.504 83.488 14.016 72.512 40zM219.008 264q-44 52-67.488 115.488T128.032 512q0 71.008 24 134.016t67.008 114.016l91.008-91.008q-27.008-34.016-40.512-74.016t-13.504-84 14.016-83.488 40-72.512z m416.992 395.008q12-11.008 23.008-23.008 20.992-24.992 32.992-56.512T704 512q0-43.008-17.504-80.992t-50.496-66.016q-26.016-22.016-58.016-33.504T511.968 320q-43.008 0-80.992 17.504t-66.016 50.496q-20.992 24.992-32.992 56.512T319.968 512q0 43.008 17.504 80.992t50.496 66.016q24.992 20.992 56.512 32.992t67.488 12 67.488-12 56.512-32.992zM512 960q-190.016-4.992-316.512-131.488T64 512q4.992-190.016 131.488-316.512T512 64q190.016 4.992 316.512 131.488T960 512q-4.992 190.016-131.488 316.512T512 960z"  ></path></symbol><symbol id="ivy-icon-headset" viewBox="0 0 1024 1024"><path d="M896 528.992V512q-4-163.008-112.512-271.488T512 128q-163.008 4-271.488 112.512T128 512v16.992Q158.016 512 192 512t64 17.504T303.008 576 320 640v128q-0.992 54.016-37.504 90.496T192 896q-54.016-0.992-90.496-37.504T64 768v-256q4.992-190.016 131.488-316.512T512 64q190.016 4.992 316.512 131.488T960 512v256q-0.992 54.016-37.504 90.496T832 896q-54.016-0.992-90.496-37.504T704 768v-128q0-35.008 16.992-64T768 529.504 832 512t64 16.992zM896 640q-0.992-27.008-19.008-44.992T832 576.992t-44.992 18.016T768 640v128q0.992 27.008 19.008 44.992t44.992 18.016 44.992-18.016T896 768v-128zM128 640v128q0.992 27.008 19.008 44.992T192 831.008t44.992-18.016T256 768v-128q-0.992-27.008-19.008-44.992T192 576.992t-44.992 18.016T128 640z"  ></path></symbol><symbol id="ivy-icon-house" viewBox="0 0 1024 1024"><path d="M192 414.016v482.016h640V414.016L512 147.008z m-52-40l352-292.992q8.992-7.008 20-7.008t20 7.008l352 292.992q12 10.016 12 24.992V928q0 14.016-8.992 23.008T864 960H160q-14.016 0-23.008-8.992T128 928V399.008q0-15.008 12-24.992z"  ></path></symbol><symbol id="ivy-icon-ice-cream-round" viewBox="0 0 1024 1024"><path d="M308 488.992l227.008 227.008q10.016 8.992 22.496 8.992t22.496-8.992L784 512q56-59.008 56-135.488T784 240q-60-56-136.512-56T512 240l-204 204q-8.992 10.016-8.992 23.008t8.992 22.016z m136 227.008l-136 135.008q-28.992 28-67.008 27.488t-66.496-28.992-28.992-66.496 27.488-67.008l135.008-136-44.992-44.992q-27.008-28.992-27.008-68.512t27.008-67.488l204-204Q546.016 120 648 120t180.992 75.008q75.008 79.008 75.008 180.992t-75.008 180.992l-204 204q-28 28-67.488 28t-68.512-28z m-44.992-45.984l-44.992-44.992-136 136q-8.992 10.016-8.992 22.496t9.504 22.016 22.016 9.504 22.496-8.992z m248.992-384q8.992 10.016 8.992 22.496t-8.992 22.496L467.008 512q-14.016 12.992-32 8.512t-22.496-22.496 8.512-31.008l180.992-180.992q10.016-10.016 23.008-10.016t23.008 10.016z m90.016 89.984q10.016 10.016 10.016 23.008t-10.016 23.008l-180.992 180q-12.992 12.992-30.496 8.512t-22.496-22.496 8-31.008l180.992-180.992q8.992-8.992 22.496-8.992t22.496 8.992z"  ></path></symbol><symbol id="ivy-icon-hot-water" viewBox="0 0 1024 1024"><path d="M272.992 478.016h478.016v-68H272.992v68z m0 68v51.008q0 38.016 14.496 72t40.992 60.992 60.512 40.992 72 14.016h102.016q38.016 0 72-14.016t60.512-40.992 40.992-60.992 14.496-72v-51.008H272.992z m-33.984-205.024h546.016q14.016 0.992 24 10.496t10.016 23.488v222.016q-3.008 108.992-75.008 181.504t-180.992 74.496h-102.016q-52 0-98.496-19.008t-82.496-55.488-55.488-83.008-19.488-98.496v-222.016q0-14.016 10.016-23.488t24-10.496zM512 34.016q14.016 0 24 10.016t10.016 24V239.04q0 14.016-9.504 24T512 273.056t-24.512-10.016-9.504-24V68.032q0-14.016 10.016-24t24-10.016z m-136.992 68q15.008 0.992 24.512 10.496t10.496 24.512V239.04q-0.992 14.016-10.496 24t-24 10.016-24-10.016-10.496-24V137.024q0.992-15.008 10.496-24.512t23.488-10.496z m273.984 0q14.016 0.992 23.488 10.496t10.496 24.512V239.04q-0.992 14.016-10.496 24t-24 10.016-24-10.016-10.496-24V137.024q0.992-15.008 10.496-24.512t24.512-10.496zM171.008 922.016h682.016q15.008 0 24.512 9.504t9.504 24-9.504 24.512-24.512 10.016H171.008q-15.008 0-24.512-10.016t-9.504-24.512 9.504-24 24.512-9.504z"  ></path></symbol><symbol id="ivy-icon-heavy-rain" viewBox="0 0 1024 1024"><path d="M739.008 291.008L704 284.992l-12.992-34.016q-24-59.008-75.488-92.512t-115.488-29.504-111.488 43.488-63.488 102.496l-10.016 40-40.992 7.008q-64.992 12.992-104.992 60.512t-40.992 113.504q2.016 75.008 51.488 124.512t124.512 51.488h400q76-2.016 128.992-50.016t62.016-124q4.992-76-38.016-133.504t-118.016-73.504zM960 480q-3.008 108.992-75.488 180.992T704 736H304q-48.992 0-92.512-18.016t-77.504-52-52-78.016-18.016-92q0.992-90.016 56-155.008t143.008-82.016q22.016-82.016 84.512-135.008T496 64.928q84.992-4.992 154.016 39.488t100.992 123.488q92 20 149.504 88.992T960 479.904zM224 800q14.016 0 23.008 8.992T256 832v96q0 14.016-8.992 23.008T224 960t-23.008-8.992T192 928v-96q0-14.016 8.992-23.008T224 800z m192 0q14.016 0 23.008 8.992T448 832v96q0 14.016-8.992 23.008T416 960t-23.008-8.992T384 928v-96q0-14.016 8.992-23.008T416 800z m192 0q14.016 0 23.008 8.992T640 832v96q0 14.016-8.992 23.008T608 960t-23.008-8.992T576 928v-96q0-14.016 8.992-23.008T608 800z m192 0q14.016 0 23.008 8.992T832 832v96q0 14.016-8.992 23.008T800 960t-23.008-8.992T768 928v-96q0-14.016 8.992-23.008T800 800z"  ></path></symbol><symbol id="ivy-icon-ice-drink" viewBox="0 0 1024 1024"><path d="M512 448v128h240l16-128h-256z m-64 0H256l16 128H448v-128z m64-255.008V384h248Q736 297.984 668.512 245.984T512 192.992z m-64 8q-68 18.016-116.512 66.496T264 384H448V200.992z m64-72q116 2.016 202.016 71.488t111.008 183.488h71.008q14.016 0 23.008 8.992t8.992 23.008-8.992 23.008-23.008 8.992h-64l-56.992 456q-4 24-21.504 39.488t-41.504 16.512h-400q-24-0.992-41.504-16.512t-21.504-39.488l-56.992-456h-64q-14.016 0-23.008-8.992t-8.992-23.008 8.992-23.008 23.008-8.992H199.04q20-95.008 87.008-161.504t162.016-87.488V95.968q0.992-40.992 28-68t68-28h128q14.016 0 23.008 8.992t8.992 23.008-8.992 23.008-23.008 8.992h-128q-14.016 0-23.008 8.992t-8.992 23.008V128.96zM744 640H280l32 256h400z"  ></path></symbol><symbol id="ivy-icon-ice-cream" viewBox="0 0 1024 1024"><path d="M128.992 448q7.008-79.008 60.512-132T322.016 256q14.016-86.016 78.016-139.488T552.032 64q88 4.992 147.488 62.496T767.008 272q55.008 23.008 88.992 70.016t39.008 106.016H896l-347.008 536q-10.016 14.016-27.008 14.016t-26.016-14.016l-368-536h0.992z m64 0h286.016q-7.008-56-47.008-91.488T336 320q-56 0.992-96 36.512T192.992 448zM544 448h287.008q-8-56-47.488-91.488T687.008 320q-56 0.992-95.488 36.512T544.032 448z m-295.008 64l272 396.992L777.984 512H248.992zM512 352.992q31.008-48.992 80.992-74.496T700.992 256q-12.992-56.992-56.992-92.512t-103.008-34.496-101.504 38.016-53.504 95.008q40 10.016 72 33.504T512 353.024z"  ></path></symbol><symbol id="ivy-icon-key" viewBox="0 0 1024 1024"><path d="M448 456V96q0-12.992 9.504-22.496T480 64h192q14.016 0 23.008 8.992T704 96t-8.992 23.008T672 128h-160v128h160q14.016 0 23.008 8.992T704 288t-8.992 23.008T672 320h-160v128q104 2.016 175.008 69.504t80 170.496q4 104-58.496 179.488T544 957.984q-104 11.008-183.008-46.496T260 752q-16.992-102.016 35.488-184.992T448 456zM512 896q82.016-2.016 136-56T704 704q-2.016-82.016-56-136T512 512q-82.016 2.016-136 56T320 704q2.016 82.016 56 136T512 896z"  ></path></symbol><symbol id="ivy-icon-ice-cream-square" viewBox="0 0 1024 1024"><path d="M416 640h256q14.016 0 23.008-8.992T704 608V160q0-14.016-8.992-23.008T672 128H352q-14.016 0-23.008 8.992T320 160v448q0 14.016 8.992 23.008T352 640h64z m192 64v160q-0.992 40.992-28 68T512 959.008t-68-27.008T416 864v-160h-64q-40.992-0.992-68-28T256 608V160q0.992-40.992 28-68T352 64h320q40.992 0.992 68 28T768 160v448q-0.992 40.992-28 68T672 704h-64z m-64 0h-64v160q0 14.016 8.992 23.008T512 896t23.008-8.992T544 864v-160z"  ></path></symbol><symbol id="ivy-icon-knife-fork" viewBox="0 0 1024 1024"><path d="M256 411.008V96q0-14.016 8.992-23.008T288 64t23.008 8.992T320 96v315.008q28.992-11.008 46.496-35.488T384 320.032v-224q0-14.016 8.992-23.008T416 64.032t23.008 8.992 8.992 23.008v224q-0.992 58.016-36 100.992T320 477.024v451.008q0 14.016-8.992 23.008T288 960.032t-23.008-8.992T256 928.032V477.024q-56.992-12.992-92-56T128 320.032v-224q0-14.016 8.992-23.008T160 64.032t23.008 8.992 8.992 23.008v224q0 31.008 17.504 55.488T256 411.008zM640 160v384h127.008q-4.992-118.016-28.992-208Q717.024 253.984 640 160z m0 448v320q0 14.016-8.992 23.008T608 960t-23.008-8.992T576 928V64h64q128 134.016 160 256t32 288h-192z"  ></path></symbol><symbol id="ivy-icon-ice-tea" viewBox="0 0 1024 1024"><path d="M198.016 260q24-115.008 110.016-186.496T512.032 0q118.016 2.016 204 73.504t110.016 186.496q32 8.992 51.008 34.016t19.008 58.016v64q-0.992 32.992-20 58.496t-52 34.496l-48.992 395.008q-4 24-21.504 39.488t-42.496 16.512H313.056q-24.992-0.992-42.496-16.512t-21.504-39.488L200.064 509.024q-32.992-8.992-52-34.496t-20-58.496v-64q0-32.992 19.008-58.016T198.08 260zM264 256h496Q736 169.984 668.512 117.984T512 63.968q-88.992 2.016-156.512 54.016T264 256z m495.008 256H264.992l48 384h398.016zM224 448h576q14.016 0 23.008-8.992T832 416v-64q0-14.016-8.992-23.008T800 320H224q-14.016 0-23.008 8.992T192 352v64q0 14.016 8.992 23.008T224 448z m160 192h64v64h-64v-64z m192 64h64v64h-64v-64z m-128 64h64v64h-64v-64z m64-192h64v64h-64v-64z"  ></path></symbol><symbol id="ivy-icon-info" viewBox="0 0 1024 1024"><path d="M512 64q190.016 4.992 316.512 131.488T960 512q-4.992 190.016-131.488 316.512T512 960q-190.016-4.992-316.512-131.488T64 512q4.992-190.016 131.488-316.512T512 64z m67.008 275.008q26.016 0 43.008-15.488t16.992-41.504-16.992-41.504-42.496-15.488-42.496 15.488-16.992 41.504 16.992 41.504 42.016 15.488z m12 360q0-6.016 0.992-16t0-19.008l-52.992 60.992q-8 8.992-16.512 14.016t-14.496 3.008q-8.992-4-8-14.016l88-276.992q4.992-28-8.992-48t-44.992-24q-35.008 0.992-76.512 29.504t-72.512 72.512v15.008q-0.992 10.016 0 19.008l52.992-60.992q8-8.992 16.512-14.016t13.504-3.008q10.016 4.992 7.008 16l-87.008 276q-7.008 24.992 7.008 44.512t48.992 26.496q50.016-0.992 84-28.992t63.008-72z"  ></path></symbol><symbol id="ivy-icon-grape" viewBox="0 0 1024 1024"><path d="M544 195.008q28.992 6.016 53.504 21.504T640 256q34.016-44 85.504-58.016t103.008 7.008 78.016 67.488 19.008 101.504-45.504 92.512-94.016 44.512q16 35.008 14.016 72.992t-20.992 71.488-50.496 54.016-70.496 25.504q22.016 52 8.992 104t-56.992 86.496T512.032 960t-98.016-34.496-56.992-86.496 8.992-104q-39.008-4.992-70.496-25.504t-50.496-54.016-20.992-71.488 14.016-72.992q-56-7.008-94.016-44.512t-45.504-92.512 19.008-101.504 78.016-67.488 103.008-7.008T384.064 256q18.016-24 42.496-39.488t53.504-21.504V128h-64q-14.016 0-23.008-8.992T384.064 96t8.992-23.008 23.008-8.992h192q14.016 0 23.008 8.992t8.992 23.008-8.992 23.008-23.008 8.992h-64v67.008zM512 448q40.992-0.992 68-28T607.008 352t-27.008-68T512 256.992t-68 27.008T416.992 352t27.008 68T512 448z m-256 0q40.992-0.992 68-28T351.008 352t-27.008-68T256 256.992t-68 27.008T160.992 352t27.008 68T256 448z m128 224q40.992-0.992 68-28T479.008 576t-27.008-68T384 480.992t-68 27.008T288.992 576t27.008 68T384 672z m128 224q40.992-0.992 68-28T607.008 800t-27.008-68T512 704.992t-68 27.008T416.992 800t27.008 68T512 896z m128-224q40.992-0.992 68-28T735.008 576t-27.008-68T640 480.992t-68 27.008T544.992 576t27.008 68T640 672z m128-224q40.992-0.992 68-28T863.008 352t-27.008-68T768 256.992t-68 27.008T672.992 352t27.008 68T768 448z"  ></path></symbol><symbol id="ivy-icon-light-rain" viewBox="0 0 1024 1024"><path d="M739.008 291.008L704 284.992l-12.992-34.016q-24-59.008-75.488-92.512t-115.488-29.504-111.488 43.488-63.488 102.496l-10.016 40-40.992 7.008q-64.992 12.992-104.992 60.512t-40.992 113.504q2.016 75.008 51.488 124.512t124.512 51.488h400q76-2.016 128.992-50.016t62.016-124q4.992-76-38.016-133.504t-118.016-73.504zM960 480q-3.008 108.992-75.488 180.992T704 736H304q-48.992 0-92.512-18.016t-77.504-52-52-78.016-18.016-92q0.992-90.016 56-155.008t143.008-82.016q22.016-82.016 84.512-135.008T496 64.928q84.992-4.992 154.016 39.488t100.992 123.488q92 20 149.504 88.992T960 479.904zM288 800h64v64H288v-64z m192 0h64v64h-64v-64z m-96 96h64v64h-64v-64z m192 0h64v64h-64v-64z m96-96h64v64h-64v-64z"  ></path></symbol><symbol id="ivy-icon-location-information" viewBox="0 0 1024 1024"><path d="M288 896h448q32 0 32 32t-32 32H288q-32 0-32-32t32-32z m512-480q-3.008-122.016-84.512-203.488T512 128q-122.016 3.008-203.488 84.512T224 416q0 88.992 71.488 203.488T512 872.992q144.992-139.008 216.512-253.504T800 416z m-288 544Q160 640 160 416q4-150.016 103.008-248.992T512 64q150.016 4 248.992 103.008T864 416q0 224-352 544z m0-448q40.992-0.992 68-28T607.008 416t-27.008-68T512 320.992t-68 27.008T416.992 416t27.008 68T512 512z m0 64q-68-2.016-112.992-47.008T352 416q2.016-68 47.008-112.992T512 256q68 2.016 112.992 47.008T672 416q-2.016 68-47.008 112.992T512 576z"  ></path></symbol><symbol id="ivy-icon-lock" viewBox="0 0 1024 1024"><path d="M224 448q-14.016 0-23.008 8.992T192 480v384q0 14.016 8.992 23.008T224 896h576q14.016 0 23.008-8.992T832 864V480q0-14.016-8.992-23.008T800 448H224z m0-64h576q40.992 0.992 68 28T896 480v384q-0.992 40.992-28 68T800 960H224q-40.992-0.992-68-28T128 864V480q0.992-40.992 28-68T224 384z m288 160q14.016 0 23.008 8.992T544 576v192q0 14.016-8.992 23.008T512 800t-23.008-8.992T480 768v-192q0-14.016 8.992-23.008T512 544z m192-160v-64q-2.016-82.016-56-136T512 128q-82.016 2.016-136 56T320 320v64h384zM512 64q108.992 3.008 180.992 75.008T768 320v128H256v-128q3.008-108.992 75.008-180.992T512 64z"  ></path></symbol><symbol id="ivy-icon-location-outline" viewBox="0 0 1024 1024"><path d="M800 416q-3.008-122.016-84.512-203.488T512 128q-122.016 3.008-203.488 84.512T224 416q0 88.992 71.488 203.488T512 872.992q144.992-139.008 216.512-253.504T800 416z m-288 544Q160 640 160 416q4-150.016 103.008-248.992T512 64q150.016 4 248.992 103.008T864 416q0 224-352 544z m0-448q40.992-0.992 68-28T607.008 416t-27.008-68T512 320.992t-68 27.008T416.992 416t27.008 68T512 512z m0 64q-68-2.016-112.992-47.008T352 416q2.016-68 47.008-112.992T512 256q68 2.016 112.992 47.008T672 416q-2.016 68-47.008 112.992T512 576z"  ></path></symbol><symbol id="ivy-icon-lightning" viewBox="0 0 1024 1024"><path d="M288 671.008v64q-96.992-8-159.488-75.008T64 496q0.992-90.016 56-155.008t143.008-82.016q22.016-82.016 84.512-135.008t148.512-59.008q84.992-4.992 154.016 39.488t100.992 123.488q95.008 20 152.512 91.488t55.488 168.512q-4 96-65.504 164t-157.504 82.016v-64.992q70.016-12.992 114.016-64.512t46.016-122.496q-0.992-72-44-124t-112.992-67.008l-35.008-6.016-12.992-34.016q-24-59.008-75.488-92.512t-115.488-29.504-111.488 43.488T325.12 274.88l-10.016 40-40.992 7.008q-64.992 12.992-104.992 60.512t-40.992 113.504q0.992 71.008 46.016 119.488t114.016 55.488zM416 736q-18.016-0.992-27.008-16.512t-0.992-31.488l128-224q10.016-16 28-16t27.488 16 0.512 32L471.008 672H608q18.016 0.992 27.008 16.512t0.992 31.488l-128 224q-7.008 12-19.488 15.008t-24.512-3.488-15.008-19.008 3.008-24.512l100.992-176H416z"  ></path></symbol><symbol id="ivy-icon-magic-stick" viewBox="0 0 1024 1024"><path d="M512 64h64v192h-64V64z m0 576h64v192h-64v-192zM160 480v-64h192v64H160z m576 0v-64h192v64h-192zM250.016 199.008l44.992-44.992 136 136-44.992 44.992z m406.976 407.008l44.992-44.992 136 136-44.992 44.992zM114.016 923.008l-44.992-44.992 316.992-316.992 44.992 44.992z m588-588l-44.992-44.992 136-136 44.992 44.992z"  ></path></symbol><symbol id="ivy-icon-link" viewBox="0 0 1024 1024"><path d="M716 624.992l-46.016-44.992 91.008-91.008q56-59.008 62.496-128.992T784 240q-50.016-46.016-120-39.488t-128.992 62.496l-91.008 91.008-44.992-46.016 90.016-90.016q79.008-75.008 175.008-81.504t164.992 58.496q64.992 68.992 58.496 164.992t-81.504 175.008z m-91.008 91.008l-90.016 90.016q-79.008 75.008-175.008 81.504t-164.992-58.496q-64.992-68.992-58.496-164.992t81.504-175.008l90.016-90.016 46.016 44.992-91.008 91.008q-56 59.008-62.496 128.992T240 784q50.016 46.016 120 39.488t128.992-62.496l91.008-91.008z m0-361.984l44.992 44.992-271.008 271.008-44.992-44.992z"  ></path></symbol><symbol id="ivy-icon-lollipop" viewBox="0 0 1024 1024"><path d="M512.992 448q-4-27.008 10.016-48t40.512-26.496 47.488 8 27.008 40-8 48-40 28.512q16.992 28 46.496 39.488t60.992 2.496 51.008-34.016 19.488-58.016h64q-2.016 68-47.008 112.992T672 607.968q-68-2.016-112.992-47.008T512 447.968h0.992z m-126.976-29.984q15.008 94.016 80.992 154.496t160 67.488q94.016 3.008 166.016-51.008t96-144.992q20-92-19.488-172.512t-124.512-121.504q-87.008-36.992-173.504-12.992t-141.504 100.992q60-40.992 130.016-45.504t134.496 28.992 100.512 93.504 36.992 132.992h-64q-2.016-76.992-51.008-130.496T591.008 256.96q-76.992-4.992-134.016 40t-71.008 120.992z m105.984 249.984l-206.016 206.016q-30.016 27.008-67.488 26.496t-66.016-28.992-28.992-66.016 26.496-67.488l206.016-206.016q-54.016-108.992-28-220.512t123.008-185.504q99.008-70.016 213.504-60.992t201.504 92.992q84 87.008 92.992 201.504t-60.992 213.504q-74.016 96.992-185.504 123.008t-220.512-28z m-53.984-36q-24.992-20.992-46.016-46.016L195.008 784q-12.992 12.992-8 30.496t22.496 22.496 30.496-8z"  ></path></symbol><symbol id="ivy-icon-location" viewBox="0 0 1024 1024"><path d="M512 928q20.992-2.016 76.992-44.992T704 775.008q75.008-84.992 116.992-176.992T864 416q-4-144-102.496-231.008T512 96q-151.008 2.016-249.504 88.992T160 416q0.992 91.008 43.008 182.496T320 775.008q59.008 64.992 115.008 108T512 928z m0-435.008q27.008-0.992 44.992-19.008t18.016-44.992-18.016-45.504T512 364.992t-44.992 18.496-18.016 45.504 18.016 44.992 44.992 19.008z m0 141.024q-87.008-3.008-144.992-60.512t-60-144.512q2.016-87.008 60-144.992T512 224q87.008 2.016 144.992 60t60 144.992q-2.016 87.008-60 144.512T512 634.016z"  ></path></symbol><symbol id="ivy-icon-loading" viewBox="0 0 1024 1024"><path d="M512 64q14.016 0 23.008 8.992T544 96v192q0 14.016-8.992 23.008T512 320t-23.008-8.992T480 288V96q0-14.016 8.992-23.008T512 64z m0 640q14.016 0 23.008 8.992T544 736v192q0 14.016-8.992 23.008T512 960t-23.008-8.992T480 928v-192q0-14.016 8.992-23.008T512 704z m448-192q0 14.016-8.992 23.008T928 544h-192q-14.016 0-23.008-8.992T704 512t8.992-23.008T736 480h192q14.016 0 23.008 8.992T960 512z m-640 0q0 14.016-8.992 23.008T288 544H96q-14.016 0-23.008-8.992T64 512t8.992-23.008T96 480h192q14.016 0 23.008 8.992T320 512zM195.008 195.008q10.016-8.992 23.008-8.992t22.016 8.992l136 136q8.992 10.016 8.992 22.496t-9.504 22.016-22.016 9.504-22.496-8.992l-136-136q-8.992-8.992-8.992-22.016t8.992-23.008zM648 648q10.016-10.016 22.496-10.016t22.496 10.016l136 136q8.992 8.992 8.992 22.016t-9.504 22.496-22.496 9.504-22.016-8.992l-136-136q-10.016-10.016-10.016-22.496t10.016-22.496z m180.992-452.992q8.992 10.016 8.992 23.008t-8.992 22.016l-136 136q-10.016 8.992-22.496 8.992t-22.016-9.504-9.504-22.016 8.992-22.496l136-136q8.992-8.992 22.016-8.992t23.008 8.992zM376 648q10.016 10.016 10.016 22.496t-10.016 22.496l-136 136q-8.992 8.992-22.016 8.992t-22.496-9.504-9.504-22.496 8.992-22.016l136-136q10.016-10.016 22.496-10.016t22.496 10.016z"  ></path></symbol><symbol id="ivy-icon-male" viewBox="0 0 1024 1024"><path d="M400 848.992q95.008-2.016 158.496-65.504t66.496-159.488q-3.008-95.008-66.496-158.496T400 399.008q-96 3.008-159.488 66.496T175.008 624q2.016 96 65.504 159.488t158.496 65.504h0.992z m0 57.024q-120-3.008-199.488-82.496t-82.496-198.496q3.008-120 82.496-199.488t198.496-82.496q120 3.008 199.488 82.496t82.496 198.496q-3.008 120-82.496 199.488T400 906.016z m252.992-788h224.992q28 0 28 28t-28 28h-224.992q-28 0-28-28t28-28z m225.024 0q28 0 28 28v224.992q0 28-28 28t-28-28V146.016q0-28 28-28z m-273.024 340.992l-40-40 292.992-292.992 40 40z"  ></path></symbol><symbol id="ivy-icon-menu" viewBox="0 0 1024 1024"><path d="M160 448q-14.016 0-23.008-8.992T128 416V160q0-14.016 8.992-23.008T160 128h256q14.016 0 23.008 8.992T448 160v256q0 14.016-8.992 23.008T416 448H160z m448 0q-14.016 0-23.008-8.992T576 416V160q0-14.016 8.992-23.008T608 128h256q14.016 0 23.008 8.992T896 160v256q0 14.016-8.992 23.008T864 448h-256zM160 896q-14.016 0-23.008-8.992T128 864v-256q0-14.016 8.992-23.008T160 576h256q14.016 0 23.008 8.992T448 608v256q0 14.016-8.992 23.008T416 896H160z m448 0q-14.016 0-23.008-8.992T576 864v-256q0-14.016 8.992-23.008T608 576h256q14.016 0 23.008 8.992T896 608v256q0 14.016-8.992 23.008T864 896h-256z"  ></path></symbol><symbol id="ivy-icon-microphone" viewBox="0 0 1024 1024"><path d="M512 128q-54.016 0.992-90.496 37.504T384 256v256q0.992 54.016 37.504 90.496T512 640q54.016-0.992 90.496-37.504T640 512V256q-0.992-54.016-37.504-90.496T512 128z m0-64q82.016 2.016 136 56T704 256v256q-2.016 82.016-56 136T512 704q-82.016-2.016-136-56T320 512V256q2.016-82.016 56-136T512 64z m-32 832v-64q-122.016-3.008-203.488-84.512T192 544v-32q0-14.016 8.992-23.008T224 480t23.008 8.992T256 512v32q2.016 95.008 65.504 158.496T480 768h64q95.008-2.016 158.496-65.504T768 544v-32q0-14.016 8.992-23.008T800 480t23.008 8.992T832 512v32q-3.008 122.016-84.512 203.488T544 832v64h64q14.016 0 23.008 8.992T640 928t-8.992 23.008T608 960h-192q-14.016 0-23.008-8.992T384 928t8.992-23.008T416 896h64z"  ></path></symbol><symbol id="ivy-icon-minus" viewBox="0 0 1024 1024"><path d="M128 544h768q14.016 0 23.008-8.992T928 512t-8.992-23.008T896 480H128q-14.016 0-23.008 8.992T96 512t8.992 23.008T128 544z"  ></path></symbol><symbol id="ivy-icon-message" viewBox="0 0 1024 1024"><path d="M128 224v512q0.992 27.008 19.008 44.992T192 800h640q27.008-0.992 44.992-19.008T896 736V224H128z m0-64h768q27.008 0.992 44.992 19.008T960 224v512q-0.992 54.016-37.504 90.496T832 864H192q-54.016-0.992-90.496-37.504T64 736V224q0.992-27.008 19.008-44.992T128 160z m776 64l-247.008 283.008q-28 31.008-65.504 48T512 572t-79.488-16.992-65.504-48L120 224h784zM204.992 224L416 464.992q18.016 20.992 43.008 32t52.992 11.008 52.992-11.008 43.008-32L819.008 224H204.992z"  ></path></symbol><symbol id="ivy-icon-map-location" viewBox="0 0 1024 1024"><path d="M800 416q-3.008-122.016-84.512-203.488T512 128q-122.016 3.008-203.488 84.512T224 416q0 88.992 71.488 203.488T512 872.992q144.992-139.008 216.512-253.504T800 416z m-288 544Q160 640 160 416q4-150.016 103.008-248.992T512 64q150.016 4 248.992 103.008T864 416q0 224-352 544z m0-512q27.008-0.992 44.992-19.008T575.008 384t-18.016-44.992T512 320.992t-44.992 18.016T448.992 384t18.016 44.992T512 448z m0 64q-54.016-0.992-90.496-37.504T384 384q0.992-54.016 37.504-90.496T512 256q54.016 0.992 90.496 37.504T640 384q-0.992 54.016-37.504 90.496T512 512z m346.016 192l102.016 256h-288v-64h-320v64h-288l102.016-256h692z m-69.024 0H234.976l-76 192h706.016z"  ></path></symbol><symbol id="ivy-icon-message-solid" viewBox="0 0 1024 1024"><path d="M640 832q-0.992 54.016-37.504 90.496T512 960q-54.016-0.992-90.496-37.504T384 832h256z m192-64H133.984q-16 0-27.008-11.008t-11.008-27.488 11.008-27.008 27.008-11.488H192V448q2.016-118.016 72.992-203.488T448 134.016q-0.992-18.016 6.496-34.016t23.488-26.016T512 63.968t34.016 10.016 23.488 26.016T576 134.016q114.016 26.016 184 111.488T832 448v243.008h58.016q16 0.992 27.008 11.488t11.008 27.008-11.008 27.488-27.008 11.008H832z"  ></path></symbol><symbol id="ivy-icon-mic" viewBox="0 0 1024 1024"><path d="M480 704h160q27.008-0.992 44.992-19.008T704 640v-32h-96q-14.016 0-23.008-8.992T576 576t8.992-23.008T608 544h96v-96h-96q-14.016 0-23.008-8.992T576 416t8.992-23.008T608 384h96V288h-96q-14.016 0-23.008-8.992T576 256t8.992-23.008T608 224h96V192q-0.992-27.008-19.008-44.992T640 128h-256q-27.008 0.992-44.992 19.008T320 192v32h96q14.016 0 23.008 8.992T448 256t-8.992 23.008T416 288h-96v96h96q14.016 0 23.008 8.992T448 416t-8.992 23.008T416 448h-96v96h96q14.016 0 23.008 8.992T448 576t-8.992 23.008T416 608h-96v32q0.992 27.008 19.008 44.992T384 704h96z m64 64v128h192q14.016 0 23.008 8.992T768 928t-8.992 23.008T736 960H288q-14.016 0-23.008-8.992T256 928t8.992-23.008T288 896h192v-128h-96q-54.016-0.992-90.496-37.504T256 640V192q0.992-54.016 37.504-90.496T384 64h256q54.016 0.992 90.496 37.504T768 192v448q-0.992 54.016-37.504 90.496T640 768h-96z"  ></path></symbol><symbol id="ivy-icon-milk-tea" viewBox="0 0 1024 1024"><path d="M416 128V96q0.992-40.992 28-68T512 0h128q14.016 0 23.008 8.992T672 32t-8.992 23.008T640 64h-128q-14.016 0-23.008 8.992T480 96v32h320q39.008 0.992 66.016 26.016t28.992 64-21.504 67.488-61.504 33.504l-40 580.992q-2.016 26.016-20 42.496T708 960H316q-26.016-0.992-44-17.504t-20-42.496L212 319.008q-38.016-4.992-61.504-33.504t-21.504-67.488 28.992-64T224 128h192z m-140 192l40 576h392l4.992-71.008q-80-22.016-126.016-85.504t-42.016-146.496q7.008-83.008 61.504-140t136.512-68L747.968 320H275.968zM224 256h576q14.016 0 23.008-8.992T832 224t-8.992-23.008T800 192H224q-14.016 0-23.008 8.992T192 224t8.992 23.008T224 256z m492.992 504l22.016-308.992q-55.008 11.008-90.496 50.496t-39.488 95.488 26.016 100 82.016 63.008z"  ></path></symbol><symbol id="ivy-icon-medal" viewBox="0 0 1024 1024"><path d="M512 896q108.992-3.008 180.992-75.008T768 640q-3.008-108.992-75.008-180.992T512 384q-108.992 3.008-180.992 75.008T256 640q3.008 108.992 75.008 180.992T512 896z m0 64q-136-3.008-226.496-93.504T192 640q3.008-136 93.504-226.496T512 320q136 3.008 226.496 93.504T832 640q-3.008 136-93.504 226.496T512 960z m64-832h-128v200q32-8 64-8 28.992 0 64 8V128z m64 0v220q36.992 12.992 78.016 34.016L757.024 128h-116.992z m-256 0H267.008l39.008 254.016q40.992-20.992 78.016-34.016V128zM228.992 64h566.016q14.016 0 23.488 11.008t7.488 26.016l-58.016 379.008q-171.008-96-256-96t-256 96L197.952 101.024q-2.016-15.008 7.488-26.016T228.928 64z"  ></path></symbol><symbol id="ivy-icon-medal-" viewBox="0 0 1024 1024"><path d="M512 896q108.992-3.008 180.992-75.008T768 640q-3.008-108.992-75.008-180.992T512 384q-108.992 3.008-180.992 75.008T256 640q3.008 108.992 75.008 180.992T512 896z m0 64q-136-3.008-226.496-93.504T192 640q3.008-136 93.504-226.496T512 320q136 3.008 226.496 93.504T832 640q-3.008 136-93.504 226.496T512 960z m-32-480h64v256h64v64h-192v-64h64v-192h-64v-64h64z m96-352h-128v200q32-8 64-8 28.992 0 64 8V128z m64 0v220q36.992 12.992 78.016 34.016L757.024 128h-116.992z m-256 0H267.008l39.008 254.016q40.992-20.992 78.016-34.016V128zM228.992 64h566.016q14.016 0 23.488 11.008t7.488 26.016l-58.016 379.008q-171.008-96-256-96t-256 96L197.952 101.024q-2.016-15.008 7.488-26.016T228.928 64z"  ></path></symbol><symbol id="ivy-icon-mobile" viewBox="0 0 1024 1024"><path d="M256 128q-27.008 0.992-44.992 19.008T192 192v640q0.992 27.008 19.008 44.992T256 896h512q27.008-0.992 44.992-19.008T832 832V192q-0.992-27.008-19.008-44.992T768 128H256z m0-64h512q54.016 0.992 90.496 37.504T896 192v640q-0.992 54.016-37.504 90.496T768 960H256q-54.016-0.992-90.496-37.504T128 832V192q0.992-54.016 37.504-90.496T256 64z m128 128h256q14.016 0 23.008 8.992T672 224t-8.992 23.008T640 256h-256q-14.016 0-23.008-8.992T352 224t8.992-23.008T384 192z m128 640q-27.008-0.992-44.992-19.008T448.992 768t18.016-44.992T512 704.992t44.992 18.016 18.016 44.992-18.016 44.992T512 832z"  ></path></symbol><symbol id="ivy-icon-mobile-phone" viewBox="0 0 1024 1024"><path d="M224 768v96q0.992 27.008 19.008 44.992T288 928h448q27.008-0.992 44.992-19.008T800 864v-96H224z m0-64h576V160q-0.992-27.008-19.008-44.992T736 96H288q-27.008 0.992-44.992 19.008T224 160v544z m32 288q-40.992-0.992-68-28T160 896V128q0.992-40.992 28-68T256 32h512q40.992 0.992 68 28T864 128v768q-0.992 40.992-28 68T768 992H256z m304-144q-0.992 20-14.496 33.504T512 895.008t-33.504-13.504-13.504-33.504 13.504-33.504T512 800.992t33.504 13.504 14.496 33.504z"  ></path></symbol><symbol id="ivy-icon-money" viewBox="0 0 1024 1024"><path d="M256 640v192h640V384h-128v-64h151.008q10.016 0 15.488 0.992t9.504 3.008q8 4.992 12 12 2.016 4 3.008 9.504t0.992 15.488v494.016q0 10.016-0.992 15.488t-3.008 9.504q-4.992 8-12 12-4 2.016-9.504 3.008t-15.488 0.992H232.992q-10.016 0-15.488-0.992t-9.504-3.008q-8-4.992-12-12-2.016-4-3.008-9.504T192 855.008V640h64zM768 192H128v448h640V192z m64-23.008v494.016q0 10.016-0.992 15.488t-3.008 9.504q-4.992 8-12 12-4 2.016-9.504 3.008t-15.488 0.992H104.992q-10.016 0-15.488-0.992t-9.504-3.008q-8-4.992-12-12-2.016-4-3.008-9.504T64 663.008V168.992q0-10.016 0.992-15.488t3.008-9.504q4.992-8 12-12 4-2.016 9.504-3.008T104.992 128h686.016q10.016 0 15.488 0.992t9.504 3.008q7.008 4.992 12 12 2.016 4 3.008 9.504t0.992 15.488zM448 576q-68-2.016-112.992-47.008T288 416q2.016-68 47.008-112.992T448 256q68 2.016 112.992 47.008T608 416q-2.016 68-47.008 112.992T448 576z m0-64q40.992-0.992 68-28T543.008 416t-27.008-68T448 320.992t-68 27.008T352.992 416t27.008 68T448 512z"  ></path></symbol><symbol id="ivy-icon-more" viewBox="0 0 1024 1024"><path d="M176 416q48 0.992 79.488 32.512T288 528q-0.992 48-32.512 79.488T176 640q-48-0.992-79.488-32.512T64 528q0.992-48 32.512-79.488T176 416zM512 416q48 0.992 79.488 32.512T624 528q-0.992 48-32.512 79.488T512 640q-48-0.992-79.488-32.512T400 528q0.992-48 32.512-79.488T512 416z m336 0q48 0.992 79.488 32.512T960 528q-0.992 48-32.512 79.488T848 640q-48-0.992-79.488-32.512T736 528q0.992-48 32.512-79.488T848 416z"  ></path></symbol><symbol id="ivy-icon-no-smoking" viewBox="0 0 1024 1024"><path d="M440 576H256v128h56l-64 64H224q-14.016 0-23.008-8.992T192 736v-192q0-14.016 8.992-23.008T224 512h280z m144 128H704v-120L776 512H928q14.016 0 23.008 8.992T960 544v192q0 14.016-8.992 23.008T928 768H520zM768 576v128h128v-128h-128z m-29.984-208l46.016 46.016L286.016 912.032 240 866.016zM256 64h64v320H256V64zM128 192h64v192H128V192zM64 512h64v256H64v-256z"  ></path></symbol><symbol id="ivy-icon-more-outline" viewBox="0 0 1024 1024"><path d="M176 416q-48 0.992-79.488 32.512T64 528q0.992 48 32.512 79.488T176 640q48-0.992 79.488-32.512T288 528q-0.992-48-32.512-79.488T176 416z m0 64q20 0.992 33.504 14.496t13.504 33.504-13.504 33.504-33.504 13.504-33.504-13.504-13.504-33.504 13.504-33.504T176 480zM512 416q48 0.992 79.488 32.512T624 528q-0.992 48-32.512 79.488T512 640q-48-0.992-79.488-32.512T400 528q0.992-48 32.512-79.488T512 416z m0 64q-20 0.992-33.504 14.496t-13.504 33.504 13.504 33.504 33.504 13.504 33.504-13.504 13.504-33.504-13.504-33.504T512 480z m336-64q48 0.992 79.488 32.512T960 528q-0.992 48-32.512 79.488T848 640q-48-0.992-79.488-32.512T736 528q0.992-48 32.512-79.488T848 416z m0 64q-20 0.992-33.504 14.496t-13.504 33.504 13.504 33.504 33.504 13.504 33.504-13.504 13.504-33.504-13.504-33.504T848 480z"  ></path></symbol><symbol id="ivy-icon-notebook-" viewBox="0 0 1024 1024"><path d="M352 128v768H288V128H192v768h640V128H352zM160 64h704q14.016 0 23.008 8.992T896 96v832q0 14.016-8.992 23.008T864 960H160q-14.016 0-23.008-8.992T128 928V96q0-14.016 8.992-23.008T160 64z m320 192h192q32 0 32 32t-32 32h-192q-32 0-32-32t32-32z m0 192h192q32 0 32 32t-32 32h-192q-32 0-32-32t32-32z m0 192h192q32 0 32 32t-32 32h-192q-32 0-32-32t32-32z"  ></path></symbol><symbol id="ivy-icon-s-home" viewBox="0 0 1024 1024"><path d="M512 128L128 448v448h256v-256h256v256h256V448z"  ></path></symbol><symbol id="ivy-icon-news" viewBox="0 0 1024 1024"><path d="M512 128v64H256q-27.008 0.992-44.992 19.008T192 256v512q0.992 27.008 19.008 44.992T256 832h512q27.008-0.992 44.992-19.008T832 768v-256h64v256q-0.992 54.016-37.504 90.496T768 896H256q-54.016-0.992-90.496-37.504T128 768V256q0.992-54.016 37.504-90.496T256 128h256z m256 256q54.016-0.992 90.496-37.504T896 256q-0.992-54.016-37.504-90.496T768 128q-54.016 0.992-90.496 37.504T640 256q0.992 54.016 37.504 90.496T768 384z m0 64q-82.016-2.016-136-56T576 256q2.016-82.016 56-136T768 64q82.016 2.016 136 56T960 256q-2.016 82.016-56 136T768 448z"  ></path></symbol><symbol id="ivy-icon-odometer" viewBox="0 0 1024 1024"><path d="M512 896q163.008-4 271.488-112.512T896 512q-4-163.008-112.512-271.488T512 128q-163.008 4-271.488 112.512T128 512q4 163.008 112.512 271.488T512 896z m0 64q-190.016-4.992-316.512-131.488T64 512q4.992-190.016 131.488-316.512T512 64q190.016 4.992 316.512 131.488T960 512q-4.992 190.016-131.488 316.512T512 960zM192 512q3.008-136 93.504-226.496T512 192q136 3.008 226.496 93.504T832 512q0 14.016-8.992 23.008T800 544t-23.008-8.992T768 512q-3.008-108.992-75.008-180.992T512 256q-108.992 3.008-180.992 75.008T256 512q0 14.016-8.992 23.008T224 544t-23.008-8.992T192 512z m378.016 116q28 22.016 35.488 55.488t-8.992 64.992-48.512 44.512-66.016 1.504-52-40-12.512-64 31.008-58.016 61.504-24.512l60.992-188q6.016-16.992 23.488-20.992t30.016 9.504 6.496 31.488z m-68 106.016q12.992 4 24.512-1.504t15.488-18.496-1.504-24.512-18.496-15.488-24.512 1.504-15.488 18.496 1.504 24.512 18.496 15.488z"  ></path></symbol><symbol id="ivy-icon-notebook-1" viewBox="0 0 1024 1024"><path d="M192 128v768h640V128H192zM160 64h704q14.016 0 23.008 8.992T896 96v832q0 14.016-8.992 23.008T864 960H160q-14.016 0-23.008-8.992T128 928V96q0-14.016 8.992-23.008T160 64z m512 64h64v768h-64V128zM96 192h128q32 0 32 32T224 256H96Q64 256 64 224t32-32z m0 192h128q32 0 32 32t-32 32H96q-32 0-32-32t32-32z m0 192h128q32 0 32 32t-32 32H96q-32 0-32-32t32-32z m0 192h128q32 0 32 32t-32 32H96q-32 0-32-32t32-32z"  ></path></symbol><symbol id="ivy-icon-s-open" viewBox="0 0 1024 1024"><path d="M608 704v160q-0.992 40.992-28 68T512 959.008t-68-27.008T416 864v-160h-96q-54.016-0.992-90.496-37.504T192 576h640q-0.992 54.016-37.504 90.496T704 704h-96zM192 512V128h640v384H192z"  ></path></symbol><symbol id="ivy-icon-s-marketing" viewBox="0 0 1024 1024"><path d="M128 896V128h768v768H128z m292-327.008l128 102.016 180-202.016-48-42.016-140 156-128-102.016-180 202.016 48 42.016zM816 352q-0.992-20-14.496-33.504T768 304.992t-33.504 13.504T720.992 352t13.504 33.504 33.504 13.504 33.504-13.504T816 352z"  ></path></symbol><symbol id="ivy-icon-mouse" viewBox="0 0 1024 1024"><path d="M438.016 256q-50.016 0-75.008 4T320 274.016q-30.016 16-46.016 46.016-10.016 18.016-14.016 43.008t-4 75.008v276q0 50.016 4 75.008t14.016 43.008q16 30.016 46.016 46.016 18.016 10.016 43.008 14.016t75.008 4h148q50.016 0 75.008-4t43.008-14.016q30.016-16 46.016-46.016 10.016-18.016 14.016-43.008t4-75.008v-276q0-50.016-4-75.008t-14.016-43.008q-16-30.016-46.016-46.016-18.016-10.016-43.008-14.016T586.016 256h-148z m0-64h148q62.016 0 94.016 6.496t54.016 19.488q47.008 24.992 72 72 12.992 22.016 19.488 54.016t6.496 94.016v276q0 62.016-6.496 94.016t-19.488 54.016q-24.992 47.008-72 72-22.016 12.992-54.016 19.488t-94.016 6.496h-148q-62.016 0-94.016-6.496t-54.016-19.488q-47.008-24.992-72-72-12.992-22.016-19.488-54.016T192 714.016v-276q0-62.016 6.496-94.016t19.488-54.016q24.992-47.008 72-72 22.016-12.992 54.016-19.488T438.016 192zM512 320q32 0 32 32v128q0 32-32 32t-32-32v-128q0-32 32-32z m32-96q0 14.016-8.992 23.008T512 256t-23.008-8.992T480 224V160q0-14.016-8.992-23.008T448 128h-96q-14.016 0-23.008-8.992T320 96t8.992-23.008T352 64h96q40.992 0.992 68 28T544 160v64z"  ></path></symbol><symbol id="ivy-icon-s-management" viewBox="0 0 1024 1024"><path d="M576 128v288l96-96 96 96V128h128v768H320V128h256zM128 128h128v768H128V128z"  ></path></symbol><symbol id="ivy-icon-s-operation" viewBox="0 0 1024 1024"><path d="M388.992 768q11.008-28.992 35.488-46.496T479.968 704t55.488 17.504T570.944 768h324.992v64H570.944q-11.008 28.992-35.488 46.496T479.968 896t-55.488-17.504T388.992 832H128v-64h260.992z m192-288q11.008-28.992 35.488-46.496T671.968 416t55.488 17.504T762.944 480h132.992v64h-132.992q-11.008 28.992-35.488 46.496T671.968 608t-55.488-17.504T580.992 544H128v-64h452.992z m-320-288q11.008-28.992 35.488-46.496T351.968 128t55.488 17.504T442.944 192h452.992v64H442.944q-11.008 28.992-35.488 46.496T351.968 320t-55.488-17.504T260.992 256H128V192h132.992z"  ></path></symbol><symbol id="ivy-icon-office-building" viewBox="0 0 1024 1024"><path d="M192 128v704h384V128H192zM160 64h448q14.016 0 23.008 8.992T640 96v768q0 14.016-8.992 23.008T608 896H160q-14.016 0-23.008-8.992T128 864V96q0-14.016 8.992-23.008T160 64z m96 192h256v64H256V256z m0 192h256v64H256v-64z m0 192h256v64H256v-64z m384-128h128v64h-128v-64z m0 128h128v64h-128v-64zM64 832h896v64H64v-64z m576-448v448h192V384h-192z m-32-64h256q14.016 0 23.008 8.992T896 352v512q0 14.016-8.992 23.008T864 896h-256q-14.016 0-23.008-8.992T576 864V352q0-14.016 8.992-23.008T608 320z"  ></path></symbol><symbol id="ivy-icon-open" viewBox="0 0 1024 1024"><path d="M330.016 256.992q-108 3.008-180 75.008T75.008 512q3.008 108 75.008 180t180 75.008h364q108-3.008 180-75.008T949.024 512q-3.008-108-75.008-180t-180-75.008H330.016z m0-72.992h364q139.008 4 231.488 96.512T1022.016 512q-4 139.008-96.512 231.488t-231.488 96.512H330.016q-139.008-4-231.488-96.512T2.016 512q4-139.008 96.512-231.488t231.488-96.512z m364 436.992q30.016 0 55.008-14.496t39.488-40 14.496-54.496-14.496-54.496-39.488-40-55.008-14.496q-46.016 0.992-76.992 32t-32 76.992q0.992 46.016 32 76.992t76.992 32z m0 73.024q-76.992-2.016-128.512-53.504T512 512q2.016-76.992 53.504-128.512t128.512-53.504q76.992 2.016 128.512 53.504T876.032 512q-2.016 76.992-53.504 128.512t-128.512 53.504z"  ></path></symbol><symbol id="ivy-icon-ship" viewBox="0 0 1024 1024"><path d="M512 387.008V448h406.016q15.008 0 24.512 12.992t5.504 28l-76 268q-19.008 63.008-68.992 100.512T687.04 896H337.024q-66.016-0.992-116-38.496t-68.992-100.512l-76-268q-4-15.008 5.504-28T106.048 448h342.016V117.984q0.992-18.016 16-27.008t31.008-0.992l14.016 7.008 3.008-0.992v3.008l232 126.016q16 10.016 15.488 29.504t-17.504 27.488z m0-70.016l144.992-66.016L512 171.968v144.992zM512 512H148.992l18.016 64h690.016l18.016-64H512.032zM184.992 640l28.992 99.008q12 42.016 45.504 67.008t77.504 26.016h350.016q44-0.992 77.504-26.016t45.504-67.008L839.008 640H184.992z"  ></path></symbol><symbol id="ivy-icon-sell" viewBox="0 0 1024 1024"><path d="M704 288h131.008q12.992 0 21.504 8t10.496 20.992L886.016 512h-64l-16-160H704v96q0 14.016-8.992 23.008T672 480t-23.008-8.992T640 448v-96h-256v96q0 14.016-8.992 23.008T352 480t-23.008-8.992T320 448v-96H217.984L166.976 864h344.992v64H130.976q-14.016 0-23.488-10.496t-7.488-24.512l56.992-576q2.016-12.992 10.496-20.992T188.992 288H320v-22.016q2.016-86.016 56-143.008T512 63.968q82.016 2.016 136 59.008T704 265.984V288z m-64 0v-22.016q-0.992-59.008-37.504-98.016T512 127.968q-54.016 0.992-90.496 40T384 265.984V288h256z m200.992 484L768 697.984V928q0 14.016-8.992 23.008T736 960t-23.008-8.992T704 928v-230.016l-72.992 74.016q-14.016 12.992-31.488 8t-22.016-22.496 7.488-30.496l128-128q10.016-10.016 23.008-10.016t23.008 10.016l128 128q12 12.992 7.488 30.496t-22.016 22.496-31.488-8z"  ></path></symbol><symbol id="ivy-icon-search" viewBox="0 0 1024 1024"><path d="M796 751.008l124.992 124.992q8.992 10.016 8.992 22.496t-9.504 22.016-22.016 9.504-22.496-8.992l-124.992-124.992q-132.992 108.992-295.008 99.488t-280.992-132.512q-114.016-128.992-111.008-291.008t122.016-286.016q124-119.008 286.016-122.016t291.008 111.008q123.008 119.008 132.512 280.992t-99.488 295.008zM480 832q150.016-4 248.992-103.008T832 480q-4-150.016-103.008-248.992T480 128q-150.016 4-248.992 103.008T128 480q4 150.016 103.008 248.992T480 832z"  ></path></symbol><symbol id="ivy-icon-service" viewBox="0 0 1024 1024"><path d="M864 410.016q50.016 28.992 75.488 79.008t19.008 107.488-42.016 100.992-90.496 61.504q-20.992 90.016-89.504 144.512t-160.512 56.512h-96q-14.016 0-23.008-8.992t-8.992-23.008 8.992-23.008 23.008-8.992h96q62.016-0.992 111.008-35.488t70.016-92.512H736q-14.016 0-23.008-8.992T704 736.032v-320q0-14.016 8.992-23.008t23.008-8.992h32q16 0 31.008 2.016-14.016-112-93.504-184T512 128.032q-114.016 2.016-193.504 74.016t-93.504 184q15.008-2.016 31.008-2.016h32q14.016 0 23.008 8.992t8.992 23.008v320q0 14.016-8.992 23.008T288 768.032H256q-67.008-0.992-116.992-39.488t-67.488-103.008 7.008-123.008 81.504-92.512q4-150.016 103.008-249.504t248.992-102.496q150.016 3.008 248.992 102.496t103.008 249.504zM256 448q-54.016 0.992-90.496 37.504T128 576q0.992 54.016 37.504 90.496T256 704v-256z m640 128q-0.992-54.016-37.504-90.496T768 448v256q54.016-0.992 90.496-37.504T896 576z"  ></path></symbol><symbol id="ivy-icon-scissors" viewBox="0 0 1024 1024"><path d="M512 578.016l-107.008 152.992q0.992 62.016-36 107.008t-98.016 56q-60.992 8.992-110.496-22.016t-68.512-90.016q-16.992-59.008 7.488-112.512t80.512-79.488q56.992-24 112.992-6.496t88.992 69.504l91.008-130.016L196.96 127.968q-8-11.008-5.504-23.488t13.504-20.512 23.488-5.504 20.512 13.504l392.992 560.992q34.016-52 89.504-69.504t112.512 6.496q56 26.016 80.512 79.488t7.488 112.512q-19.008 59.008-68.512 90.016t-110.496 22.016q-60-11.008-97.504-56t-36.512-107.008z m54.016-189.024l208.992-296.992q8-11.008 20.512-13.504t23.488 5.504 13.504 20.512-5.504 23.488l-220.992 316.992-39.008-56h-0.992zM190.016 815.008q22.016 15.008 47.008 17.504t48.992-8.512 38.496-32 16.992-47.008-8.512-48.992-32.992-38.016q-34.016-22.016-71.008-15.008t-60 40-16.992 70.016 38.016 62.016z m644 0q22.016-15.008 32.992-38.016t8.992-49.504-16.512-47.488-39.008-32-50.016-8.512-46.496 18.496q-32 24-38.016 61.504t16.992 70.016 60 39.488 71.008-14.016z"  ></path></symbol><symbol id="ivy-icon-shopping-bag-" viewBox="0 0 1024 1024"><path d="M704 320v96q0 14.016-8.992 23.008T672 448h-32v-128h-256v128h-32q-14.016 0-23.008-8.992T320 416v-96H192v576h640V320h-128zM320 256q2.016-82.016 56-136T512 64q82.016 2.016 136 56T704 256h160q14.016 0 23.008 8.992T896 288v640q0 14.016-8.992 23.008T864 960H160q-14.016 0-23.008-8.992T128 928V288q0-14.016 8.992-23.008T160 256h160z m64 0h256q-0.992-54.016-37.504-90.496T512 128q-54.016 0.992-90.496 37.504T384 256zM192 704h640v64H192v-64z"  ></path></symbol><symbol id="ivy-icon-orange" viewBox="0 0 1024 1024"><path d="M544 895.008q60-4.992 115.008-28t100.992-62.016l-183.008-183.008q-15.008 8.992-32.992 14.016v259.008z m260.992-135.008q39.008-46.016 62.016-100.992T895.008 544h-259.008q-4.992 18.016-14.016 32.992zM895.008 480q-4.992-60-28-115.008T804.992 264l-183.008 183.008q8.992 15.008 14.016 32.992h259.008zM760 219.008q-46.016-39.008-100.992-62.016T544 128.992v259.008q18.016 4.992 32.992 14.016zM480 128.992q-60 4.992-115.008 28T264 219.008l183.008 183.008q15.008-8.992 32.992-14.016V128.992zM219.008 264q-39.008 46.016-62.016 100.992T128.992 480h259.008q4.992-18.016 14.016-32.992zM128.992 544q4.992 60 28 115.008t62.016 100.992l183.008-183.008q-8.992-16-14.016-32.992H128.992z m135.008 260.992q46.016 39.008 100.992 62.016t115.008 28v-259.008q-16.992-4.992-32.992-14.016zM512 960q-190.016-4.992-316.512-131.488T64 512q4.992-190.016 131.488-316.512T512 64q190.016 4.992 316.512 131.488T960 512q-4.992 190.016-131.488 316.512T512 960z m0-384q27.008-0.992 44.992-19.008T575.008 512t-18.016-44.992T512 448.992t-44.992 18.016T448.992 512t18.016 44.992T512 576z"  ></path></symbol><symbol id="ivy-icon-phone-outline" viewBox="0 0 1024 1024"><path d="M79.008 432L592 944.992q7.008 7.008 16.512 8.512t18.496-2.496l252.992-108q16-7.008 19.008-23.488t-8.992-28.512l-152.992-154.016q-8-7.008-18.016-8.992t-19.008 3.008l-70.016 35.008-272-272 35.008-70.016q4.992-8.992 3.008-19.008t-8.992-18.016L232.992 133.984q-12-12-28.512-8.992t-23.488 19.008l-108 252.992q-4 8.992-2.496 18.496t8.512 16.512z m60.992-29.984l80.992-190.016 104.992 104-46.016 91.008L616.96 744l91.008-46.016 104 104.992-190.016 80.992zM512 320V256q108.992 3.008 180.992 75.008T768 512h-64q-2.016-82.016-56-136T512 320z m0-192V64q190.016 4.992 316.512 131.488T960 512h-64q-4-163.008-112.512-271.488T512 128z"  ></path></symbol><symbol id="ivy-icon-picture" viewBox="0 0 1024 1024"><path d="M96 896q-14.016 0-23.008-8.992T64 864V160q0-14.016 8.992-23.008T96 128h832q14.016 0 23.008 8.992T960 160v704q0 14.016-8.992 23.008T928 896H96z m316-228l-68.992-68.992q-10.016-10.016-23.008-10.016t-23.008 10.016L128 768h779.008l-242.016-290.016q-10.016-12-24.992-12t-24.992 12l-156 187.008q-8.992 11.008-23.008 11.488t-24-8.512zM256 384q0 26.016 12.992 48t35.488 35.008 47.488 12.992 48-12.992 35.488-35.008 12.512-48q-0.992-40.992-28-68t-68-27.008-68 27.008T255.968 384z"  ></path></symbol><symbol id="ivy-icon-receiving" viewBox="0 0 1024 1024"><path d="M288 384h448v64H288v-64z m96-128h256v64h-256V256z m-252.992 256H384v128h256v-128h252.992L721.984 192H301.984zM896 576h-192v128H320v-128H128v256h768v-256zM276 128h472q20 0.992 28.992 18.016l180 359.008q3.008 7.008 3.008 15.008v344q0 14.016-8.992 23.008t-23.008 8.992H96q-14.016 0-23.008-8.992T64 864.032v-344q0-8 3.008-15.008L247.008 146.016Q256 129.024 276 128z"  ></path></symbol><symbol id="ivy-icon-phone" viewBox="0 0 1024 1024"><path d="M199.008 126.016l-108 252.992q-4 8.992-2.496 18.496t8.512 16.512l512.992 512.992q7.008 7.008 16.512 8.512t18.496-2.496l252.992-108q16-7.008 19.008-23.488t-8.992-28.512l-138.016-139.008q-8-7.008-18.016-8.992t-19.008 3.008l-131.008 64.992-271.008-271.008 64.992-131.008q4.992-8.992 3.008-19.008t-8.992-18.016L250.976 115.968q-12-12-28.512-8.992t-23.488 19.008z"  ></path></symbol><symbol id="ivy-icon-picture-outline-round" viewBox="0 0 1024 1024"><path d="M512 128q-163.008 4-271.488 112.512T128 512q4 163.008 112.512 271.488T512 896q163.008-4 271.488-112.512T896 512q-4-163.008-112.512-271.488T512 128z m0-64q190.016 4.992 316.512 131.488T960 512q-4.992 190.016-131.488 316.512T512 960q-190.016-4.992-316.512-131.488T64 512q4.992-190.016 131.488-316.512T512 64z m128 224q64 0 64 64t-64 64q-64 0-64-64t64-64zM215.008 791.008l-46.016-46.016 186.016-184.992q26.016-24.992 60-28t64 18.016l138.016 98.016q8.992 7.008 20 6.016t20-8l250.016-224 42.016 48-248.992 224q-27.008 22.016-59.488 24t-60.512-18.016l-139.008-98.016q-8.992-7.008-20.512-6.016t-20.512 8.992z"  ></path></symbol><symbol id="ivy-icon-refresh-left" viewBox="0 0 1024 1024"><path d="M288.992 296.992h92.992q14.016 0 23.008 8.992t8.992 22.496-8.992 22.496-23.008 10.016H232.992q-14.016-0.992-23.008-10.016t-8.992-22.016V179.968q0-14.016 8.992-23.008t23.008-8.992 23.008 8.992 8.992 23.008v50.016q86.016-76.992 196.512-95.488t217.504 26.496q106.016 48 167.488 142.016t62.496 210.016q-4 163.008-112.512 271.488t-271.488 112.512q-163.008-4-271.488-112.512t-112.512-271.488h64q3.008 136 93.504 226.496t226.496 93.504q136-3.008 226.016-93.504t94.016-226.496q-0.992-100.992-56-180.512t-148-117.504q-94.016-35.008-188.512-13.504T289.024 296.992z"  ></path></symbol><symbol id="ivy-icon-picture-outline" viewBox="0 0 1024 1024"><path d="M160 160v704h704V160H160zM128 96h768q14.016 0 23.008 8.992T928 128v768q0 14.016-8.992 23.008T896 928H128q-14.016 0-23.008-8.992T96 896V128q0-14.016 8.992-23.008T128 96z m256 192q64 0 64 64t-64 64q-64 0-64-64t64-64zM184.992 876.992l-50.016-39.008 216-282.016q24-31.008 63.488-36t70.496 18.016l124.992 100.992q11.008 8 23.488 6.496t21.504-11.488l216-270.016 50.016 40-216 270.016q-24.992 31.008-64.512 35.008t-70.496-20l-124-100q-11.008-8-23.488-6.496t-20.512 12.512z"  ></path></symbol><symbol id="ivy-icon-pie-chart" viewBox="0 0 1024 1024"><path d="M448 68v64.992q-150.016 30.016-238.496 144T130.016 544q16 152 122.496 250.016T512 896.032q144-3.008 248-91.008t131.008-228.992h64q-30.016 178.016-162.496 284T480 958.048q-179.008-16.992-295.008-141.504T64 512.032q3.008-171.008 108.992-293.504T448 68.032z m128 28.992V448h351.008q-15.008-143.008-111.488-239.488t-239.488-111.488zM512 64v-31.008q98.016-6.016 188.512 27.488t160 103.008 103.008 160T991.008 512H512V64z"  ></path></symbol><symbol id="ivy-icon-s-data" viewBox="0 0 1024 1024"><path d="M416 896V128h192v768h-192z m-288 0V448h192v448H128z m576 0V320h192v576h-192z"  ></path></symbol><symbol id="ivy-icon-refrigerator" viewBox="0 0 1024 1024"><path d="M256 448h512V160q0-14.016-8.992-23.008T736 128H288q-14.016 0-23.008 8.992T256 160v288z m0 64v352q0 14.016 8.992 23.008T288 896h448q14.016 0 23.008-8.992T768 864V512H256zM288 64h448q40.992 0.992 68 28T832 160v704q-0.992 40.992-28 68T736 960H288q-40.992-0.992-68-28T192 864V160q0.992-40.992 28-68T288 64z m32 224h64v96h-64V288z m0 288h64v96h-64v-96z"  ></path></symbol><symbol id="ivy-icon-s-cooperation" viewBox="0 0 1024 1024"><path d="M320 320V128h384v192h192v192H128v-192h192z m-192 256h768v320H128V576z m256-256h256V192h-256v128z"  ></path></symbol><symbol id="ivy-icon-s-check" viewBox="0 0 1024 1024"><path d="M624 476V640H768q54.016 0.992 90.496 37.504T896 768H128q0.992-54.016 37.504-90.496T256 640h144v-164q-51.008-38.016-70.016-96t0.512-118.496 68.512-96.512T512 128.992t112.992 36 68.512 96.512 0.512 118.496-70.016 96zM128 896v-64h768v64H128z"  ></path></symbol><symbol id="ivy-icon-s-flag" viewBox="0 0 1024 1024"><path d="M288 128h608l-160 256 160 256H288v320H192V64h96v64z"  ></path></symbol><symbol id="ivy-icon-s-custom" viewBox="0 0 1024 1024"><path d="M628.992 528.992q135.008 42.016 216 150.016T928 928H96q2.016-140.992 83.008-248.992t216-150.016L512 704zM720 304q-2.016 88-60.992 147.008T512 512q-88-2.016-147.008-60.992T304 304q2.016-88 60.992-147.008T512 96q88 2.016 147.008 60.992T720 304z"  ></path></symbol><symbol id="ivy-icon-s-fold" viewBox="0 0 1024 1024"><path d="M896 192H128v128h768V192z m0 256H384v128h512v-128z m0 256H128v128h768v-128zM320 384l-192 128 192 128v-256z"  ></path></symbol><symbol id="ivy-icon-s-finance" viewBox="0 0 1024 1024"><path d="M688 512q-48 0.992-79.488 32.512T576 624q0.992 48 32.512 79.488T688 736H896v160H128V352h768v160h-208z m32 160h-32q-20-0.992-33.504-14.496t-13.504-33.504 13.504-33.504T688 576h32q20 0.992 33.504 14.496t13.504 33.504-13.504 33.504T720 672zM640 128l128 160H384z"  ></path></symbol><symbol id="ivy-icon-remove-outline" viewBox="0 0 1024 1024"><path d="M352 480h320q14.016 0 23.008 8.992T704 512t-8.992 23.008T672 544H352q-14.016 0-23.008-8.992T320 512t8.992-23.008T352 480z m160 416q163.008-4 271.488-112.512T896 512q-4-163.008-112.512-271.488T512 128q-163.008 4-271.488 112.512T128 512q4 163.008 112.512 271.488T512 896z m0 64q-190.016-4.992-316.512-131.488T64 512q4.992-190.016 131.488-316.512T512 64q190.016 4.992 316.512 131.488T960 512q-4.992 190.016-131.488 316.512T512 960z"  ></path></symbol><symbol id="ivy-icon-s-comment" viewBox="0 0 1024 1024"><path d="M736 504q-24-0.992-39.488-16.512T681.024 448t15.488-39.488T736 393.024t39.488 15.488 15.488 39.488-15.488 39.488T736 504z m-224 0q-24-0.992-39.488-16.512T457.024 448t15.488-39.488T512 393.024t39.488 15.488 15.488 39.488-15.488 39.488T512 504z m-224 0q-24-0.992-39.488-16.512T233.024 448t15.488-39.488T288 393.024t39.488 15.488 15.488 39.488-15.488 39.488T288 504zM128 128v640h192v160l224-160h352V128H128z"  ></path></symbol><symbol id="ivy-icon-remove" viewBox="0 0 1024 1024"><path d="M512 64q190.016 4.992 316.512 131.488T960 512q-4.992 190.016-131.488 316.512T512 960q-190.016-4.992-316.512-131.488T64 512q4.992-190.016 131.488-316.512T512 64zM288 512q0 16 11.008 27.008t27.008 11.008h372q16 0 27.008-11.008t11.008-27.008-11.008-27.008-27.008-11.008H326.016q-16 0-27.008 11.008T288 512z"  ></path></symbol><symbol id="ivy-icon-refresh-right" viewBox="0 0 1024 1024"><path d="M784.992 230.016V180q0-14.016 8.992-23.008t22.496-8.992 22.496 8.992 10.016 23.008v148.992q-0.992 12.992-10.016 22.016t-22.016 10.016h-148.992q-14.016-0.992-23.008-10.016t-8.992-22.496 8.992-22.496 23.008-8.992h92.992q-78.016-82.016-183.488-99.488t-204.512 34.496q-98.016 54.016-140.992 152t-16.992 208q28.992 108 113.504 173.504t196.512 67.488q136-3.008 226.016-93.504t94.016-226.496h64q-4 163.008-112.512 271.488t-271.488 112.512q-163.008-4-271.488-112.512t-112.512-271.488q0.992-116 62.016-210.016t167.008-140.992q107.008-46.016 217.504-27.488t197.504 95.488z"  ></path></symbol><symbol id="ivy-icon-s-unfold" viewBox="0 0 1024 1024"><path d="M128 192h768v128H128V192z m0 256h512v128H128v-128z m0 256h768v128H128v-128z m576-352l192 160-192 128v-288z"  ></path></symbol><symbol id="ivy-icon-school" viewBox="0 0 1024 1024"><path d="M224 128v704h576V128H224zM192 64h640q14.016 0 23.008 8.992T864 96v768q0 14.016-8.992 23.008T832 896H192q-14.016 0-23.008-8.992T160 864V96q0-14.016 8.992-23.008T192 64zM64 832h896v64H64v-64z m256-640h128v96h-128V192z m64 640h256v-64q-0.992-54.016-37.504-90.496T512 640q-54.016 0.992-90.496 37.504T384 768v64z m128-256q82.016 2.016 136 56T704 768v128H320v-128q2.016-82.016 56-136T512 576z m-192-192h128v96h-128v-96z m256-192h128v96h-128V192z m0 192h128v96h-128v-96z"  ></path></symbol><symbol id="ivy-icon-s-shop" viewBox="0 0 1024 1024"><path d="M704 704h64v192H256v-192h64v64h384v-64z m188.992-152q3.008 11.008 3.008 24-0.992 40.992-28 68T800 671.008t-68-27.008T704 576q-0.992 40.992-28 68T608 671.008t-68-27.008T512 576q-0.992 40.992-28 68T416 671.008t-68-27.008T320 576q-0.992 40.992-28 68T224 671.008t-68-27.008T128 576q0-12.992 3.008-24L192 128h640z"  ></path></symbol><symbol id="ivy-icon-s-ticket" viewBox="0 0 1024 1024"><path d="M640 832H64v-192q54.016-0.992 90.496-37.504T192 512q-0.992-54.016-37.504-90.496T64 384V192h576v160h64V192h256v192q-54.016 0.992-90.496 37.504T832 512q0.992 54.016 37.504 90.496T960 640v192h-256v-160h-64v160z m0-416v192h64v-192h-64z"  ></path></symbol><symbol id="ivy-icon-sort-up" viewBox="0 0 1024 1024"><path d="M384 140.992V928q0 14.016 8.992 23.008T416 960t23.008-8.992T448 928V219.008l243.008 242.016q10.016 10.016 22.496 10.016t22.016-10.016 9.504-22.496-8.992-22.496L439.04 119.04q-7.008-7.008-16.512-8.992t-18.496 2.016-14.496 11.488-5.504 17.504z"  ></path></symbol><symbol id="ivy-icon-star-on" viewBox="0 0 1024 1024"><path d="M284 868L512 748l228 120q4 0.992 7.008-0.992t2.016-6.016l-43.008-254.016 184-180q3.008-3.008 2.016-6.496t-4.992-4.512l-255.008-36.992-114.016-231.008q-2.016-4-6.016-4t-6.016 4l-114.016 231.008-255.008 36.992q-4 0.992-4.992 4.512t2.016 6.496l184 180-44 254.016q0 4 3.008 6.016t7.008 0.992z"  ></path></symbol><symbol id="ivy-icon-success" viewBox="0 0 1024 1024"><path d="M512 64q190.016 4.992 316.512 131.488T960 512q-4.992 190.016-131.488 316.512T512 960q-190.016-4.992-316.512-131.488T64 512q4.992-190.016 131.488-316.512T512 64z m-56 536l-99.008-99.008q-12-11.008-27.488-11.008t-27.008 11.488-11.488 26.496 11.008 27.008l127.008 127.008q11.008 11.008 27.008 11.008t27.008-11.008l263.008-263.008q15.008-15.008 9.504-36.512t-27.008-27.008-36.512 9.504z"  ></path></symbol><symbol id="ivy-icon-sort" viewBox="0 0 1024 1024"><path d="M384 96q0-14.016 8.992-23.008T416 64t23.008 8.992T448 96v787.008q0 10.016-5.504 17.504t-14.496 11.488-18.496 2.016-16.512-8.992L96 608.032q-8.992-8.992-8.992-22.496T96 563.04q10.016-10.016 22.496-10.016t22.496 10.016L384 806.048V96.032z m192 44.992q0-10.016 5.504-17.504t14.496-11.488 18.496-2.016 16.512 8.992L928 415.968q8.992 8.992 8.992 22.496t-8.992 22.496q-10.016 10.016-22.496 10.016t-22.496-10.016L640 217.952v710.016q0 14.016-8.992 23.008t-23.008 8.992-23.008-8.992-8.992-23.008V140.96z"  ></path></symbol><symbol id="ivy-icon-takeaway-box" viewBox="0 0 1024 1024"><path d="M832 384H192v448h640V384zM96 320h832V128H96v192z m800 64v480q0 14.016-8.992 23.008T864 896H160q-14.016 0-23.008-8.992T128 864V384H64q-14.016 0-23.008-8.992T32 352V96q0-14.016 8.992-23.008T64 64h896q14.016 0 23.008 8.992T992 96v256q0 14.016-8.992 23.008T960 384h-64z m-480 128h192q14.016 0 23.008 8.992T640 544t-8.992 23.008T608 576h-192q-14.016 0-23.008-8.992T384 544t8.992-23.008T416 512z"  ></path></symbol><symbol id="ivy-icon-stopwatch" viewBox="0 0 1024 1024"><path d="M512 896q163.008-4 271.488-112.512T896 512q-4-163.008-112.512-271.488T512 128q-163.008 4-271.488 112.512T128 512q4 163.008 112.512 271.488T512 896z m0 64q-190.016-4.992-316.512-131.488T64 512q4.992-190.016 131.488-316.512T512 64q190.016 4.992 316.512 131.488T960 512q-4.992 190.016-131.488 316.512T512 960z m160-724.992q-59.008 262.016-123.008 372-56 78.016-116.992 43.008t-20.992-123.008q64-110.016 260.992-292z"  ></path></symbol><symbol id="ivy-icon-thumb" viewBox="0 0 1024 1024"><path d="M512 128q-28 0.992-46.016 19.008T446.976 192v516.992l-172.992-138.016q-24.992-20-55.488-20.992t-57.504 16.992q-14.016 12-16.992 30.016t8 32.992l180.992 240q8.992 12.992 22.496 19.488t28.512 6.496h512V574.976q0-20.992-12.512-38.016t-33.504-23.008l-206.016-62.016q-31.008-10.016-49.504-34.496t-18.496-57.504v-168q-0.992-27.008-19.008-44.992t-44.992-19.008z m-152.992 428.992l24 19.008V192q0-35.008 16.512-64.992t47.008-48 64.992-18.016 64.992 18.016 47.008 48T640.032 192v168q0 11.008 6.016 19.488t16.992 11.488l206.016 62.016q40.992 12.992 65.504 46.016t25.504 76V896q-0.992 27.008-19.008 44.992T896.064 960h-512q-31.008 0-57.504-13.504t-44.512-37.504l-180.992-240.992q-12.992-18.016-18.496-39.488t-1.504-44 16-40.992 31.008-30.496q44-28.992 94.496-26.496t91.488 34.496z"  ></path></symbol><symbol id="ivy-icon-tickets" viewBox="0 0 1024 1024"><path d="M192 128v768h640V128H192zM160 64h704q14.016 0 23.008 8.992T896 96v832q0 14.016-8.992 23.008T864 960H160q-14.016 0-23.008-8.992T128 928V96q0-14.016 8.992-23.008T160 64z m160 448h384v64H320v-64z m0-192h192v64h-192v-64z m0 384h384v64H320v-64z"  ></path></symbol><symbol id="ivy-icon-turn-off-microphone" viewBox="0 0 1024 1024"><path d="M412 592l-44.992 46.016q-23.008-27.008-35.008-59.008T320 512V256q2.016-82.016 56-136T512 64q82.016 2.016 136 56T704 256v44l-64 64V256q-0.992-54.016-37.504-90.496T512 128q-54.016 0.992-90.496 37.504T384 256v256q0.992 46.016 28 80z m52 39.008q30.016 12 61.504 8.512t58.016-21.504 41.504-46.016 15.008-60v-56.992l64-64V512q0 52-25.504 96t-70.496 70.016-95.488 26.016-96.512-24.992z m-148.992 148.992l46.016-46.016Q416.032 768 480.032 768h64q95.008-2.016 158.496-65.504T768.032 544v-32q0-14.016 8.992-23.008t23.008-8.992 23.008 8.992 8.992 23.008v32q-3.008 122.016-84.512 203.488T544.032 832v64h64q14.016 0 23.008 8.992t8.992 23.008-8.992 23.008-23.008 8.992h-192q-14.016 0-23.008-8.992T384.032 928t8.992-23.008 23.008-8.992h64v-64q-46.016 0-88-13.504t-76.992-38.496z m-48-41.984q-36.992-40.992-56-90.496T192 544.032v-32q0-14.016 8.992-23.008T224 480.032t23.008 8.992 8.992 23.008v32q0 43.008 15.008 80.512t40.992 67.488z m-116 120.992q-10.016 8.992-22.496 8.992t-22.016-9.504-10.016-22.016 8.512-22.496l704-708.992Q819.008 96 831.488 96t22.016 9.504 10.016 22.496-8.512 23.008z"  ></path></symbol><symbol id="ivy-icon-time" viewBox="0 0 1024 1024"><path d="M512 896q163.008-4 271.488-112.512T896 512q-4-163.008-112.512-271.488T512 128q-163.008 4-271.488 112.512T128 512q4 163.008 112.512 271.488T512 896z m0 64q-190.016-4.992-316.512-131.488T64 512q4.992-190.016 131.488-316.512T512 64q190.016 4.992 316.512 131.488T960 512q-4.992 190.016-131.488 316.512T512 960zM480 256q14.016 0 23.008 8.992T512 288v256q0 14.016-8.992 23.008T480 576t-23.008-8.992T448 544V288q0-14.016 8.992-23.008T480 256z m0 256h256q32 0 32 32t-32 32h-256q-32 0-32-32t32-32z"  ></path></symbol><symbol id="ivy-icon-truck" viewBox="0 0 1024 1024"><path d="M128.992 736H96q-14.016 0-23.008-8.992T64 704V224q0-14.016 8.992-23.008T96 192h576q14.016 0 23.008 8.992T704 224v96h164.992q12 0 20.512 7.488t10.496 19.488l54.016 352q2.016 15.008-7.488 26.016t-23.488 11.008H831.04q4 42.016-13.504 78.496t-52.992 59.008-76.512 22.496-76.512-22.496-52.992-59.008T545.024 736h-130.016q4 42.016-13.504 78.496t-52.992 59.008T272 896t-76.512-22.496-52.992-59.008T128.992 736z m23.008-64q20.992-30.016 52-47.008T272 608t68 16.992T392 672h176q27.008-39.008 72-56V256H128v416h24z m656 0h76.992l-19.008-128h-162.016v64.992q32 4 59.008 20T807.968 672z m48-192l-15.008-96H704v96h152zM688 832q34.016-0.992 56.512-23.488t22.496-56.512-22.496-56.512-56.512-22.496-56.512 22.496-22.496 56.512 22.496 56.512T688 832z m-416 0q34.016-0.992 56.512-23.488t22.496-56.512-22.496-56.512-56.512-22.496-56.512 22.496-22.496 56.512 22.496 56.512T272 832z"  ></path></symbol><symbol id="ivy-icon-upload" viewBox="0 0 1024 1024"><path d="M544 864v-192h128l-160-192-160 192h128v192h-160v-2.016L304 864q-102.016-3.008-169.504-70.496T64 624q2.016-94.016 61.504-159.488t151.488-77.504q18.016-87.008 82.496-140T512 192q88 2.016 152.512 55.008t82.496 140q92 12 151.488 77.504T960 624q-3.008 102.016-70.496 169.504T720 864l-16-2.016V864h-160z"  ></path></symbol><symbol id="ivy-icon-user" viewBox="0 0 1024 1024"><path d="M512 512q82.016-2.016 136-56T704 320q-2.016-82.016-56-136T512 128q-82.016 2.016-136 56T320 320q2.016 82.016 56 136T512 512z m0 64q-108.992-3.008-180.992-75.008T256 320q3.008-108.992 75.008-180.992T512 64q108.992 3.008 180.992 75.008T768 320q-3.008 108.992-75.008 180.992T512 576z m320 320v-96q-0.992-40.992-28-68T736 704H288q-40.992 0.992-68 28T192 800v96q0 14.016-8.992 23.008T160 928t-23.008-8.992T128 896v-96q2.016-68 47.008-112.992T288 640h448q68 2.016 112.992 47.008T896 800v96q0 14.016-8.992 23.008T864 928t-23.008-8.992T832 896z"  ></path></symbol><symbol id="ivy-icon-user-solid" viewBox="0 0 1024 1024"><path d="M288 320q2.016 95.008 65.504 158.496T512 544q95.008-2.016 158.496-65.504T736 320q-2.016-95.008-65.504-158.496T512 96q-95.008 2.016-158.496 65.504T288 320z m544 608H160q-14.016 0-23.008-8.992T128 896v-96q2.016-68 47.008-112.992T288 640h448q68 2.016 112.992 47.008T896 800v96q0 14.016-8.992 23.008T864 928h-32z"  ></path></symbol><symbol id="ivy-icon-upload1" viewBox="0 0 1024 1024"><path d="M160 832h704q14.016 0 23.008 8.992T896 864t-8.992 23.008T864 896H160q-14.016 0-23.008-8.992T128 864t8.992-23.008T160 832zM544 254.016v450.016h-64V247.04l-243.008 243.008L192 445.056l316.992-316.992 316.992 316.992-46.016 44.992z"  ></path></symbol><symbol id="ivy-icon-video-camera-solid" viewBox="0 0 1024 1024"><path d="M768 576l192-64v320l-192-64v96q0 14.016-8.992 23.008T736 896H96q-14.016 0-23.008-8.992T64 864V480q0-14.016 8.992-23.008T96 448h640q14.016 0 23.008 8.992T768 480v96zM192 768v64h384v-64H192z m192-480q2.016-68 47.008-112.992T544 128q68 2.016 112.992 47.008T704 288q-2.016 68-47.008 112.992T544 448q-68-2.016-112.992-47.008T384 288z m64 0q0 26.016 12.992 48t35.488 35.008 47.488 12.992 48-12.992 35.488-35.008 12.512-48q-0.992-40.992-28-68t-68-27.008-68 27.008T447.968 288zM128 320q0-35.008 16.992-64T192 209.504 256 192t64 17.504T367.008 256 384 320q-0.992 54.016-37.504 90.496T256 448q-54.016-0.992-90.496-37.504T128 320z m64 0q0.992 27.008 19.008 44.992T256 383.008t44.992-18.016T319.008 320t-18.016-44.992T256 256.992t-44.992 18.016T192 320z"  ></path></symbol><symbol id="ivy-icon-video-play" viewBox="0 0 1024 1024"><path d="M512 64q190.016 4.992 316.512 131.488T960 512q-4.992 190.016-131.488 316.512T512 960q-190.016-4.992-316.512-131.488T64 512q4.992-190.016 131.488-316.512T512 64z m0 832q163.008-4 271.488-112.512T896 512q-4-163.008-112.512-271.488T512 128q-163.008 4-271.488 112.512T128 512q4 163.008 112.512 271.488T512 896z m-48-248L668.992 512 464 376v272z m11.008-341.984l248.992 166.016q20.992 15.008 20.992 40t-20.992 40l-248.992 166.016q-12 8-24.992 8.512t-24.512-6.016-18.496-17.504-7.008-24.992V346.048q0-14.016 7.008-24.992t18.496-17.504 24.512-6.016 24.992 8.512z"  ></path></symbol><symbol id="ivy-icon-video-camera" viewBox="0 0 1024 1024"><path d="M704 768V256H128v512h576z m64-416l192-96v512l-192-96v128q0 14.016-8.992 23.008T736 832H96q-14.016 0-23.008-8.992T64 800V224q0-14.016 8.992-23.008T96 192h640q14.016 0 23.008 8.992T768 224v128z m0 72v176l128 64v-304zM192 320h192v64H192v-64z"  ></path></symbol><symbol id="ivy-icon-right" viewBox="0 0 1024 1024"><path d="M755.008 480H160q-14.016 0-23.008 8.992T128 512t8.992 23.008T160 544h595.008l-234.016 232.992Q512 787.008 512 800t9.504 22.496T544 832t23.008-8.992l288-288Q864 524.992 864 512t-8.992-23.008l-288-288Q556.992 192 544 192t-22.496 9.504T512 224t8.992 23.008z"  ></path></symbol><symbol id="ivy-icon-video-pause" viewBox="0 0 1024 1024"><path d="M512 64q190.016 4.992 316.512 131.488T960 512q-4.992 190.016-131.488 316.512T512 960q-190.016-4.992-316.512-131.488T64 512q4.992-190.016 131.488-316.512T512 64z m0 832q163.008-4 271.488-112.512T896 512q-4-163.008-112.512-271.488T512 128q-163.008 4-271.488 112.512T128 512q4 163.008 112.512 271.488T512 896z m-96-544q32 0 32 32v256q0 32-32 32t-32-32v-256q0-32 32-32z m192 0q32 0 32 32v256q0 32-32 32t-32-32v-256q0-32 32-32z"  ></path></symbol><symbol id="ivy-icon-star-off" viewBox="0 0 1024 1024"><path d="M512 748l228 120q4 0.992 7.008-0.992t2.016-6.016l-43.008-254.016 184-180q3.008-3.008 2.016-6.496t-4.992-4.512l-255.008-36.992-114.016-231.008q-2.016-4-6.016-4t-6.016 4l-114.016 231.008-255.008 36.992q-4 0.992-4.992 4.512t2.016 6.496l184 180-44 254.016q0 4 3.008 6.016t7.008 0.992z m-197.984 176q-19.008 10.016-38.496 8.512t-36-13.504-24-30.496-4.512-38.496l38.016-220.992-160-156q-15.008-14.016-19.488-33.504t2.016-39.008 21.504-32 35.008-15.488l222.016-32 99.008-200.992q8.992-19.008 26.016-28.992t36.992-10.016 36.992 10.016 26.016 28.992l99.008 200.992 222.016 32q20 3.008 35.488 15.488t21.504 32 1.504 39.008-19.488 33.504l-160 156 38.016 220.992q3.008 20-4.512 38.496t-24 30.496-36 13.504-38.496-7.488l-198.016-104.992z"  ></path></symbol><symbol id="ivy-icon-trophy" viewBox="0 0 1024 1024"><path d="M480 896v-194.016q-79.008-11.008-136.992-62.016t-79.008-128H231.008q-32 0-56.992-18.496t-35.008-49.504L94.016 290.976Q88 272.96 91.52 255.488t14.496-32.512 27.008-23.008 34.016-8h88.992v-96q0-14.016 8.992-23.008t23.008-8.992h448q14.016 0 23.008 8.992t8.992 23.008v96h88.992q18.016 0 34.016 8t27.008 23.008 14.496 32.512-2.496 35.488l-46.016 152.992q-8.992 30.016-34.016 48.992t-56.992 19.008h-32.992q-20.992 76.992-79.008 128t-136.992 62.016V896h128q14.016 0 23.008 8.992t8.992 23.008-8.992 23.008-23.008 8.992h-320q-14.016 0-23.008-8.992T320.032 928t8.992-23.008 23.008-8.992h128z m224-448V128H320v320q2.016 82.016 56 136T512 640q82.016-2.016 136-56T704 448z m64 0h24.992q10.016 0 18.496-6.016t11.488-16.992L868.992 272q2.016-6.016-2.016-11.008T856.96 256h-88.992v192zM256 448V256H167.008q-6.016 0-10.016 4.992t-2.016 11.008l46.016 152.992q3.008 11.008 11.488 16.992t18.496 6.016h24.992z"  ></path></symbol><symbol id="ivy-icon-wallet" viewBox="0 0 1024 1024"><path d="M640 288h-64V128H128v704h384v32q0 14.016 8.992 23.008T544 896H96q-14.016 0-23.008-8.992T64 864V96q0-14.016 8.992-23.008T96 64h512q14.016 0 23.008 8.992T640 96v192zM128 320v512h768V320H128zM96 256h832q14.016 0 23.008 8.992T960 288v576q0 14.016-8.992 23.008T928 896H96q-14.016 0-23.008-8.992T64 864V288q0-14.016 8.992-23.008T96 256z m608 384q-27.008-0.992-44.992-19.008T640.992 576t18.016-44.992T704 512.992t44.992 18.016 18.016 44.992-18.016 44.992T704 640z"  ></path></symbol><symbol id="ivy-icon-watch" viewBox="0 0 1024 1024"><path d="M512 768q108.992-3.008 180.992-75.008T768 512q-3.008-108.992-75.008-180.992T512 256q-108.992 3.008-180.992 75.008T256 512q3.008 108.992 75.008 180.992T512 768z m0 64q-136-3.008-226.496-93.504T192 512q3.008-136 93.504-226.496T512 192q136 3.008 226.496 93.504T832 512q-3.008 136-93.504 226.496T512 832z m-32-480q14.016 0 23.008 8.992T512 384v160q0 14.016-8.992 23.008T480 576t-23.008-8.992T448 544v-160q0-14.016 8.992-23.008T480 352z m0 160h128q32 0 32 32t-32 32h-128q-32 0-32-32t32-32z m128-256V128h-192v128h-64V64h320v192h-64z m-192 512v128h192v-128h64v192H352v-192h64z"  ></path></symbol><symbol id="ivy-icon-warning-outline" viewBox="0 0 1024 1024"><path d="M512 64q190.016 4.992 316.512 131.488T960 512q-4.992 190.016-131.488 316.512T512 960q-190.016-4.992-316.512-131.488T64 512q4.992-190.016 131.488-316.512T512 64z m0 832q163.008-4 271.488-112.512T896 512q-4-163.008-112.512-271.488T512 128q-163.008 4-271.488 112.512T128 512q4 163.008 112.512 271.488T512 896z m48-176q-0.992 20-14.496 33.504T512 767.008t-33.504-13.504-13.504-33.504 13.504-33.504T512 672.992t33.504 13.504 14.496 33.504zM512 256q14.016 0 23.008 8.992T544 288v288q0 14.016-8.992 23.008T512 608t-23.008-8.992T480 576V288q0-14.016 8.992-23.008T512 256z"  ></path></symbol><symbol id="ivy-icon-wind-power" viewBox="0 0 1024 1024"><path d="M160 64q32 0 32 32v832q0 32-32 32t-32-32V96q0-32 32-32z m416 355.008l128-12V168.992l-128-12v262.016z m-64 4.992v-272l-192-18.016V160H256V64l616.992 56q38.016 4 62.016 31.008T960 216v144q-0.992 38.016-24.992 64.992t-62.016 31.008L256 512V224h64v218.016z m256-23.008l99.008-8.992q12.992-0.992 20.992-10.016t8-22.016v-144q0-12.992-8-22.016t-20.992-10.016L768 174.944v226.016z"  ></path></symbol><symbol id="ivy-icon-view" viewBox="0 0 1024 1024"><path d="M512 160q242.016 22.016 376 176T1024 512q-2.016 22.016-136 176T512 864q-242.016-22.016-376-176T0 512q2.016-22.016 136-176T512 160z m0 64q-170.016 11.008-283.008 114.496T74.976 512q40.992 70.016 154.016 173.504T512 800q170.016-11.008 283.008-114.496T949.024 512q-40.992-70.016-154.016-173.504T512 224z m0 64q95.008 2.016 158.496 65.504T736 512q-2.016 95.008-65.504 158.496T512 736q-95.008-2.016-158.496-65.504T288 512q2.016-95.008 65.504-158.496T512 288z m0 64q-68 2.016-112.992 47.008T352 512q2.016 68 47.008 112.992T512 672q68-2.016 112.992-47.008T672 512q-2.016-68-47.008-112.992T512 352z"  ></path></symbol><symbol id="ivy-icon-watermelon" viewBox="0 0 1024 1024"><path d="M683.008 600l-44 163.008-60.992-16 52.992-199.008L576 492.992l-158.016 159.008-46.016-46.016 159.008-158.016-56-56-198.016 54.016-16.992-62.016 163.008-44-140-140q-96.992 119.008-91.008 264t112 256q111.008 106.016 256 112t264-91.008z m232 140.992q-84.992 96-202.496 133.504t-241.504 8.512q-124-31.008-211.488-118.496t-118.496-211.488q-28.992-124 8.512-241.504t133.504-202.496z"  ></path></symbol><symbol id="ivy-icon-share" viewBox="0 0 1024 1024"><path d="M680 348.992l-302.016 188q8 26.016 4.992 52.992l280 104.992q28.992-40 74.496-51.008t89.504 12 60.512 66.496-0.512 90.016-58.496 68.512-89.504 10.496-75.488-49.504-22.496-88l-280-104.992q-24 34.016-60.992 47.488t-76.512 3.008-64.992-40.512-29.504-70.496 15.008-75.008 56-52 75.488-12 68.512 33.504l302.016-188q-14.016-48 4.992-91.008t64-63.488 89.504-7.008 71.008 55.488 19.008 88-46.016 77.504-85.504 29.504-83.008-35.008z"  ></path></symbol><symbol id="ivy-icon-set-up" viewBox="0 0 1024 1024"><path d="M224 160q-27.008 0.992-44.992 19.008T160 224v576q0.992 27.008 19.008 44.992T224 864h576q27.008-0.992 44.992-19.008T864 800V224q-0.992-27.008-19.008-44.992T800 160H224z m0-64h576q54.016 0.992 90.496 37.504T928 224v576q-0.992 54.016-37.504 90.496T800 928H224q-54.016-0.992-90.496-37.504T96 800V224q0.992-54.016 37.504-90.496T224 96z m160 320q27.008-0.992 44.992-19.008T447.008 352t-18.016-44.992T384 288.992t-44.992 18.016T320.992 352t18.016 44.992T384 416z m0 64q-54.016-0.992-90.496-37.504T256 352q0.992-54.016 37.504-90.496T384 224q54.016 0.992 90.496 37.504T512 352q-0.992 54.016-37.504 90.496T384 480z m96-160h256q32 0 32 32t-32 32h-256q-32 0-32-32t32-32z m160 416q27.008-0.992 44.992-19.008T703.008 672t-18.016-44.992T640 608.992t-44.992 18.016T576.992 672t18.016 44.992T640 736z m0 64q-54.016-0.992-90.496-37.504T512 672q0.992-54.016 37.504-90.496T640 544q54.016 0.992 90.496 37.504T768 672q-0.992 54.016-37.504 90.496T640 800zM288 640h256q32 0 32 32t-32 32H288q-32 0-32-32t32-32z"  ></path></symbol><symbol id="ivy-icon-zoom-in" viewBox="0 0 1024 1024"><path d="M796 751.008l124.992 124.992q8.992 10.016 8.992 22.496t-9.504 22.016-22.016 9.504-22.496-8.992l-124.992-124.992q-132.992 108.992-295.008 99.488t-280.992-132.512q-114.016-128.992-111.008-291.008t122.016-286.016q124-119.008 286.016-122.016t291.008 111.008q123.008 119.008 132.512 280.992t-99.488 295.008zM480 832q150.016-4 248.992-103.008T832 480q-4-150.016-103.008-248.992T480 128q-150.016 4-248.992 103.008T128 480q4 150.016 103.008 248.992T480 832z m-32-384v-96q0-14.016 8.992-23.008T480 320t23.008 8.992T512 352v96h96q14.016 0 23.008 8.992T640 480t-8.992 23.008T608 512h-96v96q0 14.016-8.992 23.008T480 640t-23.008-8.992T448 608v-96h-96q-14.016 0-23.008-8.992T320 480t8.992-23.008T352 448h96z"  ></path></symbol><symbol id="ivy-icon-water-cup" viewBox="0 0 1024 1024"><path d="M736 800V160H160v640q0.992 27.008 19.008 44.992T224 864h448q27.008-0.992 44.992-19.008T736 800z m64-544h64q40 0.992 67.488 28T960 352v224q-0.992 40.992-28.512 68T864 672h-64v128q-0.992 54.016-37.504 90.496T672 928H224q-54.016-0.992-90.496-37.504T96 800V128q0-14.016 8.992-23.008T128 96h640q14.016 0 23.008 8.992T800 128v128z m0 64v288h64q12.992 0 22.016-8.992t10.016-23.008v-224q-0.992-14.016-10.016-23.008T864 320h-64z"  ></path></symbol><symbol id="ivy-icon-warning" viewBox="0 0 1024 1024"><path d="M512 64q190.016 4.992 316.512 131.488T960 512q-4.992 190.016-131.488 316.512T512 960q-190.016-4.992-316.512-131.488T64 512q4.992-190.016 131.488-316.512T512 64z m0 192q-26.016 0-43.008 19.008T453.984 320l23.008 256q2.016 14.016 11.488 22.496t23.488 8.512 23.488-8.512 11.488-22.496l23.008-256q2.016-26.016-15.008-44.992T511.936 256z m0 512q22.016-0.992 36.512-15.008t14.496-36-14.496-36.512T512 665.984t-36.512 14.496-14.496 36.512 14.496 36T512 768z"  ></path></symbol><symbol id="ivy-icon-watch-" viewBox="0 0 1024 1024"><path d="M512 768q108.992-3.008 180.992-75.008T768 512q-3.008-108.992-75.008-180.992T512 256q-108.992 3.008-180.992 75.008T256 512q3.008 108.992 75.008 180.992T512 768z m0 64q-136-3.008-226.496-93.504T192 512q3.008-136 93.504-226.496T512 192q136 3.008 226.496 93.504T832 512q-3.008 136-93.504 226.496T512 832z m96-576V128h-192v128h-64V64h320v192h-64z m-192 512v128h192v-128h64v192H352v-192h64z m96-384q-14.016 0-23.008-8.992T480 352t8.992-23.008T512 320t23.008 8.992T544 352t-8.992 23.008T512 384z m0 320q-14.016 0-23.008-8.992T480 672t8.992-23.008T512 640t23.008 8.992T544 672t-8.992 23.008T512 704z m-128-192q0 14.016-8.992 23.008T352 544t-23.008-8.992T320 512t8.992-23.008T352 480t23.008 8.992T384 512z m320 0q0 14.016-8.992 23.008T672 544t-23.008-8.992T640 512t8.992-23.008T672 480t23.008 8.992T704 512z m-281.984-89.984q-14.016 12-31.488 7.488t-22.496-22.496 8-31.008q10.016-8.992 22.496-8.992t22.016 9.504 10.016 22.496-8.512 23.008z m225.984 225.984q-12.992 12.992-31.008 8t-22.496-22.496 7.488-31.488q10.016-8.992 23.008-8.512t22.496 10.016 9.504 22.016-8.992 22.496z m-225.984-45.984q12 14.016 7.488 31.488t-22.496 22.496-31.008-8q-8.992-10.016-8.992-22.496t9.504-22.016 22.496-10.016 23.008 8.512z m225.984-226.016q12 14.016 7.488 31.488t-22.016 22.016-31.488-7.488q-8.992-10.016-8.512-23.008t10.016-22.496 22.016-9.504 22.496 8.992z"  ></path></symbol><symbol id="ivy-icon-setting" viewBox="0 0 1024 1024"><path d="M624.992 64l222.016 128-43.008 75.008q22.016 26.016 40 56.992t30.016 64h86.016v256h-86.016q-24 67.008-70.016 120.992l43.008 75.008-222.016 128-43.008-75.008q-70.016 12.992-140 0l-43.008 75.008-222.016-128 43.008-75.008q-23.008-27.008-40.512-57.504t-29.504-63.488H63.936v-256h86.016q24-67.008 70.016-120.992L176.96 192l222.016-128 43.008 75.008q70.016-12.992 140 0z m24 87.008l-12 20-22.016 39.008-44.992-8q-58.016-11.008-116 0l-44.992 8-34.016-59.008-110.016 64 32.992 59.008-28.992 34.016q-38.016 44.992-58.016 100.992l-15.008 43.008H127.936v128h67.008l16 43.008q10.016 28.992 24 52.992t34.016 48l28.992 34.016-32.992 59.008 110.016 64 34.016-59.008 44.992 8q58.016 11.008 116 0l44.992-8 34.016 59.008 110.016-64-32.992-59.008 28.992-34.016q38.016-46.016 58.016-100.992l15.008-43.008h68v-128h-67.008l-16-43.008q-8.992-27.008-24-52.512t-34.016-48.512l-28.992-34.016 32.992-59.008zM512 292q95.008 2.016 158.496 65.504T736 516q-2.016 95.008-65.504 158.496T512 740q-95.008-2.016-158.496-65.504T288 516q2.016-95.008 65.504-158.496T512 292z m0 64q-68 2.016-112.992 47.008T352 516q2.016 68 47.008 112.992T512 676q68-2.016 112.992-47.008T672 516q-2.016-68-47.008-112.992T512 356z"  ></path></symbol><symbol id="ivy-icon-plus" viewBox="0 0 1024 1024"><path d="M480 480V128q0-14.016 8.992-23.008T512 96t23.008 8.992T544 128v352h352q14.016 0 23.008 8.992T928 512t-8.992 23.008T896 544H544v352q0 14.016-8.992 23.008T512 928t-23.008-8.992T480 896V544H128q-14.016 0-23.008-8.992T96 512t8.992-23.008T128 480h352z"  ></path></symbol><symbol id="ivy-icon-zoom-out" viewBox="0 0 1024 1024"><path d="M796 751.008l124.992 124.992q8.992 10.016 8.992 22.496t-9.504 22.016-22.016 9.504-22.496-8.992l-124.992-124.992q-132.992 108.992-295.008 99.488t-280.992-132.512q-114.016-128.992-111.008-291.008t122.016-286.016q124-119.008 286.016-122.016t291.008 111.008q123.008 119.008 132.512 280.992t-99.488 295.008zM480 832q150.016-4 248.992-103.008T832 480q-4-150.016-103.008-248.992T480 128q-150.016 4-248.992 103.008T128 480q4 150.016 103.008 248.992T480 832z m-128-384h256q14.016 0 23.008 8.992T640 480t-8.992 23.008T608 512h-256q-14.016 0-23.008-8.992T320 480t8.992-23.008T352 448z"  ></path></symbol><symbol id="ivy-icon-place" viewBox="0 0 1024 1024"><path d="M512 512q82.016-2.016 136-56T704 320q-2.016-82.016-56-136T512 128q-82.016 2.016-136 56T320 320q2.016 82.016 56 136T512 512z m0 64q-108.992-3.008-180.992-75.008T256 320q3.008-108.992 75.008-180.992T512 64q108.992 3.008 180.992 75.008T768 320q-3.008 108.992-75.008 180.992T512 576z m0-64q14.016 0 23.008 8.992T544 544v256q0 14.016-8.992 23.008T512 832t-23.008-8.992T480 800v-256q0-14.016 8.992-23.008T512 512z m-128 136.992v64.992q-87.008 15.008-139.008 39.488T192 799.968q3.008 31.008 92.512 62.496T512 895.968q138.016-2.016 227.488-33.504T832 799.968q-0.992-22.016-52.992-46.496T640 713.984v-64.992q114.016 16.992 184 57.504T896 800q-4 68-112.512 112.992T512 960q-163.008-2.016-271.488-47.008T128 800q2.016-52.992 72-93.504T384 648.992z"  ></path></symbol><symbol id="ivy-icon-pear" viewBox="0 0 1024 1024"><path d="M542.016 259.008q-4 12-8.992 24.992-6.016 16.992-23.488 20.512t-30.016-10.016-6.496-30.496l0.992-3.008q-48.992 12-81.504 47.008T352 392l-18.016 103.008-20 15.008q-44 32-67.008 74.016t-23.008 88q3.008 92.992 83.488 156.992t204.512 67.008q124-3.008 204.512-67.008t83.488-156.992q0-46.016-23.008-88t-67.008-74.016l-20-15.008-18.016-103.008q-8.992-51.008-44-87.008t-86.016-46.016zM502.016 192q12-23.008 26.016-44 35.008-51.008 79.008-76.992 12-6.016 24-3.008t19.008 14.496 4 24-15.008 19.488q-30.016 19.008-58.016 59.008l-10.016 15.008q64.992 18.016 108.992 66.496T736 380.992l12 78.016q54.016 40 84.512 94.496T864 672q-4 122.016-103.008 203.488T512 960q-150.016-3.008-248.992-84.512T160 672q0.992-64 31.488-118.496t84.512-94.496L288 380.992q15.008-80 73.504-132T502.016 192z"  ></path></symbol><symbol id="ivy-icon-partly-cloudy" viewBox="0 0 1024 1024"><path d="M598.016 832H328q-106.016 0.992-180-66.016T64 592.992q-4-106.016 60-182.016t170.016-90.016q62.016-118.016 179.488-166.496t245.504-8.512q126.016 44.992 191.008 154.016t44.992 240.992q-26.016 131.008-124.512 211.488t-232.512 79.488z m-271.008-64h272q110.016 0.992 190.496-64.512t101.504-173.504q18.016-108-35.488-197.504t-156.512-125.504q-104.992-32.992-200.992 6.496t-147.008 136.512l-16 31.008-35.008 4q-79.008 10.016-127.008 67.488T128 588.992q8 80 63.488 130.016T326.976 768z"  ></path></symbol><symbol id="ivy-icon-paperclip" viewBox="0 0 1024 1024"><path d="M602.016 240q60-56 136.512-56t135.488 56q56 60 56 136.512T874.016 512l-316.992 316.992q-79.008 75.008-180.992 75.008t-180.992-75.008q-75.008-79.008-75.008-180.992t75.008-180.992l407.008-408 46.016 46.016-408 407.008q-56 59.008-56 135.488t56 136.512q60 56 136.512 56t135.488-56l316.992-316.992q36.992-40 36.992-91.008t-36.992-90.016q-40-38.016-91.008-38.016t-90.016 38.016l-294.016 294.016q-12.992 12.992-8.512 31.008t22.496 22.496 31.008-8.512l294.016-294.016 44.992 44.992-294.016 294.016q-18.016 19.008-43.008 26.016t-50.496 0.512-43.488-24.512-24.512-44 0.512-50.496 24.992-42.496z"  ></path></symbol><symbol id="ivy-icon-platform-eleme" viewBox="0 0 1024 1024"><path d="M176 64h672q48 0.992 79.488 32.512T960 176v672q-0.992 48-32.512 79.488T848 960h-672q-48-0.992-79.488-32.512T64 848v-672Q64.992 128 96.512 96.512T176 64z m151.008 174.016q-116 79.008-143.488 208t45.504 248.992q80 115.008 208.992 142.496t248-46.496q14.016-8 24.992-18.016 6.016-4.992 7.008-12t-3.008-12.992l-15.008-23.008q-11.008-16.992-29.504-20.992t-35.488 7.008q-84.992 52-176.512 32.512t-147.488-101.504q-52.992-84.992-33.504-176.512t101.504-149.504q66.016-40.992 140.992-36.992t136 52.992q2.016 0.992 3.008 4 4.992 6.016 3.008 12.992t-8 12l-196.992 128.992q-16.992 11.008-20.992 29.504t6.016 35.488l16 24q4.992 7.008 12 8.512t14.016-2.496l308-200q12-10.016 7.008-24v-0.992l-15.008-27.008q-80-114.016-208.992-141.504t-248 46.496z m460 266.976l-62.016 40q-7.008 4.992-8.512 12t3.488 12.992l40 62.016q4.992 7.008 12 8.512t12.992-3.488l31.008-20q20-12.992 24.512-34.496t-8.512-41.504l-20-31.008q-4.992-6.016-12-7.488t-12.992 2.496z"  ></path></symbol><symbol id="ivy-icon-s-claim" viewBox="0 0 1024 1024"><path d="M704 192h160v736H160V192h160v64h384V192zM312 536.992l-46.016 46.016 180.992 180.992 316.992-316.992-44.992-44.992-272 271.008zM384 192V96h256v96h-256z"  ></path></symbol><symbol id="ivy-icon-s-goods" viewBox="0 0 1024 1024"><path d="M192 352h640l64 544H128z m128 224h64v-128h-64v128z m320 0h64v-128h-64v128z m-256-288h-64q2.016-82.016 56-136T512 96q82.016 2.016 136 56T704 288h-64q-0.992-54.016-37.504-90.496T512 160q-54.016 0.992-90.496 37.504T384 288z"  ></path></symbol><symbol id="ivy-icon-s-grid" viewBox="0 0 1024 1024"><path d="M640 384v256h-256v-256h256z m64 0h192v256h-192v-256z m-64 512h-256v-192h256v192z m64 0v-192h192v192h-192zM640 128v192h-256V128h256z m64 0h192v192h-192V128z m-384 256v256H128v-256h192z m0 512H128v-192h192v192z m0-768v192H128V128h192z"  ></path></symbol><symbol id="ivy-icon-s-help" viewBox="0 0 1024 1024"><path d="M927.008 480h-226.016q-11.008-60.992-53.504-103.488T544 323.008V96.992q156.992 15.008 262.496 120.512T927.008 480z m0 64q-15.008 156.992-120.512 262.496T544 927.008v-226.016q60.992-11.008 103.488-53.504T700.992 544h226.016zM96.992 544h226.016q11.008 60.992 53.504 103.488T480 700.992v226.016q-156.992-15.008-262.496-120.512T96.992 544z m0-64q15.008-156.992 120.512-262.496T480 96.992v226.016q-60.992 11.008-103.488 53.504T323.008 480H96.992z"  ></path></symbol><symbol id="ivy-icon-shopping-bag-1" viewBox="0 0 1024 1024"><path d="M192 320v576h640V320H192zM160 256h704q14.016 0 23.008 8.992T896 288v640q0 14.016-8.992 23.008T864 960H160q-14.016 0-23.008-8.992T128 928V288q0-14.016 8.992-23.008T160 256z m480 192V256q-0.992-54.016-37.504-90.496T512 128q-54.016 0.992-90.496 37.504T384 256v192h-64V256q2.016-82.016 56-136T512 64q82.016 2.016 136 56T704 256v192h-64z"  ></path></symbol><symbol id="ivy-icon-shopping-cart-" viewBox="0 0 1024 1024"><path d="M432 928q-20-0.992-33.504-14.496t-13.504-33.504 13.504-33.504 33.504-13.504 33.504 13.504 13.504 33.504-13.504 33.504T432 928z m320 0q-20-0.992-33.504-14.496t-13.504-33.504 13.504-33.504 33.504-13.504 33.504 13.504 13.504 33.504-13.504 33.504T752 928zM96 128q-14.016 0-23.008-8.992T64 96t8.992-23.008T96 64h160q12 0 20.512 7.008t10.496 19.008l34.016 166.016h607.008q15.008 0 24.512 12t6.496 27.008l-96 448q-2.016 11.008-10.496 18.016t-20.512 7.008h-448q-12 0-20.512-7.008t-10.496-19.008L230.016 128.032H96z m314.016 576h396l82.016-384H333.024z"  ></path></symbol><symbol id="ivy-icon-shopping-cart-1" viewBox="0 0 1024 1024"><path d="M96 128h823.008q15.008 0 24.512 12.512t6.496 27.488l-112 448q-3.008 11.008-11.488 17.504T807.04 640H256.032v64h608q14.016 0 23.008 8.992t8.992 23.008-8.992 23.008-23.008 8.992h-672V192h-96q-14.016 0-23.008-8.992T64.032 160t8.992-23.008T96.032 128z m160 64v384h526.016l96-384H256z m112 736q-20-0.992-33.504-14.496t-13.504-33.504 13.504-33.504 33.504-13.504 33.504 13.504 13.504 33.504-13.504 33.504T368 928z m320 0q-20-0.992-33.504-14.496t-13.504-33.504 13.504-33.504 33.504-13.504 33.504 13.504 13.504 33.504-13.504 33.504T688 928z"  ></path></symbol><symbol id="ivy-icon-smoking" viewBox="0 0 1024 1024"><path d="M256 576v128h640v-128H256z m-32-64h704q14.016 0 23.008 8.992T960 544v192q0 14.016-8.992 23.008T928 768H224q-14.016 0-23.008-8.992T192 736v-192q0-14.016 8.992-23.008T224 512z m480 64h64v128h-64v-128zM256 64h64v320H256V64zM128 192h64v192H128V192zM64 512h64v256H64v-256z"  ></path></symbol><symbol id="ivy-icon-shopping-cart-full" viewBox="0 0 1024 1024"><path d="M432 928q-20-0.992-33.504-14.496t-13.504-33.504 13.504-33.504 33.504-13.504 33.504 13.504 13.504 33.504-13.504 33.504T432 928z m320 0q-20-0.992-33.504-14.496t-13.504-33.504 13.504-33.504 33.504-13.504 33.504 13.504 13.504 33.504-13.504 33.504T752 928zM96 128q-14.016 0-23.008-8.992T64 96t8.992-23.008T96 64h160q12 0 20.512 7.008t10.496 19.008l34.016 166.016h607.008q15.008 0 24.512 12t6.496 27.008l-96 448q-2.016 11.008-10.496 18.016t-20.512 7.008h-448q-12 0-20.512-7.008t-10.496-19.008L230.016 128.032H96z m314.016 576h396l82.016-384H333.024z m289.984-448L608 145.984 516 256h184z m-140.992-151.008q19.008-22.016 48.992-22.016t48.992 22.016L836 320h-456z"  ></path></symbol><symbol id="ivy-icon-soccer" viewBox="0 0 1024 1024"><path d="M418.016 871.008L152 604.992q-12 71.008-1.504 130.016t44.992 92.992 92.992 44.512 129.504-1.504z m72.992-18.016q63.008-20.992 120-55.488t104.512-82.016 82.016-104.512 55.488-120l-319.008-319.008q-64 20.992-121.504 56T307.52 309.984t-82.016 103.488-55.488 118.496z m380-434.976q12-71.008 1.504-129.504t-44.512-92.512T736 151.488t-130.016 2.496zM150.016 874.016Q64 781.024 88 602.528T260.992 265.024q159.008-148.992 339.008-175.008t274.016 60q86.016 94.016 60.992 272.992t-174.016 338.016q-159.008 148.992-338.016 174.016t-272.992-60.992zM602.016 376l23.008-22.016q10.016-8.992 22.496-8.992t22.016 9.504 9.504 22.016-8.992 22.496l-22.016 23.008 44.992 44.992q12.992 12.992 8 30.496t-22.496 22.496-30.496-8l-46.016-44.992L557.024 512l44.992 44.992q12.992 12.992 8.512 31.008t-22.496 22.496-31.008-8.512l-44.992-44.992-44.992 44.992 44.992 46.016q12.992 12.992 8 30.496t-22.496 22.496-30.496-8l-44.992-44.992-23.008 22.016q-12.992 12.992-31.008 8.512t-22.496-22.496 8.512-31.008l22.016-23.008-44.992-44.992q-12.992-12.992-8-30.496t22.496-22.496 30.496 8l46.016 44.992 44.992-44.992-44.992-44.992q-12.992-12.992-8.512-31.008t22.496-22.496 31.008 8.512l44.992 44.992 44.992-44.992-44.992-46.016q-8.992-10.016-8.992-22.496t9.504-22.016 22.016-9.504 22.496 8.992z"  ></path></symbol><symbol id="ivy-icon-s-promotion" viewBox="0 0 1024 1024"><path d="M64 448L896 128l-128 704-446.016-243.008L832 192 243.008 544.992z m256 512v-303.008L512 768z"  ></path></symbol><symbol id="ivy-icon-sort-down" viewBox="0 0 1024 1024"><path d="M576 96v710.016l-243.008-243.008q-12.992-12.992-30.496-8.512t-22.496 22.496T288 608l296.992 296.992q7.008 7.008 16.512 8.992t18.496-2.016 14.496-11.488 5.504-17.504V95.968q0-14.016-8.992-23.008T608 63.968t-23.008 8.992-8.992 23.008z"  ></path></symbol><symbol id="ivy-icon-s-release" viewBox="0 0 1024 1024"><path d="M556.992 608l136-136-44.992-44.992-136 136-136-136-44.992 44.992 136 136-136 136 44.992 44.992 136-136 136 136 44.992-44.992zM704 192h160v736H160V192h160v64h384V192zM384 192V96h256v96h-256z"  ></path></symbol><symbol id="ivy-icon-s-opportunity" viewBox="0 0 1024 1024"><path d="M384 960v-64h192v64h-192z m448-544q0 80-33.504 150.496T704 687.008q-28.992 24-46.496 56.512T640 814.016v18.016H320v-14.016q0-36.992-14.496-70.016t-42.496-55.008q-79.008-63.008-112.992-154.496t-16-190.496q20.992-104 93.504-178.496t176.512-97.504q79.008-16.992 156 0.992t140 68.992 97.504 122.016T832.032 416zM288 448q0.992-100.992 52.512-161.504T480 224V160q-116.992 3.008-185.504 82.496T224 448h64z"  ></path></symbol><symbol id="ivy-icon-s-order" viewBox="0 0 1024 1024"><path d="M704 192h160v736H160V192h160v64h384V192zM288 512h448v-64H288v64z m0 256h448v-64H288v64z m96-576V96h256v96h-256z"  ></path></symbol><symbol id="ivy-icon-s-tools" viewBox="0 0 1024 1024"><path d="M764 255.008q62.016 64 87.008 148.992H960v192h-108.992q-24.992 84.992-87.008 148.992l55.008 95.008-166.016 96-55.008-95.008q-86.016 22.016-172 0l-55.008 95.008-166.016-96 55.008-95.008q-62.016-64-87.008-148.992H63.968v-192h108.992q24.992-84.992 87.008-148.992L204.96 160l166.016-96 55.008 95.008q86.016-22.016 172 0L652.992 64l166.016 96zM704 500q-2.016-82.016-56-136T512 308q-82.016 2.016-136 56T320 500q2.016 82.016 56 136t136 56q82.016-2.016 136-56t56-136z"  ></path></symbol><symbol id="ivy-icon-sold-out" viewBox="0 0 1024 1024"><path d="M704 288h131.008q12.992 0 21.504 8t10.496 20.992L886.016 512h-64l-16-160H704v96q0 14.016-8.992 23.008T672 480t-23.008-8.992T640 448v-96h-256v96q0 14.016-8.992 23.008T352 480t-23.008-8.992T320 448v-96H217.984L166.976 864h344.992v64H130.976q-14.016 0-23.488-10.496t-7.488-24.512l56.992-576q2.016-12.992 10.496-20.992T188.992 288H320v-22.016q2.016-86.016 56-143.008T512 63.968q82.016 2.016 136 59.008T704 265.984V288z m-64 0v-22.016q-0.992-59.008-37.504-98.016T512 127.968q-54.016 0.992-90.496 40T384 265.984V288h256z m200.992 476q14.016-12.992 32-8.512t22.496 22.496-8.512 31.008l-128 128q-10.016 10.016-23.008 10.016t-23.008-10.016l-128-128q-12-12.992-7.488-30.496t22.016-22.496 31.488 8l72.992 74.016V608q0-14.016 8.992-23.008t23.008-8.992 23.008 8.992 8.992 23.008v230.016z"  ></path></symbol><symbol id="ivy-icon-s-platform" viewBox="0 0 1024 1024"><path d="M448 832v-64h128v64h192v64H256v-64h192zM128 704V128h768v576H128z"  ></path></symbol><symbol id="ivy-icon-suitcase" viewBox="0 0 1024 1024"><path d="M128 384h768v-64q-0.992-27.008-19.008-44.992T832 256H192q-27.008 0.992-44.992 19.008T128 320v64z m0 64v320q0.992 27.008 19.008 44.992T192 832h640q27.008-0.992 44.992-19.008T896 768V448H128z m64-256h640q54.016 0.992 90.496 37.504T960 320v448q-0.992 54.016-37.504 90.496T832 896H192q-54.016-0.992-90.496-37.504T64 768V320q0.992-54.016 37.504-90.496T192 192z m192-64v64h256V128h-256z m0-64h256q27.008 0.992 44.992 19.008T704 128v64q-0.992 27.008-19.008 44.992T640 256h-256q-27.008-0.992-44.992-19.008T320 192V128q0.992-27.008 19.008-44.992T384 64z"  ></path></symbol><symbol id="ivy-icon-suitcase-" viewBox="0 0 1024 1024"><path d="M128 384h768v-64q-0.992-27.008-19.008-44.992T832 256H192q-27.008 0.992-44.992 19.008T128 320v64z m0 64v320q0.992 27.008 19.008 44.992T192 832h64V448H128z m192 384h384V448H320v384z m448 0h64q27.008-0.992 44.992-19.008T896 768V448h-128v384zM192 192h640q54.016 0.992 90.496 37.504T960 320v448q-0.992 54.016-37.504 90.496T832 896H192q-54.016-0.992-90.496-37.504T64 768V320q0.992-54.016 37.504-90.496T192 192z m192-64v64h256V128h-256z m0-64h256q27.008 0.992 44.992 19.008T704 128v64q-0.992 27.008-19.008 44.992T640 256h-256q-27.008-0.992-44.992-19.008T320 192V128q0.992-27.008 19.008-44.992T384 64z"  ></path></symbol><symbol id="ivy-icon-sugar" viewBox="0 0 1024 1024"><path d="M802.016 348.992l4 4.992q38.016 39.008 38.016 90.016t-38.016 91.008l-271.008 271.008q-19.008 18.016-42.016 28t-48.992 10.016-48.992-10.016-40.992-28l-4.992-4-19.008 108.992q-4 18.016-15.488 31.488t-28.512 19.008-34.496 0.992-30.496-16.512l-143.008-143.008q-12-12.992-16.512-30.496t0.992-34.496 19.008-28.512 31.488-15.488l108.992-19.008-4-4.992q-18.016-18.016-28-40.992t-10.016-48.992 10.016-48.992 28-42.016l271.008-271.008q19.008-18.016 42.016-28t48.992-10.016 48.992 10.016 40.992 28l4.992 4 19.008-108.992q4-18.016 15.488-31.008t28.992-18.496 34.496-1.504 30.016 16.992l142.016 143.008q12.992 12.992 16.992 30.016t-1.504 34.496-18.496 28.992-31.008 14.496zM252.992 548h447.008v2.016l60.992-60.992q18.016-18.016 19.008-44H352.992L262.976 535.04q-6.016 6.016-10.016 12.992z m0 64q4 7.008 10.016 12.992l136 136q20 19.008 45.504 19.008t44.512-19.008l148.992-148.992H253.024z m490.016-231.008l-118.016-118.016q-20-19.008-45.504-19.008t-44.512 19.008l-118.016 118.016h326.016zM124 756.992l143.008 143.008 24-136.992q2.016-12.992-7.488-22.496t-22.496-7.488zM756.992 124l-24 136.992q-2.016 12.992 7.488 22.496t22.496 7.488l136.992-24z"  ></path></symbol><symbol id="ivy-icon-refresh" viewBox="0 0 1024 1024"><path d="M772 795.008q-87.008 78.016-197.504 96T357.984 864q-106.016-48-167.488-142.016T128 511.968h64q0.992 100.992 55.488 180.992t148.512 116.992q94.016 36 188.512 14.016t163.488-96h-92.992q-14.016 0-23.008-8.992t-8.992-22.496 8.992-22.496 23.008-10.016h148.992q12.992 0.992 22.016 10.016t10.016 22.016v148.992q-0.992 14.016-10.016 23.008t-22.496 8.992-22.496-8.992-8.992-23.008v-50.016zM276 296h92.992q14.016 0 23.008 8.992t8.992 22.496-8.992 22.496-23.008 10.016H220q-12.992-0.992-22.016-10.016t-10.016-22.016V178.976q0.992-14.016 10.016-23.008t22.496-8.992 22.496 8.992 8.992 23.008v50.016q87.008-78.016 197.504-96T666.976 160q106.016 48 167.008 142.016T896 512.032h-64q-0.992-100.992-55.488-180.992t-148.512-116.992q-94.016-36-188.512-14.016t-163.488 96z"  ></path></symbol><symbol id="ivy-icon-sunset" viewBox="0 0 1024 1024"><path d="M83.008 640q-40-140.992 5.504-273.504t163.488-218.496Q372 64 512 64t260 84q118.016 86.016 163.488 218.496T940.992 640h-67.008q40.992-122.016 4.992-240t-139.008-196Q635.968 128 512.48 128T283.968 204Q180.96 282.016 144.96 400t4.992 240H82.944zM32 704h960q32 0 32 32t-32 32H32q-32 0-32-32t32-32z m256 128h448q32 0 32 32t-32 32H288q-32 0-32-32t32-32z"  ></path></symbol><symbol id="ivy-icon-sunrise-" viewBox="0 0 1024 1024"><path d="M32 704h960q14.016 0 23.008 8.992T1024 736t-8.992 23.008T992 768H32q-14.016 0-23.008-8.992T0 736t8.992-23.008T32 704z m256 128h448q32 0 32 32t-32 32H288q-32 0-32-32t32-32z m-128-192q4-150.016 103.008-248.992T512 288q150.016 4 248.992 103.008T864 640h-64q-3.008-122.016-84.512-203.488T512 352q-122.016 3.008-203.488 84.512T224 640H160zM512 64q14.016 0 23.008 8.992T544 96v96q0 14.016-8.992 23.008T512 224t-23.008-8.992T480 192V96q0-14.016 8.992-23.008T512 64z m407.008 168.992q10.016 10.016 10.016 22.496t-10.016 22.496l-68 68q-12.992 12.992-30.496 8t-22.496-22.496 8-30.496l68-68q10.016-10.016 22.496-10.016t22.496 10.016z m-814.016 0q10.016-10.016 22.496-10.016t22.496 10.016l68 68q12.992 12.992 8 30.496t-22.496 22.496-30.496-8L104.992 277.984q-10.016-10.016-10.016-22.496t10.016-22.496z"  ></path></symbol><symbol id="ivy-icon-sunrise" viewBox="0 0 1024 1024"><path d="M32 768h960q14.016 0 23.008 8.992T1024 800t-8.992 23.008T992 832H32q-14.016 0-23.008-8.992T0 800t8.992-23.008T32 768z m128.992-96q16-139.008 113.504-228.512T512 350.976q140 3.008 237.504 92.512T863.008 672h-64.992q-14.016-112-93.504-183.008T512 416q-112.992 2.016-192.512 72.992T225.984 672H160.992zM512 128q14.016 0 23.008 8.992T544 160v96q0 14.016-8.992 23.008T512 288t-23.008-8.992T480 256V160q0-14.016 8.992-23.008T512 128z m407.008 168.992q10.016 10.016 10.016 22.496t-10.016 22.496l-68 68q-12.992 12.992-30.496 8t-22.496-22.496 8-30.496l68-68q10.016-10.016 22.496-10.016t22.496 10.016z m-814.016 0q10.016-10.016 22.496-10.016t22.496 10.016l68 68q12.992 12.992 8 30.496t-22.496 22.496-30.496-8l-68-68q-10.016-10.016-10.016-22.496t10.016-22.496z"  ></path></symbol><symbol id="ivy-icon-top-left" viewBox="0 0 1024 1024"><path d="M256 256h416q14.016 0 23.008-8.992T704 224t-8.992-23.008T672 192H224q-14.016 0-23.008 8.992T192 224v448q0 14.016 8.992 23.008T224 704t23.008-8.992T256 672V256z m-8.992-55.008Q236.992 192 224 192t-22.496 9.504T192 224t8.992 23.008l544 544Q755.008 800 768 800t22.496-9.504T800 768t-8.992-23.008z"  ></path></symbol><symbol id="ivy-icon-add-location" viewBox="0 0 1024 1024"><path d="M288 896h448q32 0 32 32t-32 32H288q-32 0-32-32t32-32z m512-480q-3.008-122.016-84.512-203.488T512 128q-122.016 3.008-203.488 84.512T224 416q0 88.992 71.488 203.488T512 872.992q144.992-139.008 216.512-253.504T800 416z m-288 544Q160 640 160 416q4-150.016 103.008-248.992T512 64q150.016 4 248.992 103.008T864 416q0 224-352 544z m32-576h96q14.016 0 23.008 8.992T672 416t-8.992 23.008T640 448h-96v96q0 14.016-8.992 23.008T512 576t-23.008-8.992T480 544v-96h-96q-14.016 0-23.008-8.992T352 416t8.992-23.008T384 384h96V288q0-14.016 8.992-23.008T512 256t23.008 8.992T544 288v96z"  ></path></symbol><symbol id="ivy-icon-switch-button" viewBox="0 0 1024 1024"><path d="M352 160v70.016q-110.016 59.008-159.488 167.008t-22.496 228.992q31.008 120.992 124 194.496T512.032 896q124.992-2.016 218.016-75.488t124-194.496q27.008-120.992-22.496-228.992t-159.488-167.008V160q139.008 60.992 207.008 188.512t40.992 276.512q-32.992 148.992-144.512 240.512t-263.488 94.496q-152-3.008-264-94.496t-144-239.488q-27.008-150.016 40.992-277.504t207.008-188.512z m160-96q32 0 32 32v320q0 32-32 32t-32-32V96q0-32 32-32z"  ></path></symbol><symbol id="ivy-icon-aim" viewBox="0 0 1024 1024"><path d="M512 896q163.008-4 271.488-112.512T896 512q-4-163.008-112.512-271.488T512 128q-163.008 4-271.488 112.512T128 512q4 163.008 112.512 271.488T512 896z m0 64q-190.016-4.992-316.512-131.488T64 512q4.992-190.016 131.488-316.512T512 64q190.016 4.992 316.512 131.488T960 512q-4.992 190.016-131.488 316.512T512 960z m0-864q14.016 0 23.008 8.992T544 128v192q0 14.016-8.992 23.008T512 352t-23.008-8.992T480 320V128q0-14.016 8.992-23.008T512 96z m0 576q14.016 0 23.008 8.992T544 704v192q0 14.016-8.992 23.008T512 928t-23.008-8.992T480 896v-192q0-14.016 8.992-23.008T512 672zM96 512q0-14.016 8.992-23.008T128 480h192q14.016 0 23.008 8.992T352 512t-8.992 23.008T320 544H128q-14.016 0-23.008-8.992T96 512z m576 0q0-14.016 8.992-23.008T704 480h192q14.016 0 23.008 8.992T928 512t-8.992 23.008T896 544h-192q-14.016 0-23.008-8.992T672 512z"  ></path></symbol><symbol id="ivy-icon-toilet-paper" viewBox="0 0 1024 1024"><path d="M595.008 128H320q-82.016 2.016-136 56T128 320v576h384V352q0-68 22.496-126.016t60.512-98.016zM736 64q95.008 3.008 158.496 84.512T960 352q-2.016 122.016-65.504 203.488T736 640h-160v320H64V320q3.008-108.992 75.008-180.992T320 64h416z m-160 288v224h160q64.992-2.016 111.488-64.512T896 352q-2.016-96.992-48.512-159.488T736 128q-64.992 2.016-111.488 64.512T576 352z m160 96q-27.008-0.992-44.992-28T672.992 352t18.016-68T736 256.992t44.992 27.008 18.016 68-18.016 68T736 448z"  ></path></symbol><symbol id="ivy-icon-back" viewBox="0 0 1024 1024"><path d="M224 480h640q14.016 0 23.008 8.992T896 512t-8.992 23.008T864 544H224q-14.016 0-23.008-8.992T192 512t8.992-23.008T224 480z m12.992 32l266.016 264.992Q512 787.008 512 800t-9.504 22.496T480 832t-23.008-8.992l-288-288Q160 524.992 160 512t8.992-23.008l288-288Q467.008 192 480 192t22.496 9.504T512 224t-8.992 23.008z"  ></path></symbol><symbol id="ivy-icon-timer" viewBox="0 0 1024 1024"><path d="M512 896q136-3.008 226.496-93.504T832 576q-3.008-136-93.504-226.496T512 256q-136 3.008-226.496 93.504T192 576q3.008 136 93.504 226.496T512 896z m0 64q-163.008-4-271.488-112.512T128 576q4-163.008 112.512-271.488T512 192q163.008 4 271.488 112.512T896 576q-4 163.008-112.512 271.488T512 960z m0-640q14.016 0 23.008 8.992T544 352l-0.992 224q0 14.016-8.992 23.008t-22.496 8.992-22.496-8.992-10.016-23.008L480 352q0-14.016 8.992-23.008T512 320z m-64 256q0.992 27.008 19.008 44.992t44.992 18.016 44.992-18.016 18.016-44.992-18.016-44.992T512 512.992t-44.992 18.016T448 576z m96-448v128h-64V128h-96q-14.016 0-23.008-8.992T352 96t8.992-23.008T384 64h256q14.016 0 23.008 8.992T672 96t-8.992 23.008T640 128h-96z"  ></path></symbol><symbol id="ivy-icon-arrow-left" viewBox="0 0 1024 1024"><path d="M608.992 148.992L277.984 489.984q-8.992 8.992-8.992 21.504t8.992 22.496l331.008 340.992q8.992 8 20.992 8t20.992-8.992 8.992-20.992-8.992-20.992l-312-320 312-320q8.992-8.992 8.992-20.992t-8.992-20.992-20.992-8.992-20.992 8z"  ></path></symbol><symbol id="ivy-icon-table-lamp" viewBox="0 0 1024 1024"><path d="M352 896h320q32 0 32 32t-32 32H352q-32 0-32-32t32-32zM307.008 128L208 576h608L716.992 128H306.976z m-24.992-64h460q12 0 20.512 7.008t11.488 18.016l112.992 512q3.008 15.008-6.496 27.008t-24.512 12H168q-15.008 0-24.512-12t-6.496-27.008l112.992-512q3.008-11.008 11.488-18.016T281.984 64zM672 576q32 0 32 32v128q0 32-32 32t-32-32v-128q0-32 32-32z m-192 0h64v384h-64V576z"  ></path></symbol><symbol id="ivy-icon-attract" viewBox="0 0 1024 1024"><path d="M832 320V192h-128v320q-2.016 82.016-56 136T512 704q-82.016-2.016-136-56T320 512V192H192v128h128v64H192v128q3.008 136 93.504 226.496T512 832q136-3.008 226.496-93.504T832 512v-128h-128v-64h128z m-192 192V128h256v384q-4 163.008-112.512 271.488T512 896q-163.008-4-271.488-112.512T128 512V128h256v384q0.992 54.016 37.504 90.496T512 640q54.016-0.992 90.496-37.504T640 512z"  ></path></symbol><symbol id="ivy-icon-tableware" viewBox="0 0 1024 1024"><path d="M714.016 704q64-44.992 102.496-111.488T863.008 448H160.992q8 78.016 46.496 144.512T309.984 704h404zM288 767.008q-91.008-59.008-140.992-151.008T96 416q0-14.016 8.992-23.008T128 384h768q14.016 0 23.008 8.992T928 416q-0.992 108-51.008 200T736 767.008V832q-0.992 27.008-19.008 44.992T672 896H352q-27.008-0.992-44.992-19.008T288 832v-64.992zM492.992 320h-90.016l254.016-254.016q12.992-12.992 31.008-8.512t22.496 22.496-8.512 31.008z m188 0h-128l268.992-156q12-6.016 24.512-2.496t19.008 15.008 3.488 24-15.008 19.488zM352 768v64h320v-64H352z"  ></path></symbol><symbol id="ivy-icon-arrow-right" viewBox="0 0 1024 1024"><path d="M340.992 148.992q-8.992 10.016-8.992 22.016t8.992 20.992l312 320-312 320q-8.992 8.992-8.992 20.992t8.992 20.992 20.992 8.992 20.992-8l331.008-340.992q8.992-8.992 8.992-22.016t-8.992-22.016L382.976 148.96q-8.992-8-20.992-8t-20.992 8z"  ></path></symbol><symbol id="ivy-icon-top-right" viewBox="0 0 1024 1024"><path d="M768 256H353.984q-14.016 0-23.008-8.992T321.984 224t8.992-23.008 23.008-8.992H800q14.016 0 23.008 8.992T832 224v448q0 14.016-8.992 23.008T800 704t-23.008-8.992T768 672V256z m8.992-55.008Q787.008 192 800 192t22.496 9.504T832 224t-8.992 23.008l-544 544Q268.992 800 256 800t-22.496-9.504T224 768t8.992-23.008z"  ></path></symbol><symbol id="ivy-icon-arrow-up" viewBox="0 0 1024 1024"><path d="M488.992 344L148.992 700.992q-8.992 10.016-8.992 22.016t8.992 22.016v0.992q8.992 8.992 21.504 8.992T192 746.016l320-336 320 336q8.992 8.992 21.504 8.992t21.504-8.992v-0.992q8.992-10.016 8.992-22.016t-8.992-22.016L535.008 344q-8.992-8.992-23.008-8.992t-23.008 8.992z"  ></path></symbol><symbol id="ivy-icon-trophy-" viewBox="0 0 1024 1024"><path d="M320 128v256q2.016 82.016 56 136T512 576q82.016-2.016 136-56T704 384V128H320zM288 64h448q14.016 0 23.008 8.992T768 96v288q-3.008 108.992-75.008 180.992T512 640q-108.992-3.008-180.992-75.008T256 384V96q0-14.016 8.992-23.008T288 64z m480.992 192h92.992q-8.992 114.016-43.008 147.008-22.016 22.016-50.016 34.016V256.032zM896 192h-191.008v320q95.008 0 160-64Q923.008 389.984 928 224.992q0-12.992-9.504-23.008T896 191.968zM256 256H161.984q10.016 114.016 43.008 147.008 23.008 22.016 51.008 34.016V256.032zM128.992 192H320v320q-96 0-160-64-58.016-58.016-63.008-223.008-0.992-12.992 8.512-23.008t23.488-10.016zM480 576h64v192h-64v-192zM256 896h512q14.016 0 23.008 8.992T800 928t-8.992 23.008T768 960H256q-14.016 0-23.008-8.992T224 928t8.992-23.008T256 896z m128-128h256q14.016 0 23.008 8.992T672 800t-8.992 23.008T640 832h-256q-14.016 0-23.008-8.992T352 800t8.992-23.008T384 768z"  ></path></symbol><symbol id="ivy-icon-alarm-clock" viewBox="0 0 1024 1024"><path d="M512 832q136-3.008 226.496-93.504T832 512q-3.008-136-93.504-226.496T512 192q-136 3.008-226.496 93.504T192 512q3.008 136 93.504 226.496T512 832z m0 64q-163.008-4-271.488-112.512T128 512q4-163.008 112.512-271.488T512 128q163.008 4 271.488 112.512T896 512q-4 163.008-112.512 271.488T512 896z m-220-71.008l56 32-48 83.008q-10.016 15.008-28 15.008t-27.008-15.488-0.992-31.488z m440 0l-56 32 48 83.008q10.016 15.008 28 15.008t27.008-15.488 0.992-31.488zM512 512h160q14.016 0 23.008 8.992T704 544t-8.992 23.008T672 576h-192q-14.016 0-23.008-8.992T448 544v-224q0-14.016 8.992-23.008T480 288t23.008 8.992T512 320v192zM90.016 312q-31.008-48.992-25.504-104t47.008-96.512 96.512-47.008 104 25.504L265.024 136.992q-28-12.992-57.504-8t-51.008 27.008-27.008 51.488 7.488 57.504L90.976 312h-0.992z m836 0q31.008-48.992 25.504-104t-46.496-96.512-96.512-47.008T704 89.984l47.008 47.008q28-12.992 57.504-8t51.488 27.008 27.008 51.488-8 57.504z"  ></path></symbol><symbol id="ivy-icon-top" viewBox="0 0 1024 1024"><path d="M572 204.992v600.992q0 12-8.512 20.512t-21.504 8.512-21.504-8.512-8.512-20.512V204.992l-220 234.016q-8 8.992-20.992 8.992t-21.504-9.504T240.96 416t8.992-23.008l271.008-288Q528.96 96 541.952 96t20.992 8.992l271.008 288q8.992 10.016 8.992 23.008t-8.512 22.496-20.992 9.504-21.504-8.992z"  ></path></symbol><symbol id="ivy-icon-arrow-down" viewBox="0 0 1024 1024"><path d="M832 340.992l-320 312-320-312q-8.992-8.992-20.992-8.992t-20.992 8.992-8.992 20.992 8 20l340.992 332q8.992 8.992 22.016 8.992t22.016-8.992l340.992-331.008q8-8.992 8-21.504t-8.992-20.992-20.992-8.512-20.992 8.992z"  ></path></symbol><symbol id="ivy-icon-turn-off" viewBox="0 0 1024 1024"><path d="M330.016 256.992q-108 3.008-180 75.008T75.008 512q3.008 108 75.008 180t180 75.008h364q108-3.008 180-75.008T949.024 512q-3.008-108-75.008-180t-180-75.008H330.016z m0-72.992h364q139.008 4 231.488 96.512T1022.016 512q-4 139.008-96.512 231.488t-231.488 96.512H330.016q-139.008-4-231.488-96.512T2.016 512q4-139.008 96.512-231.488t231.488-96.512z m0 436.992q30.016 0 54.496-14.496t39.488-40 15.008-54.496-15.008-54.496-39.488-40-54.496-14.496q-46.016 0.992-76.992 32t-32 76.992q0.992 46.016 32 76.992t76.992 32z m0 73.024q-76.992-2.016-128.512-53.504T148 512q2.016-76.992 53.504-128.512t128.512-53.504q76.992 2.016 128.512 53.504T512.032 512q-2.016 76.992-53.504 128.512t-128.512 53.504z"  ></path></symbol><symbol id="ivy-icon-apple" viewBox="0 0 1024 1024"><path d="M600 204q32-8 64-4.992h3.008q23.008 0.992 40.992 4.512t38.016 12.512q56.992 23.008 112 88.992 72 94.016 62.496 248t-97.504 274.016l-31.008 40q-14.016 18.016-30.016 35.008-23.008 24.992-49.504 37.504t-60.512 12.512q-23.008 0.992-42.496-3.488t-41.504-14.496l-7.008-3.008q-15.008-7.008-24.992-9.504t-22.496-2.496-23.488 2.496-27.008 10.496l-6.016 2.016q-20.992 8.992-38.496 14.016t-38.496 6.016q-54.016 2.016-94.016-30.016t-86.016-103.008q-74.016-110.016-92.992-244.512t38.016-241.504q35.008-62.016 92.992-97.504t127.008-37.504q24-0.992 47.488 4.992t52.512 18.016l28 11.008 8.992 3.008q24.992-30.016 35.008-50.016 20-40 40.992-100.992 4-12.992 15.488-18.496t24.512-1.504 18.496 15.488 1.504 24.512q-18.016 56.992-38.016 98.016z m-52 78.016q-20.992 27.008-52 59.008-8.992 8.992-22.016 9.504t-22.496-8.512-10.016-22.016 8.512-23.008l12-12.992q-20.992-8.992-45.504-17.504t-50.496-8.512q-52.992 0.992-98.016 28.992t-72.992 76q-52 102.016-28.512 222.496t80.512 203.488q26.016 40.992 58.016 73.504t72.992 33.504q36.992-4 64-18.496t72-16.512q44.992 2.016 71.488 16.992t65.504 16.992q40-0.992 65.504-28t61.504-76q80-110.016 85.504-243.488t-49.504-205.504q-55.008-62.016-93.504-74.496t-58.496-10.496q-31.008-3.008-60 6.016t-54.016 19.008z"  ></path></symbol><symbol id="ivy-icon-monitor" viewBox="0 0 1024 1024"><path d="M544 768v128h192q14.016 0 23.008 8.992T768 928t-8.992 23.008T736 960H288q-14.016 0-23.008-8.992T256 928t8.992-23.008T288 896h192v-128H192q-54.016-0.992-90.496-37.504T64 640V256q0.992-54.016 37.504-90.496T192 128h640q54.016 0.992 90.496 37.504T960 256v384q-0.992 54.016-37.504 90.496T832 768h-288zM192 192q-27.008 0.992-44.992 19.008T128 256v384q0.992 27.008 19.008 44.992T192 704h640q27.008-0.992 44.992-19.008T896 640V256q-0.992-27.008-19.008-44.992T832 192H192z"  ></path></symbol><symbol id="ivy-icon-bangzhu" viewBox="0 0 1024 1024"><path d="M512 896q163.008-4 271.488-112.512T896 512q-4-163.008-112.512-271.488T512 128q-163.008 4-271.488 112.512T128 512q4 163.008 112.512 271.488T512 896z m0 64q-190.016-4.992-316.512-131.488T64 512q4.992-190.016 131.488-316.512T512 64q190.016 4.992 316.512 131.488T960 512q-4.992 190.016-131.488 316.512T512 960z m0-256q82.016-2.016 136-56T704 512q-2.016-82.016-56-136T512 320q-82.016 2.016-136 56T320 512q2.016 82.016 56 136T512 704z m0 64q-108.992-3.008-180.992-75.008T256 512q3.008-108.992 75.008-180.992T512 256q108.992 3.008 180.992 75.008T768 512q-3.008 108.992-75.008 180.992T512 768z m111.008-412.992l160.992-160L828.992 240l-160 160.992q-19.008-27.008-46.016-46.016z m45.984 268l160 160.992-44.992 44.992-160.992-160q27.008-19.008 46.016-46.016z m-268 45.984l-160.992 160L195.008 784l160-160.992q19.008 27.008 46.016 46.016z m-45.984-268l-160-160.992L240 195.008l160.992 160q-27.008 19.008-46.016 46.016z"  ></path></symbol><symbol id="ivy-icon-unlock" viewBox="0 0 1024 1024"><path d="M224 448q-14.016 0-23.008 8.992T192 480v384q0 14.016 8.992 23.008T224 896h576q14.016 0 23.008-8.992T832 864V480q0-14.016-8.992-23.008T800 448H224z m0-64h576q40.992 0.992 68 28T896 480v384q-0.992 40.992-28 68T800 960H224q-40.992-0.992-68-28T128 864V480q0.992-40.992 28-68T224 384z m288 160q14.016 0 23.008 8.992T544 576v192q0 14.016-8.992 23.008T512 800t-23.008-8.992T480 768v-192q0-14.016 8.992-23.008T512 544z m178.016-295.008q-27.008-64.992-86.016-96.992t-128-20q-68.992 14.016-112 65.504T320 320v64h352l96 38.016v26.016H256v-128q2.016-94.016 58.496-163.008T464 68.032q92-16 170.496 27.008t115.488 130.016z"  ></path></symbol><symbol id="ivy-icon-bell" viewBox="0 0 1024 1024"><path d="M512 64q27.008 0.992 44.992 19.008T576 128v64h-128V128q0.992-27.008 19.008-44.992T512 64zM256 768h512V448q-3.008-108.992-75.008-180.992T512 192q-108.992 3.008-180.992 75.008T256 448v320z m256-640q136 3.008 226.496 93.504T832 448v384H192V448q3.008-136 93.504-226.496T512 128zM96 768h832q32 0 32 32t-32 32H96q-32 0-32-32t32-32z m352 128h128q-0.992 27.008-19.008 44.992T512 959.008t-44.992-18.016T448 896z"  ></path></symbol><symbol id="ivy-icon-postcard" viewBox="0 0 1024 1024"><path d="M160 224q-14.016 0-23.008 8.992T128 256v512q0 14.016 8.992 23.008T160 800h704q14.016 0 23.008-8.992T896 768V256q0-14.016-8.992-23.008T864 224H160z m0-64h704q40.992 0.992 68 28T960 256v512q-0.992 40.992-28 68T864 864H160q-40.992-0.992-68-28T64 768V256q0.992-40.992 28-68T160 160z m544 160q27.008 0.992 44.992 19.008T767.008 384t-18.016 44.992-44.992 18.016-44.992-18.016T640.992 384t18.016-44.992T704 320zM288 448h256q32 0 32 32t-32 32H288q-32 0-32-32t32-32z m0 128h256q32 0 32 32t-32 32H288q-32 0-32-32t32-32z"  ></path></symbol><symbol id="ivy-icon-bottom-right" viewBox="0 0 1024 1024"><path d="M352 768q-14.016 0-23.008 8.992T320 800t8.992 23.008T352 832h448q14.016 0 23.008-8.992T832 800V352q0-14.016-8.992-23.008T800 320t-23.008 8.992T768 352v416H352z m424.992 55.008Q787.008 832 800 832t22.496-9.504T832 800t-8.992-23.008l-544-544Q268.992 224 256 224t-22.496 9.504T224 256t8.992 23.008z"  ></path></symbol><symbol id="ivy-icon-umbrella" viewBox="0 0 1024 1024"><path d="M320 768q0-14.016 8.992-23.008T352 736t23.008 8.992T384 768q0.992 27.008 19.008 44.992t44.992 18.016 44.992-18.016T512 768v-256H64q4.992-190.016 131.488-316.512T512 64q190.016 4.992 316.512 131.488T960 512H576v256q-0.992 54.016-37.504 90.496T448 896q-54.016-0.992-90.496-37.504T320 768z m571.008-320Q864 307.008 760 219.008T512 128q-144 3.008-248 91.008T132.992 448h758.016z"  ></path></symbol><symbol id="ivy-icon-box" viewBox="0 0 1024 1024"><path d="M316.992 128L128 344V896h768V344L707.008 128H316.992z m-13.984-64h418.016q15.008 0 24.992 11.008l206.016 236q8 8.992 8 20.992V928q0 14.016-8.992 23.008t-23.008 8.992h-832q-14.016 0-23.008-8.992T64.032 928V332q0-12 8-20.992l206.016-236Q288.064 64 303.04 64zM64 320h896v64H64v-64z m384 8V640h128v-312L525.984 128h-28zM448 64h128l64 256v352q0 14.016-8.992 23.008T608 704h-192q-14.016 0-23.008-8.992T384 672V320z"  ></path></symbol><symbol id="ivy-icon-moon" viewBox="0 0 1024 1024"><path d="M240 240q-74.016 76.992-99.488 176.512t4 202.016 104.992 172.992 179.008 94.016 202.016-8.512 169.504-111.008q-116 28-227.488-3.008t-196-115.488-115.488-196-3.008-227.488z m182.016 362.016q112 108 259.008 112.512t266.016-95.488q-43.008 163.008-172.992 256.512t-298.016 82.496q-168-16-280.992-128.992t-128.992-280.992q-11.008-168 82.496-298.016t256.512-172.992q-100 119.008-95.488 266.016t112.512 259.008z"  ></path></symbol><symbol id="ivy-icon-brush" viewBox="0 0 1024 1024"><path d="M896 448H128v192q0.992 27.008 19.008 44.992T192 704h192v192h256v-192h192q27.008-0.992 44.992-19.008T896 640v-192zM124.992 384q0-71.008 16-128Q163.008 175.008 224 96h416.992l-15.008 70.016L736 96h211.008Q910.016 160 896 256q-8.992 64-6.016 128H960v256q-0.992 54.016-37.504 90.496T832 768h-128v160q0 14.016-8.992 23.008T672 960H352q-14.016 0-23.008-8.992T320 928v-160H192q-54.016-0.992-90.496-37.504T64 640v-256h60.992z m64 0h636.992q-3.008-68.992 7.008-136.992 6.016-46.016 18.016-87.008h-96l-220.992 140.992L562.016 160H257.024Q218.016 216.992 203.008 272.992q-14.016 48-14.016 111.008z"  ></path></symbol><symbol id="ivy-icon-present" viewBox="0 0 1024 1024"><path d="M480 896v-256H192v-64h288v-256H192v576h288z m64 0h288V320h-288v256h288v64h-288v256zM128 256h768v672q0 14.016-8.992 23.008T864 960H160q-14.016 0-23.008-8.992T128 928V256zM96 256h832q32 0 32 32t-32 32H96q-32 0-32-32t32-32z m320 0q27.008-0.992 44.992-19.008T479.008 192t-18.016-44.992T416 128.992t-44.992 18.016T352.992 192t18.016 44.992T416 256z m0 64q-54.016-0.992-90.496-37.504T288 192q0.992-54.016 37.504-90.496T416 64q54.016 0.992 90.496 37.504T544 192q-0.992 54.016-37.504 90.496T416 320z m192-64q27.008-0.992 44.992-19.008T671.008 192t-18.016-44.992T608 128.992t-44.992 18.016T544.992 192t18.016 44.992T608 256z m0 64q-54.016-0.992-90.496-37.504T480 192q0.992-54.016 37.504-90.496T608 64q54.016 0.992 90.496 37.504T736 192q-0.992 54.016-37.504 90.496T608 320z"  ></path></symbol><symbol id="ivy-icon-bank-card" viewBox="0 0 1024 1024"><path d="M896 324q0-31.008-2.016-44.992T885.984 256q-7.008-15.008-22.016-22.016-8.992-6.016-23.008-8t-44.992-2.016H227.968q-31.008 0-44.992 2.016t-23.008 8q-15.008 7.008-22.016 22.016-6.016 8.992-8 23.008t-2.016 44.992v376q0 31.008 2.016 44.992t8 23.008q7.008 15.008 22.016 22.016 8.992 6.016 23.008 8t44.992 2.016h568q31.008 0 44.992-2.016t23.008-8q15.008-7.008 22.016-22.016 6.016-8.992 8-23.008T896 700v-376z m64 0v376q0 42.016-4.512 63.008t-12.512 35.008q-16.992 32-48 48.992-15.008 8-36 12.512t-63.008 4.512H227.968q-42.016 0-63.008-4.512t-36-12.512q-31.008-16.992-48-48-8-15.008-12.512-36t-4.512-63.008v-376q0-42.016 4.512-63.008t12.512-36q16.992-31.008 48-48 15.008-8 36-12.512t63.008-4.512h568q42.016 0 63.008 4.512t35.008 12.512q32 16.992 48.992 48 8 15.008 12.512 36T960 324zM64 320h896v64H64v-64z m0 128h896v64H64v-64z m128 192h256v64H192v-64z"  ></path></symbol><symbol id="ivy-icon-position" viewBox="0 0 1024 1024"><path d="M250.016 416.992l319.008 43.008 40 310.016 236-591.008zM120.992 464q-11.008-0.992-18.496-8.512t-8.992-19.008 4-20.512 15.488-12.992l778.016-311.008q8.992-4 18.016-2.016t16 8.992 8.992 16-2.016 18.016l-310.016 776q-4 10.016-13.504 15.488t-20.512 4-18.496-8.992-8.512-18.496l-48.992-384z"  ></path></symbol><symbol id="ivy-icon-bottom-left" viewBox="0 0 1024 1024"><path d="M256 768h416q14.016 0 23.008 8.992T704 800t-8.992 23.008T672 832H224q-14.016 0-23.008-8.992T192 800V352q0-14.016 8.992-23.008T224 320t23.008 8.992T256 352v416z m-8.992 55.008Q236.992 832 224 832t-22.496-9.504T192 800t8.992-23.008l544-544Q755.008 224 768 224t22.496 9.504T800 256t-8.992 23.008z"  ></path></symbol><symbol id="ivy-icon-price-tag" viewBox="0 0 1024 1024"><path d="M224 318.016v578.016h576V318.016l-247.008-202.016q-19.008-15.008-40.992-15.008t-40.992 15.008z m368.992-252l259.008 212q12 10.016 12 24.992V928q0 14.016-8.992 23.008T832 960H192q-14.016 0-23.008-8.992T160 928V303.008q0-15.008 12-24.992l259.008-212q36.992-28.992 80.992-28.992t80.992 28.992zM512 448q27.008-0.992 44.992-19.008T575.008 384t-18.016-44.992T512 320.992t-44.992 18.016T448.992 384t18.016 44.992T512 448z m0 64q-54.016-0.992-90.496-37.504T384 384q0.992-54.016 37.504-90.496T512 256q54.016 0.992 90.496 37.504T640 384q-0.992 54.016-37.504 90.496T512 512z"  ></path></symbol><symbol id="ivy-icon-bicycle" viewBox="0 0 1024 1024"><path d="M256 832q54.016-0.992 90.496-37.504T384 704q-0.992-54.016-37.504-90.496T256 576q-54.016 0.992-90.496 37.504T128 704q0.992 54.016 37.504 90.496T256 832z m0 64q-82.016-2.016-136-56T64 704q2.016-82.016 56-136T256 512q82.016 2.016 136 56T448 704q-2.016 82.016-56 136T256 896z m32-224h320q32 0 32 32t-32 32H288q-32 0-32-32t32-32z m480 160q54.016-0.992 90.496-37.504T896 704q-0.992-54.016-37.504-90.496T768 576q-54.016 0.992-90.496 37.504T640 704q0.992 54.016 37.504 90.496T768 832z m0 64q-82.016-2.016-136-56T576 704q2.016-82.016 56-136T768 512q82.016 2.016 136 56T960 704q-2.016 82.016-56 136T768 896zM480 192q-14.016 0-23.008-8.992T448 160t8.992-23.008T480 128h160q11.008 0 19.488 6.496t11.488 17.504l96 384q3.008 12.992-4 24t-19.488 14.016-23.488-3.008-15.008-19.008L614.976 192h-135.008zM96 384q-14.016 0-23.008-8.992T64 352t8.992-23.008T96 320h128q11.008 0 19.008 6.016t11.008 16l64 192q6.016 18.016-6.016 32t-30.496 10.016-23.488-22.016L201.024 384H96.032z m276.992 216l-42.016-48 320-288 42.016 48z"  ></path></symbol><symbol id="ivy-icon-potato-strips" viewBox="0 0 1024 1024"><path d="M608 224V160q0-14.016-8.992-23.008T576 128t-23.008 8.992T544 160v336h27.008q20 0 36.992-12V224z m100.992 160q-20 0-36.992 12V384h64V224q0-14.016-8.992-23.008T704 192t-23.008 8.992T672 224v160h36.992z m75.008 0q20.992 0 39.488 8.992t32 24.992 18.496 35.488 0.992 40.512l-60 324q-7.008 34.016-32.992 55.488t-62.016 22.496h-416q-36-0.992-62.016-22.496T208.96 817.984L148.96 493.984q-4-20.992 0.992-40.512t18.496-35.488 32-24.992T239.936 384h-16V224q0.992-36.992 24-63.488t59.488-31.008 65.504 14.496 40 55.008q32.992-12.992 67.008-2.016V160q0.992-36.992 24-63.488t59.488-31.008 65.504 14.496 40 55.008q22.016-8.992 45.504-6.496t43.488 16 31.008 34.496T799.936 224v160h-16z m-112.992 128q-19.008 23.008-44.992 35.488t-55.008 12.512h-118.016q-28.992 0-55.008-12.512T352.992 512H352v-2.016q-6.016-7.008-10.016-15.008l-27.008-47.008H239.968q-12.992 0-22.016 10.496t-6.016 23.488l28.992 158.016h542.016l28.992-158.016q3.008-12.992-6.016-23.488t-22.016-10.496h-75.008l-27.008 47.008q-4.992 8-10.016 15.008V512h-0.992zM480 288q0-14.016-8.992-23.008T448 256t-23.008 8.992T416 288v196q16.992 12 36.992 12H480V288z m-128 96V224q0-14.016-8.992-23.008T320 192t-23.008 8.992T288 224v160h27.008q20 0 36.992 12V384zM252.992 704l19.008 102.016q3.008 11.008 11.488 18.496T304 832h416q12 0 20.512-7.488t11.488-18.496L771.008 704H252.992z"  ></path></symbol><symbol id="ivy-icon-baseball" viewBox="0 0 1024 1024"><path d="M195.008 828.992Q64 690.976 64 512t131.008-316.992Q333.024 64 512 64t316.992 131.008Q960 333.024 960 512t-131.008 316.992Q690.976 960 512 960t-316.992-131.008zM240 784Q359.008 896 512 896t272-112Q896 664.992 896 512t-112-272Q664.992 128 512 128T240 240Q128 359.008 128 512t112 272z m256.992-687.008q35.008 7.008 64.992 14.016-43.008 78.016-32 162.016t72.992 148q64 62.016 148 72.992t162.016-32q7.008 30.016 14.016 64.992-95.008 44.992-194.496 28.992t-175.488-88.992q-72.992-76-88.992-175.488t28.992-194.496zM108 492q94.016-40.992 190.016-23.488t168.992 88.512q71.008 72.992 88.512 168.992t-23.488 190.016q-34.016-6.016-66.016-12 40-76.992 27.488-158.496t-72.512-142.496q-60.992-60-142.496-72.512t-158.496 27.488z"  ></path></symbol><symbol id="ivy-icon-printer" viewBox="0 0 1024 1024"><path d="M256 768H104.992q-10.016 0-15.488-0.992t-9.504-3.008q-8-4.992-12-12-2.016-4-3.008-9.504T64 727.008V379.008q0-31.008 3.488-47.008t9.504-27.008q12.992-23.008 36-36 11.008-6.016 27.008-9.504T187.008 256H256V64h512v192h68.992q31.008 0 47.008 3.488t27.008 9.504q23.008 12.992 36 36 6.016 11.008 9.504 27.008T960 379.008v348q0 10.016-0.992 15.488t-3.008 9.504q-4.992 8-12 12-4 2.016-9.504 3.008t-15.488 0.992H768v192H256v-192z m64-192v320h384V576H320z m-64 128v-192h512v192h128V379.008q0-20.992-0.992-30.016t-4.512-14.496-8.992-8.992-14.496-4.512-30.016-0.992H186.976q-20.992 0-30.016 0.992t-14.496 4.512-8.992 8.992-4.512 14.496-0.992 30.016V704h128z m64-448h384V128H320v128z m-64 128h64v64H256v-64z m128 0h64v64h-64v-64z"  ></path></symbol><symbol id="ivy-icon-caret-left" viewBox="0 0 1024 1024"><path d="M672 192L288 512l384 320V192z"  ></path></symbol><symbol id="ivy-icon-sunny" viewBox="0 0 1024 1024"><path d="M512 704q82.016-2.016 136-56T704 512q-2.016-82.016-56-136T512 320q-82.016 2.016-136 56T320 512q2.016 82.016 56 136T512 704z m0 64q-108.992-3.008-180.992-75.008T256 512q3.008-108.992 75.008-180.992T512 256q108.992 3.008 180.992 75.008T768 512q-3.008 108.992-75.008 180.992T512 768z m0-704q14.016 0 23.008 8.992T544 96v64q0 14.016-8.992 23.008T512 192t-23.008-8.992T480 160V96q0-14.016 8.992-23.008T512 64z m0 768q14.016 0 23.008 8.992T544 864v64q0 14.016-8.992 23.008T512 960t-23.008-8.992T480 928v-64q0-14.016 8.992-23.008T512 832zM195.008 195.008q10.016-8.992 23.008-8.992t22.016 8.992L286.048 240q12 14.016 7.488 31.488t-22.016 22.016-31.488-7.488L195.04 240q-8.992-8.992-8.992-22.016t8.992-23.008z m543.008 543.008q10.016-8.992 23.008-8.992t23.008 8.992l44.992 46.016q8.992 8.992 8.992 22.016t-9.504 22.496-22.496 9.504-22.016-8.992l-46.016-44.992q-8.992-10.016-8.992-23.008t8.992-23.008zM64 512q0-14.016 8.992-23.008T96 480h64q14.016 0 23.008 8.992T192 512t-8.992 23.008T160 544H96q-14.016 0-23.008-8.992T64 512z m768 0q0-14.016 8.992-23.008T864 480h64q14.016 0 23.008 8.992T960 512t-8.992 23.008T928 544h-64q-14.016 0-23.008-8.992T832 512zM195.008 828.992q-8.992-10.016-8.992-23.008t8.992-22.016L240 737.952q10.016-8.992 23.008-8.992t22.496 9.504 9.504 22.496-8.992 23.008L240 828.96q-8.992 8.992-22.016 8.992t-23.008-8.992zM738.016 286.016q-8.992-10.016-8.992-23.008t8.992-23.008l46.016-44.992q8.992-8.992 22.016-8.992t22.496 9.504 9.504 22.496-8.992 22.016l-44.992 46.016q-10.016 8.992-23.008 8.992t-23.008-8.992z"  ></path></symbol><symbol id="ivy-icon-camera-solid" viewBox="0 0 1024 1024"><path d="M160 224q-27.008 0.992-44.992 19.008T96 288v512q0.992 27.008 19.008 44.992T160 864h704q27.008-0.992 44.992-19.008T928 800V288q-0.992-27.008-19.008-44.992T864 224h-116l-46.016-92.992q-8-16-23.488-25.504T644.992 96h-266.016q-18.016 0-32.992 9.504t-24 25.504L275.968 224H159.968z m352 435.008q31.008 0 57.504-15.008t42.016-42.496 15.488-57.504-15.488-57.504-42.016-42.496T512 428.992q-48.992 0.992-81.504 33.504T396.992 544q0.992 48.992 33.504 81.504T512 659.008zM512 800q-108.992-3.008-180.992-75.008T256 544q3.008-108.992 75.008-180.992T512 288q108.992 3.008 180.992 75.008T768 544q-3.008 108.992-75.008 180.992T512 800z"  ></path></symbol><symbol id="ivy-icon-moon-night" viewBox="0 0 1024 1024"><path d="M384 512q0.992-119.008 57.504-220t158.496-163.008q-98.016-6.016-184.512 34.016T269.984 281.024 196.48 453.024t17.504 187.008h188.992q-19.008-63.008-19.008-128z m-212.992 192q-63.008-138.016-34.496-280t139.488-244.992q112.992-100 257.504-113.504t274.496 63.488q-100.992 7.008-183.488 60t-130.496 142.016-46.496 187.008 51.488 186.016H171.008zM32 640h960q32 0 32 32t-32 32H32q-32 0-32-32t32-32z m128 128h384q14.016 0 23.008 8.992T576 800t-8.992 23.008T544 832H160q-14.016 0-23.008-8.992T128 800t8.992-23.008T160 768z m160 128h224q14.016 0 23.008 8.992T576 928q0 14.016-8.992 23.008T544 960h-224q-14.016-0.992-23.008-10.016T288 927.968q0-14.016 8.992-23.008t23.008-8.992z"  ></path></symbol><symbol id="ivy-icon-caret-right" viewBox="0 0 1024 1024"><path d="M384 192v640l384-320z"  ></path></symbol><symbol id="ivy-icon-reading" viewBox="0 0 1024 1024"><path d="M512 863.008l384-54.016V169.984L525.984 222.976q-14.016 2.016-28 0L127.968 169.984v639.008zM136.992 106.016l370.016 52.992q4.992 0.992 10.016 0L887.04 106.016q28.992-3.008 50.496 16t22.496 48v639.008q0 24-15.488 41.504t-39.488 21.504L517.056 927.04q-4.992 0.992-10.016 0L119.04 872.032q-24-4-39.488-21.504t-15.488-41.504V170.016q0.992-28.992 22.496-48t50.496-16zM480 192h64v704h-64V192z"  ></path></symbol><symbol id="ivy-icon-caret-top" viewBox="0 0 1024 1024"><path d="M512 320L192 704h640z"  ></path></symbol><symbol id="ivy-icon-rank" viewBox="0 0 1024 1024"><path d="M186.016 544l42.016 40.992q12 14.016 7.488 31.488t-22.016 22.016-30.496-7.488l-96-96q-10.016-10.016-10.016-23.008t10.016-23.008l96-96q12.992-12 30.496-7.488t22.016 22.016-7.488 31.488L186.016 480h291.008V185.984l-40.992 42.016q-12.992 12.992-31.488 8.512t-23.008-22.496 9.504-31.008l96-96q8.992-10.016 22.016-10.016t23.008 10.016l96 96q8.992 10.016 8.512 22.016t-10.016 21.504-21.504 10.016-22.016-8.512l-42.016-40.992v292.992h291.008L791.04 439.04q-10.016-10.016-10.016-23.008t9.504-22.496 22.496-9.504 23.008 8.992l96 96q8.992 10.016 8.992 23.008t-8.992 23.008l-96 96q-10.016 8.992-23.008 8.992t-22.496-9.504-9.504-22.496 10.016-23.008l40.992-40.992h-291.008v292.992l42.016-40.992q12.992-12.992 30.496-8t22.496 22.496-8 30.496l-96 96q-10.016 10.016-23.008 10.016t-22.016-10.016l-96-96q-10.016-8.992-10.016-22.016t9.504-22.496 22.496-9.504 23.008 8.992l40.992 42.016V544H185.984z"  ></path></symbol><symbol id="ivy-icon-caret-bottom" viewBox="0 0 1024 1024"><path d="M192 384l320 384 320-384H192z"  ></path></symbol><symbol id="ivy-icon-question" viewBox="0 0 1024 1024"><path d="M512 64q190.016 4.992 316.512 131.488T960 512q-4.992 190.016-131.488 316.512T512 960q-190.016-4.992-316.512-131.488T64 512q4.992-190.016 131.488-316.512T512 64z m0 704q22.016-0.992 36.512-15.008t14.496-36-14.496-36.512T512 665.984t-36.512 14.496-14.496 36.512 14.496 36T512 768z m0-268.992q-16 0.992-27.008 11.488t-11.008 27.008 11.008 27.488T512 576q66.016-0.992 114.016-42.016t60-106.016q8.992-64.992-23.488-119.008T567.04 232.96q-63.008-20-120.992 3.488t-90.016 81.504l64.992 40.992q16.992-34.016 49.504-48.992t68.992-4.512 56 40.512 14.016 67.488-32.512 60.992-64.992 24.512z"  ></path></symbol><symbol id="ivy-icon-basketball" viewBox="0 0 1024 1024"><path d="M779.008 788q51.008-48.992 80.512-112t35.488-132.992q-56-34.016-119.488-37.504t-122.496 23.488q88 116.992 126.016 259.008zM724 832q-16.992-72.992-48.512-140.992t-76.512-128q-75.008 64-90.496 155.488t34.496 176.512q48-4 94.016-20T724 832z m-253.984 62.016q-44.992-102.016-20.992-205.504t108.992-174.496q-23.008-26.016-48-48.992-72 84.992-175.008 108.992t-204.992-20q8 64.992 36 124t74.496 105.504 104.992 74.496 124.512 36zM128.992 480.992q84.992 48.992 176.512 33.504t154.496-89.504q-60-46.016-127.488-76.992T192 300q-27.008 40.992-43.008 86.496t-20 94.496z m107.008-236q140.992 38.016 259.008 124.992 26.016-59.008 22.496-122.016T480.992 128.96q-70.016 6.016-132.992 35.488t-112 80.512z m318.016-114.976q30.016 68 28 141.504t-36.992 140.512q36 31.008 67.008 66.016 66.016-35.008 139.488-36.992t142.496 28.992q-8-66.016-36-124.512t-74.496-104.992-104.992-74.496-124.512-36z m274.976 698.976Q690.976 960 512 960t-316.992-131.008Q64 690.976 64 512t131.008-316.992Q333.024 64 512 64t316.992 131.008Q960 333.024 960 512t-131.008 316.992z"  ></path></symbol><symbol id="ivy-icon-burger" viewBox="0 0 1024 1024"><path d="M160 512q-14.016 0-23.008 8.992T128 544v64q0 12.992 8.512 22.016t21.504 10.016h706.016q14.016 0 23.008-8.992t8.992-23.008v-64q0-14.016-8.992-23.008t-23.008-8.992h-704z m736-59.008q28.992 11.008 46.496 35.488T960 543.968v64q0 27.008-14.016 50.016t-38.016 35.008l-52.992 140.992q-11.008 28-35.008 44.512T765.952 896H257.952q-30.016-0.992-54.016-17.504t-35.008-44.512l-52.992-140.992q-24-12-38.016-35.008t-14.016-50.016v-64q0-31.008 17.504-55.488t46.496-35.488V448q4.992-163.008 114.496-270.496t272.512-110.496q163.008 4.992 270.496 114.016t110.496 272zM832 448q-3.008-136-93.504-226.496T512 128q-136 3.008-226.496 93.504T192 448h640z m-320 256H188l40.992 107.008q3.008 10.016 11.008 15.488t18.016 5.504h508q10.016 0 18.016-5.504t11.008-15.488L836.032 704H512.032z"  ></path></symbol><symbol id="ivy-icon-bottom" viewBox="0 0 1024 1024"><path d="M544 806.016V168q0-14.016-8.992-23.008T512 136t-23.008 8.992T480 168v638.016l-232.992-248q-10.016-10.016-23.008-10.016t-22.496 10.496-9.504 23.488 8.992 24l288 306.016q10.016 10.016 23.008 10.016t23.008-10.016l288-306.016q8.992-11.008 8.992-24t-9.504-23.488-22.496-10.496-23.008 10.016z"  ></path></symbol><symbol id="ivy-icon-c-scale-to-original" viewBox="0 0 1024 1024"><path d="M812.992 180.992q26.016 0 43.008 16.992t16.992 43.008v482.016q0 24.992-17.504 42.496t-42.496 17.504H210.976q-24.992 0-42.496-17.504t-17.504-42.496V240.992q0-26.016 16.992-43.008t43.008-16.992h602.016z m0-60.992H210.976q-24 0.992-46.016 10.016t-39.008 26.016-26.496 39.008-9.504 46.016v482.016q0 24 9.504 46.016t26.496 39.008 39.008 26.016 46.016 8.992h602.016q24 0 46.016-8.992t39.008-26.016 26.496-39.008 9.504-46.016V241.056q0-24-9.504-46.016t-26.496-39.008-39.008-26.016-46.016-10.016z m-120 180.992q-12.992 0-21.504 8.992t-8.512 20.992v300.992q0 12.992 8.512 21.504t21.504 8.512 21.504-8.512 8.512-21.504v-300.992q0-12.992-8.512-21.504t-21.504-8.512z m-361.984 0q-12 0-20.992 8.992t-8.992 20.992v300.992q0 12.992 8.512 21.504t21.504 8.512 21.504-8.512 8.512-21.504v-300.992q0-12-8.512-20.992t-21.504-8.992zM512 360.992q-12.992 0.992-21.504 9.504t-8.512 21.504v30.016q0 12 8.512 20.512t21.504 8.512 21.504-8.512 8.512-20.512v-30.016q0-12.992-8.992-21.504t-20.992-9.504zM512 512q-12.992 0-21.504 8.512t-8.512 21.504v30.016q0 12.992 8.512 21.504t21.504 8.512 21.504-8.512 8.512-21.504v-30.016q0-12-8.992-20.992t-20.992-8.992z"  ></path></symbol><symbol id="ivy-icon-camera" viewBox="0 0 1024 1024"><path d="M896 256H128v576h768V256z m-199.008-64l-32-64H360l-32 64h368.992zM96 192h160l46.016-92.992q8.992-16 24-25.504T360.032 64h304.992q18.016 0 32.992 9.504t24 25.504L768.032 192h160q14.016 0 23.008 8.992t8.992 23.008v640q0 14.016-8.992 23.008t-23.008 8.992h-832q-14.016 0-23.008-8.992T64.032 864V224q0-14.016 8.992-23.008T96.032 192z m416 512q68-2.016 112.992-47.008T672 544q-2.016-68-47.008-112.992T512 384q-68 2.016-112.992 47.008T352 544q2.016 68 47.008 112.992T512 704z m0 64q-95.008-2.016-158.496-65.504T288 544q2.016-95.008 65.504-158.496T512 320q95.008 2.016 158.496 65.504T736 544q-2.016 95.008-65.504 158.496T512 768z"  ></path></symbol><symbol id="ivy-icon-chat-dot-round" viewBox="0 0 1024 1024"><path d="M175.008 856l135.008-44.992 24 11.008q82.016 42.016 178.016 42.016 163.008-4.992 271.488-106.496t112.512-245.504q-4-144-112.512-245.504t-271.488-106.496q-163.008 4.992-271.488 106.496t-112.512 245.504q0 52 18.016 103.008t52.992 96l22.016 28.992z m-46.016 82.016q-19.008 6.016-32.512-8.512T89.984 896l58.016-146.016q-40-52.992-62.016-113.504t-22.016-124.512q4-164.992 128-287.488t320-128.512q196 6.016 320 128.512t128 287.488q-4 164.992-128 287.488t-320 128.512q-108.992 0-207.008-48zM512 563.008q-14.016 0-25.504-6.496t-18.496-19.008-7.008-25.504 7.008-25.504 18.496-19.008 25.504-6.496q22.016 0 36.512 14.496T563.008 512t-14.496 36.512-36.512 14.496z m192 0q-14.016 0-25.504-6.496t-18.496-19.008-7.008-25.504 7.008-25.504 18.496-19.008 25.504-6.496q22.016 0 36.512 14.496T755.008 512t-14.496 36.512-36.512 14.496z m-384 0q-14.016 0-25.504-6.496t-18.496-19.008T268.992 512t7.008-25.504 18.496-19.008 25.504-6.496q22.016 0 36.512 14.496T371.008 512t-14.496 36.512-36.512 14.496z"  ></path></symbol><symbol id="ivy-icon-check" viewBox="0 0 1024 1024"><path d="M407.008 707.008L196 496q-12.992-12.992-31.008-8t-22.496 22.496 8.512 31.488l256 256 512-512q8.992-10.016 8.512-23.008t-10.016-22.496-22.016-9.504-22.496 8.992z"  ></path></symbol><symbol id="ivy-icon-chat-line-square" viewBox="0 0 1024 1024"><path d="M160 827.008L274.016 736h526.016q27.008-0.992 44.992-19.008T864.032 672V256q-0.992-27.008-19.008-44.992T800.032 192h-576q-27.008 0.992-44.992 19.008T160.032 256v571.008zM296 800l-148 118.016q-16 12-33.504 3.488T96 892.992V256q0.992-54.016 37.504-90.496T224 128h576q54.016 0.992 90.496 37.504T928 256v416q-0.992 54.016-37.504 90.496T800 800H296zM352 512h320q32 0 32 32t-32 32H352q-32 0-32-32t32-32z m0-192h320q32 0 32 32t-32 32H352q-32 0-32-32t32-32z"  ></path></symbol><symbol id="ivy-icon-chat-round" viewBox="0 0 1024 1024"><path d="M175.008 856l130.016-44 23.008 12Q410.048 864 512.032 864q171.008-4 276-104T896.032 512q-3.008-148.992-107.488-248.512T512.032 160q-172 4-276.512 103.488T128.032 512q0 56 18.016 108t51.008 96l22.016 28.992z m-46.016 82.016q-19.008 6.016-32.512-8.512T89.984 896l56-140.992Q105.984 702.016 84.992 640T64 512q2.016-164.992 120.512-287.488T512 96q208.992 6.016 327.488 128.512T960 512q-2.016 164.992-120.992 287.488T512 928q-120-0.992-212-47.008z"  ></path></symbol><symbol id="ivy-icon-chat-dot-square" viewBox="0 0 1024 1024"><path d="M274.016 736h526.016q27.008-0.992 44.992-19.008T864.032 672V256q-0.992-27.008-19.008-44.992T800.032 192h-576q-27.008 0.992-44.992 19.008T160.032 256v571.008z m21.984 64l-148 118.016q-16 12-33.504 3.488T96 892.992V256q0.992-54.016 37.504-90.496T224 128h576q54.016 0.992 90.496 37.504T928 256v416q-0.992 54.016-37.504 90.496T800 800H296zM512 499.008q-22.016 0-36.512-14.496T460.992 448t14.496-36.512T512 396.992t36.512 14.496 14.496 36.512-14.496 36.512-36.512 14.496z m192 0q-22.016 0-36.512-14.496T652.992 448t14.496-36.512T704 396.992t36.512 14.496 14.496 36.512-14.496 36.512-36.512 14.496z m-384 0q-22.016 0-36.512-14.496T268.992 448t14.496-36.512T320 396.992t36.512 14.496 14.496 36.512-14.496 36.512-36.512 14.496z"  ></path></symbol><symbol id="ivy-icon-chat-line-round" viewBox="0 0 1024 1024"><path d="M175.008 856l135.008-44.992 24 11.008q82.016 42.016 178.016 42.016 163.008-4.992 271.488-106.496t112.512-245.504q-4-144-112.512-245.504t-271.488-106.496q-163.008 4.992-271.488 106.496t-112.512 245.504q0 52 18.016 103.008t52.992 96l22.016 28.992z m-46.016 82.016q-19.008 6.016-32.512-8.512T89.984 896l58.016-146.016q-40-52.992-62.016-113.504t-22.016-124.512q4-164.992 128-287.488t320-128.512q196 6.016 320 128.512t128 287.488q-4 164.992-128 287.488t-320 128.512q-108.992 0-207.008-48zM352 576h320q32 0 32 32t-32 32H352q-32 0-32-32t32-32z m32-192h256q32 0 32 32t-32 32h-256q-32 0-32-32t32-32z"  ></path></symbol><symbol id="ivy-icon-chat-square" viewBox="0 0 1024 1024"><path d="M274.016 736h526.016q27.008-0.992 44.992-19.008T864.032 672V256q-0.992-27.008-19.008-44.992T800.032 192h-576q-27.008 0.992-44.992 19.008T160.032 256v571.008z m21.984 64l-148 118.016q-16 12-33.504 3.488T96 892.992V256q0.992-54.016 37.504-90.496T224 128h576q54.016 0.992 90.496 37.504T928 256v416q-0.992 54.016-37.504 90.496T800 800H296z"  ></path></symbol><symbol id="ivy-icon-circle-check" viewBox="0 0 1024 1024"><path d="M512 896q163.008-4 271.488-112.512T896 512q-4-163.008-112.512-271.488T512 128q-163.008 4-271.488 112.512T128 512q4 163.008 112.512 271.488T512 896z m0 64q-190.016-4.992-316.512-131.488T64 512q4.992-190.016 131.488-316.512T512 64q190.016 4.992 316.512 131.488T960 512q-4.992 190.016-131.488 316.512T512 960z m232.992-599.008Q755.008 352 768 352t22.496 9.504T800 384t-8.992 23.008l-288 288Q492.992 704 480 704t-23.008-8.992l-160-160Q288 524.992 288 512t9.504-22.496T320 480t23.008 8.992L480 627.008z"  ></path></symbol><symbol id="ivy-icon-circle-close" viewBox="0 0 1024 1024"><path d="M467.008 512l-91.008-90.016q-8.992-10.016-8.992-23.008t9.504-22.496 22.496-9.504 23.008 8.992l90.016 91.008 90.016-91.008q14.016-12.992 31.488-8t22.496 22.496-8 31.488l-91.008 90.016 91.008 90.016q12.992 14.016 8 31.488t-22.496 22.496-31.488-8l-90.016-91.008-90.016 91.008q-10.016 8.992-23.008 8.992t-22.496-9.504-9.504-22.496 8.992-23.008zM512 896q163.008-4 271.488-112.512T896 512q-4-163.008-112.512-271.488T512 128q-163.008 4-271.488 112.512T128 512q4 163.008 112.512 271.488T512 896z m0 64q-190.016-4.992-316.512-131.488T64 512q4.992-190.016 131.488-316.512T512 64q190.016 4.992 316.512 131.488T960 512q-4.992 190.016-131.488 316.512T512 960z"  ></path></symbol><symbol id="ivy-icon-chicken" viewBox="0 0 1024 1024"><path d="M350.016 716.992l128.992-128.992q-15.008-7.008-26.496-19.008t-19.488-26.016l-128 128.992 2.016 8.992 2.016 32 32 2.016z m56.992 33.024q30.016 30.016 36.512 70.016t-12.512 77.504-54.496 56.512-76.992 12.992-71.008-33.504-37.504-68.512l-2.016-32-32-2.016q-40.992-8.992-68.512-38.016t-33.504-70.496 12.992-76.992 56.512-54.496 76.992-12.512 69.504 35.488l146.016-144.992Q416 390.976 456 300.48t110.016-161.504q82.016-78.016 166.496-72t150.496 72 72 150.496-72.992 166.496q-70.016 68.992-160.512 109.504t-169.504 39.488z m91.008-226.016q44 35.008 148.512 1.504t190.496-114.496q56.992-60 52.992-119.008t-52.512-107.488-108-52.992-118.496 52.512Q530.016 271.04 496 375.52t2.016 148.512z m-253.024 184.992q0.992-20-8.992-36.992t-28.512-25.504-38.016-4.992-33.504 18.016-17.504 34.016 4.512 38.016 24.992 28.512 36.992 8.992l56-4z m8 128q-0.992 20 8.992 36.512t28.512 24.992 38.016 4.992 33.504-18.016 17.504-33.504-4.512-37.504-24.992-28.512-36.992-8.992l-56.992 3.008z"  ></path></symbol><symbol id="ivy-icon-circle-plus-outline" viewBox="0 0 1024 1024"><path d="M352 480h320q14.016 0 23.008 8.992T704 512t-8.992 23.008T672 544H352q-14.016 0-23.008-8.992T320 512t8.992-23.008T352 480z m128 192V352q0-14.016 8.992-23.008T512 320t23.008 8.992T544 352v320q0 14.016-8.992 23.008T512 704t-23.008-8.992T480 672z m32 224q163.008-4 271.488-112.512T896 512q-4-163.008-112.512-271.488T512 128q-163.008 4-271.488 112.512T128 512q4 163.008 112.512 271.488T512 896z m0 64q-190.016-4.992-316.512-131.488T64 512q4.992-190.016 131.488-316.512T512 64q190.016 4.992 316.512 131.488T960 512q-4.992 190.016-131.488 316.512T512 960z"  ></path></symbol><symbol id="ivy-icon-circle-plus" viewBox="0 0 1024 1024"><path d="M512 64q190.016 4.992 316.512 131.488T960 512q-4.992 190.016-131.488 316.512T512 960q-190.016-4.992-316.512-131.488T64 512q4.992-190.016 131.488-316.512T512 64z m-37.984 410.016h-148q-16 0-27.008 11.008T288 512.032t11.008 27.008 27.008 11.008h148v148q0 16 11.008 27.008t27.008 11.008 27.008-11.008 11.008-27.008v-148h148q16 0 27.008-11.008t11.008-27.008-11.008-27.008-27.008-11.008h-148v-148q0-16-11.008-27.008T512.032 288t-27.008 11.008-11.008 27.008v148z"  ></path></symbol><symbol id="ivy-icon-close-notification" viewBox="0 0 1024 1024"><path d="M240.992 832l64-64H768V448q-0.992-64-28-118.016l46.016-47.008q22.016 36.992 34.016 78.496t12 86.496v320h96q14.016 0 23.008 8.992t8.992 23.008-8.992 23.008-23.008 8.992H241.024z m-89.984 0H96q-14.016 0-23.008-8.992T64 800t8.992-23.008T96 768h96V448q2.016-116.992 72-202.496T448 134.016V128q0.992-27.008 19.008-44.992T512 64.992t44.992 18.016T576 128v6.016q50.016 11.008 93.504 35.488t78.496 61.504l-46.016 46.016q-54.016-60-130.016-78.016t-151.488 11.008-119.488 92.992T256 448v278.016zM448 896h128q-0.992 27.008-19.008 44.992T512 959.008t-44.992-18.016T448 896z m-296.992-36.992q-10.016 8.992-22.496 8.992t-22.016-9.504-10.016-22.016 8.512-22.496l704-708.992Q819.008 96 831.488 96t22.016 9.504 10.016 22.496-8.512 23.008z"  ></path></symbol><symbol id="ivy-icon-close" viewBox="0 0 1024 1024"><path d="M764 215.008L512 467.008 260 215.008q-10.016-8.992-22.496-8.992t-22.016 9.504-9.504 22.016 8.992 22.496l252 252-252 252q-12.992 12.992-8.512 31.008t22.016 22.496 31.488-8.512l252-252 252 252q10.016 8.992 22.496 8.992t22.016-9.504 9.504-22.016-8.992-22.496L556.992 512l252-252q12.992-12.992 8.512-31.008t-22.496-22.496-31.008 8.512z"  ></path></symbol><symbol id="ivy-icon-cloudy-and-sunny" viewBox="0 0 1024 1024"><path d="M598.016 896H328q-106.016 0.992-180-66.016T64 656.992q-4-106.016 60-182.016t170.016-90.016q62.016-118.016 179.488-166.496t245.504-8.512q126.016 44.992 191.008 154.016t44.992 240.992q-26.016 131.008-124.512 211.488t-232.512 79.488z m-271.008-64h272q110.016 0.992 190.496-64.512t101.504-173.504q18.016-108-35.488-197.504t-156.512-125.504q-104.992-32.992-200.992 6.496t-147.008 136.512l-16 31.008-35.008 4q-79.008 10.016-127.008 67.488T128 652.992q8 80 63.488 130.016T326.976 832zM140 502.016q-56-56.992-71.008-131.488t15.488-148 94.016-115.488 143.008-41.504T464 108.544t94.016 116.512q-27.008 3.008-62.016 19.008-24-55.008-72.512-86.016t-108-29.504-106.016 34.496-68 88.992-8.512 111.488 56 96.512z"  ></path></symbol><symbol id="ivy-icon-cherry" viewBox="0 0 1024 1024"><path d="M260.992 450.016q20.992-104.992 63.008-178.016Q360 211.008 436.992 128H320q-14.016 0-23.008-8.992T288 96t8.992-23.008T320 64h384q14.016 0 23.008 8.992T736 96t-8.992 23.008T704 128h-148.992q22.016 59.008 79.008 142.016 36 51.008 63.008 79.488T741.024 384q88 4 148.992 61.504t68.992 145.504q4.992 88.992-46.496 155.008t-138.496 83.008q-87.008 12.992-158.016-32t-96-128.992q-22.016-86.016 16-160.992t120-108q-34.016-35.008-74.016-92.992-59.008-84-84.992-148.992-83.008 87.008-117.504 147.008t-53.504 147.008q88.992 16.992 140.512 84.992t44.512 158.016q-11.008 88.992-74.496 145.504t-153.504 56.512Q192 892.096 131.52 832.608t-67.488-149.504q-2.016-90.016 52.992-155.488t144-77.504zM288 832q68-2.016 112.992-47.008T448 672q-2.016-68-47.008-112.992T288 512q-68 2.016-112.992 47.008T128 672q2.016 68 47.008 112.992T288 832z m448-64q68-2.016 112.992-47.008T896 608q-2.016-68-47.008-112.992T736 448q-68 2.016-112.992 47.008T576 608q2.016 68 47.008 112.992T736 768z"  ></path></symbol><symbol id="ivy-icon-coffee-cup" viewBox="0 0 1024 1024"><path d="M768 192q52.992 0 97.504 26.016t70.496 72.512 24.512 97.504-28.992 96.512-72.992 69.504-98.496 22.016q-24 86.016-91.488 138.496t-156.512 53.504h-192q-108.992-3.008-180.992-75.008t-75.008-180.992v-352q0-14.016 8.992-23.008t23.008-8.992h640q14.016 0 23.008 8.992t8.992 23.008v32z m0 64v256q54.016-0.992 90.496-37.504T896 384q-0.992-54.016-37.504-90.496T768 256zM96 832h640q14.016 0 23.008 8.992T768 864t-8.992 23.008T736 896H96q-14.016 0-23.008-8.992T64 864t8.992-23.008T96 832zM128 192v320q2.016 82.016 56 136T320 704h192q82.016-2.016 136-56T704 512V192H128z"  ></path></symbol><symbol id="ivy-icon-cloudy" viewBox="0 0 1024 1024"><path d="M736.992 358.016L704 350.016l-12-32q-23.008-60.992-75.008-95.008t-116.992-30.016-112.512 44.512-62.496 103.488l-8.992 39.008-39.008 8.992q-72.992 18.016-113.504 76t-34.496 132.992Q139.008 672 192 718.976t128 48.992h368q42.016 0 79.488-16t67.008-45.504 45.504-67.008 16-79.488q-0.992-72.992-44.512-128t-114.496-74.016zM752 296q92.992 24 149.504 96T960 560q-3.008 115.008-79.488 192T688 832H320q-100-2.016-170.496-64.992t-84.512-162.016q-8.992-100 45.504-176.992t151.488-102.016q20.992-84 84.512-137.504T496 128.992q87.008-4.992 156 40.512T752 296z"  ></path></symbol><symbol id="ivy-icon-collection-tag" viewBox="0 0 1024 1024"><path d="M256 128v699.008l196-156.992q27.008-20.992 60-20.992t60 20.992L768 827.008V128H256zM224 64h576q14.016 0 23.008 8.992T832 96v796.992q-0.992 20-18.496 28.512t-33.504-3.488l-248-198.016q-8.992-7.008-20-7.008t-20 7.008l-248 198.016q-16 12-33.504 3.488T192 892.992V96q0-14.016 8.992-23.008T224 64z"  ></path></symbol><symbol id="ivy-icon-cold-drink" viewBox="0 0 1024 1024"><path d="M768 64q59.008 0.992 106.016 32t70.016 85.504 12.512 110.016-51.488 98.016-96.512 54.496-110.496-8.992l-218.016 290.016v171.008h96q14.016 0 23.008 8.992t8.992 23.008-8.992 23.008-23.008 8.992h-256q-14.016 0-23.008-8.992t-8.992-23.008 8.992-23.008 23.008-8.992h96v-171.008L77.024 274.048q-12.992-18.016-12.992-39.008v-11.008q0-12.992 8.992-22.016T96.032 192h72L102.016 108.992q-8-11.008-6.496-24T108.032 64t23.488-6.496 21.504 11.488l96 123.008h338.016q20.992-58.016 70.016-92.512T768.064 64z m-111.008 128H800q14.016 0.992 23.008 10.016t8.992 22.016v11.008q0 20.992-12.992 38.016l-80 108q48.992 10.016 91.008-12.992t58.016-71.008-3.008-92-64.992-64.512-91.488-6.016-71.488 58.496v-0.992zM299.008 256l128.992 166.016q8 11.008 6.496 23.488t-12 20.512-23.008 7.008-21.504-11.008L217.984 256H143.968l304 404.992L751.968 256H298.976z"  ></path></symbol><symbol id="ivy-icon-collection" viewBox="0 0 1024 1024"><path d="M192 736h640V128H256q-27.008 0.992-44.992 19.008T192 192v544zM256 64h608q14.016 0 23.008 8.992T896 96v672q0 14.016-8.992 23.008T864 800H160l-32 58.016V192q0.992-54.016 37.504-90.496T256 64z m-16 736q-20 0.992-33.504 14.496T192.992 848t13.504 33.504T240 896H832v-96H240z m0-64H896v160q-0.992 27.008-19.008 44.992T832 960H240q-48-0.992-79.488-32.512T128 848q0.992-48 32.512-79.488T240 736zM384 128v251.008l96-76.992 96 76.992V128h-192z m-64-64h320v380.992q-0.992 20-18.496 28.512t-33.504-3.488L480 384l-108 86.016q-16 12-33.504 3.488T320 444.992V64z"  ></path></symbol><symbol id="ivy-icon-coordinate" viewBox="0 0 1024 1024"><path d="M480 512h64v320h-64V512zM192 896h640q-0.992-27.008-19.008-44.992T768 832H256q-27.008 0.992-44.992 19.008T192 896z m64-128h512q54.016 0.992 90.496 37.504T896 896v64H128v-64q0.992-54.016 37.504-90.496T256 768z m256-256q82.016-2.016 136-56T704 320q-2.016-82.016-56-136T512 128q-82.016 2.016-136 56T320 320q2.016 82.016 56 136T512 512z m0 64q-108.992-3.008-180.992-75.008T256 320q3.008-108.992 75.008-180.992T512 64q108.992 3.008 180.992 75.008T768 320q-3.008 108.992-75.008 180.992T512 576z"  ></path></symbol><symbol id="ivy-icon-connection" viewBox="0 0 1024 1024"><path d="M640 384v64h-192q-54.016 0.992-90.496 37.504T320 576v128q0.992 54.016 37.504 90.496T448 832h320q54.016-0.992 90.496-37.504T896 704v-128q0-35.008-16.992-64T832 464.992v-70.016q56.992 20.992 92 68.992t36 112v128q-2.016 82.016-56 136T768 895.968H448q-82.016-2.016-136-56T256 703.968v-128q2.016-82.016 56-136t136-56h192z m-256 256v-64h192q54.016-0.992 90.496-37.504T704 448v-128q-0.992-54.016-37.504-90.496T576 192H256q-54.016 0.992-90.496 37.504T128 320v128q0 35.008 16.992 64T192 559.008v70.016q-58.016-20.992-92.512-70.016T64 448v-128q2.016-82.016 56-136T256 128h320q82.016 2.016 136 56T768 320v128q-2.016 82.016-56 136T576 640h-192z"  ></path></symbol><symbol id="ivy-icon-crop" viewBox="0 0 1024 1024"><path d="M256 768h672q14.016 0 23.008 8.992T960 800t-8.992 23.008T928 832H224q-14.016 0-23.008-8.992T192 800V96q0-14.016 8.992-23.008T224 64t23.008 8.992T256 96v672zM832 224v704q0 14.016-8.992 23.008T800 960t-23.008-8.992T768 928V256H96q-14.016 0-23.008-8.992T64 224t8.992-23.008T96 192h704q14.016 0 23.008 8.992T832 224z"  ></path></symbol><symbol id="ivy-icon-cpu" viewBox="0 0 1024 1024"><path d="M320 256q-27.008 0.992-44.992 19.008T256 320v384q0.992 27.008 19.008 44.992T320 768h384q27.008-0.992 44.992-19.008T768 704V320q-0.992-27.008-19.008-44.992T704 256H320z m0-64h384q54.016 0.992 90.496 37.504T832 320v384q-0.992 54.016-37.504 90.496T704 832H320q-54.016-0.992-90.496-37.504T192 704V320q0.992-54.016 37.504-90.496T320 192z m192-128q14.016 0 23.008 8.992T544 96v128h-64V96q0-14.016 8.992-23.008T512 64z m160 0q14.016 0 23.008 8.992T704 96v128h-64V96q0-14.016 8.992-23.008T672 64zM352 64q14.016 0 23.008 8.992T384 96v128h-64V96q0-14.016 8.992-23.008T352 64z m160 896q-14.016 0-23.008-8.992T480 928v-128h64v128q0 14.016-8.992 23.008T512 960z m160 0q-14.016 0-23.008-8.992T640 928v-128h64v128q0 14.016-8.992 23.008T672 960z m-320 0q-14.016 0-23.008-8.992T320 928v-128h64v128q0 14.016-8.992 23.008T352 960zM64 512q0-14.016 8.992-23.008T96 480h128v64H96q-14.016 0-23.008-8.992T64 512z m0-160q0-14.016 8.992-23.008T96 320h128v64H96q-14.016 0-23.008-8.992T64 352z m0 320q0-14.016 8.992-23.008T96 640h128v64H96q-14.016 0-23.008-8.992T64 672z m896-160q0 14.016-8.992 23.008T928 544h-128v-64h128q14.016 0 23.008 8.992T960 512z m0-160q0 14.016-8.992 23.008T928 384h-128v-64h128q14.016 0 23.008 8.992T960 352z m0 320q0 14.016-8.992 23.008T928 704h-128v-64h128q14.016 0 23.008 8.992T960 672z"  ></path></symbol><symbol id="ivy-icon-copy-document" viewBox="0 0 1024 1024"><path d="M768 832q-0.992 54.016-37.504 90.496T640 960H192q-54.016-0.992-90.496-37.504T64 832V384q0.992-54.016 37.504-90.496T192 256v64q-27.008 0.992-44.992 19.008T128 384v448q0.992 27.008 19.008 44.992T192 896h448q27.008-0.992 44.992-19.008T704 832h64zM384 128q-27.008 0.992-44.992 19.008T320 192v448q0.992 27.008 19.008 44.992T384 704h448q27.008-0.992 44.992-19.008T896 640V192q-0.992-27.008-19.008-44.992T832 128H384z m0-64h448q54.016 0.992 90.496 37.504T960 192v448q-0.992 54.016-37.504 90.496T832 768H384q-54.016-0.992-90.496-37.504T256 640V192q0.992-54.016 37.504-90.496T384 64z"  ></path></symbol><symbol id="ivy-icon-d-caret" viewBox="0 0 1024 1024"><path d="M512 128l288 320H224zM224 576h576l-288 320z"  ></path></symbol><symbol id="ivy-icon-d-arrow-right" viewBox="0 0 1024 1024"><path d="M452.992 148.992q8.992-8 20.992-8t20.992 8l331.008 340.992q8.992 8.992 8.992 22.016t-8.992 22.016L494.976 875.008q-8.992 8-20.992 8t-20.992-8.992-8.992-20.992 8.992-20.992l312-320-312-320q-8.992-8.992-8.992-20.992t8.992-22.016z m-256 0q8.992-8 20.992-8t20.992 8l331.008 340.992q8.992 8.992 8.992 22.016t-8.992 22.016L238.976 875.008q-8.992 8-20.992 8t-20.992-8.992-8.992-20.992 8.992-20.992l312-320-312-320q-8.992-8.992-8.992-20.992t8.992-22.016z"  ></path></symbol><symbol id="ivy-icon-data-board" viewBox="0 0 1024 1024"><path d="M32 128h960v64H32V128z m160 64v512h640V192H192zM128 128h768v608q0 14.016-8.992 23.008T864 768H160q-14.016 0-23.008-8.992T128 736V128z m194.016 832H248l144.992-251.008 55.008 32z m453.984 0h-74.016l-126.016-219.008 55.008-32z"  ></path></symbol><symbol id="ivy-icon-data-analysis" viewBox="0 0 1024 1024"><path d="M664.992 768l111.008 192h-74.016l-111.008-192H432.96l-111.008 192H247.936l111.008-192H159.936q-14.016 0-23.008-8.992T127.936 736V192h-64q-14.016 0-23.008-8.992T31.936 160t8.992-23.008T63.936 128h896q14.016 0 23.008 8.992t8.992 23.008-8.992 23.008-23.008 8.992h-64v544q0 14.016-8.992 23.008t-23.008 8.992h-199.008zM832 192H192v512h640V192z m-480 256q14.016 0 23.008 8.992T384 480v64q0 14.016-8.992 23.008T352 576t-23.008-8.992T320 544v-64q0-14.016 8.992-23.008T352 448z m160-64q14.016 0 23.008 8.992T544 416v128q0 14.016-8.992 23.008T512 576t-23.008-8.992T480 544v-128q0-14.016 8.992-23.008T512 384z m160-64q14.016 0 23.008 8.992T704 352v192q0 14.016-8.992 23.008T672 576t-23.008-8.992T640 544v-192q0-14.016 8.992-23.008T672 320z"  ></path></symbol><symbol id="ivy-icon-data-line" viewBox="0 0 1024 1024"><path d="M359.008 768H160q-14.016 0-23.008-8.992T128 736V192H64q-14.016 0-23.008-8.992T32 160t8.992-23.008T64 128h896q14.016 0 23.008 8.992T992 160t-8.992 23.008T960 192h-64v544q0 14.016-8.992 23.008T864 768h-199.008l111.008 192h-74.016l-111.008-192H432.96l-111.008 192H247.936zM832 192H192v512h640V192zM343.008 535.008Q332.992 544 320 544t-22.496-9.504T288 512t8.992-23.008l148-147.008 124.992 94.016 108.992-136q12-15.008 30.496-12.512t24.992 20-5.504 32.512l-147.008 184-131.008-98.016z"  ></path></symbol><symbol id="ivy-icon-d-arrow-left" viewBox="0 0 1024 1024"><path d="M528.992 148.992q8.992-8 20.992-8t20.992 8.992 8.992 20.992-8.992 20.992l-312 320 312 320q8.992 8.992 8.992 21.504t-8.992 20.992-20.992 8.512-20.992-8L197.984 533.984q-8.992-10.016-8.992-22.496t8.992-21.504z m256 0q8.992-8 20.992-8t20.992 8.992 8.992 20.992-8.992 20.992l-312 320 312 320q8.992 8.992 8.992 21.504t-8.992 20.992-20.992 8.512-20.992-8L453.984 533.984q-8.992-10.016-8.992-22.496t8.992-21.504z"  ></path></symbol><symbol id="ivy-icon-delete-solid" viewBox="0 0 1024 1024"><path d="M352 192V96q0-14.016 8.992-23.008T384 64h256q14.016 0 23.008 8.992T672 96v96h256q14.016 0 23.008 8.992T960 224t-8.992 23.008T928 256H96q-14.016 0-23.008-8.992T64 224t8.992-23.008T96 192h256z m64 0h192V128h-192v64zM192 960q-14.016 0-23.008-8.992T160 928V256h704v672q0 14.016-8.992 23.008T832 960H192z m224-192q14.016 0 23.008-8.992T448 736V416q0-14.016-8.992-23.008T416 384t-23.008 8.992T384 416v320q0 14.016 8.992 23.008T416 768z m192 0q14.016 0 23.008-8.992T640 736V416q0-14.016-8.992-23.008T608 384t-23.008 8.992T576 416v320q0 14.016 8.992 23.008T608 768z"  ></path></symbol><symbol id="ivy-icon-delete-location" viewBox="0 0 1024 1024"><path d="M288 896h448q32 0 32 32t-32 32H288q-32 0-32-32t32-32z m512-480q-3.008-122.016-84.512-203.488T512 128q-122.016 3.008-203.488 84.512T224 416q0 88.992 71.488 203.488T512 872.992q144.992-139.008 216.512-253.504T800 416z m-288 544Q160 640 160 416q4-150.016 103.008-248.992T512 64q150.016 4 248.992 103.008T864 416q0 224-352 544z m-128-576h256q32 0 32 32t-32 32h-256q-32 0-32-32t32-32z"  ></path></symbol><symbol id="ivy-icon-discount" viewBox="0 0 1024 1024"><path d="M224 704h576V317.984l-247.008-202.016q-19.008-15.008-40.992-15.008t-40.992 15.008L224 317.984V704z m0 64v128h576v-128H224zM592.992 66.016l259.008 212q12 10.016 12 24.992V928q0 14.016-8.992 23.008T832 960H192q-14.016 0-23.008-8.992T160 928V303.008q0-15.008 12-24.992l259.008-212q36.992-28.992 80.992-28.992t80.992 28.992zM512 448q27.008-0.992 44.992-19.008T575.008 384t-18.016-44.992T512 320.992t-44.992 18.016T448.992 384t18.016 44.992T512 448z m0 64q-54.016-0.992-90.496-37.504T384 384q0.992-54.016 37.504-90.496T512 256q54.016 0.992 90.496 37.504T640 384q-0.992 54.016-37.504 90.496T512 512z"  ></path></symbol><symbol id="ivy-icon-date" viewBox="0 0 1024 1024"><path d="M128 384v512h768V192h-128v32q0 14.016-8.992 23.008T736 256t-23.008-8.992T704 224V192H320v32q0 14.016-8.992 23.008T288 256t-23.008-8.992T256 224V192H128v128h768v64H128z m192-256h384V96q0-14.016 8.992-23.008T736 64t23.008 8.992T768 96v32h160q14.016 0 23.008 8.992T960 160v768q0 14.016-8.992 23.008T928 960H96q-14.016 0-23.008-8.992T64 928V160q0-14.016 8.992-23.008T96 128h160V96q0-14.016 8.992-23.008T288 64t23.008 8.992T320 96v32zM288 512h64q14.016 0 23.008 8.992T384 544t-8.992 23.008T352 576H288q-14.016 0-23.008-8.992T256 544t8.992-23.008T288 512z m0 192h64q14.016 0 23.008 8.992T384 736t-8.992 23.008T352 768H288q-14.016 0-23.008-8.992T256 736t8.992-23.008T288 704z m192-192h64q14.016 0 23.008 8.992T576 544t-8.992 23.008T544 576h-64q-14.016 0-23.008-8.992T448 544t8.992-23.008T480 512z m0 192h64q14.016 0 23.008 8.992T576 736t-8.992 23.008T544 768h-64q-14.016 0-23.008-8.992T448 736t8.992-23.008T480 704z m192-192h64q14.016 0 23.008 8.992T768 544t-8.992 23.008T736 576h-64q-14.016 0-23.008-8.992T640 544t8.992-23.008T672 512z m0 192h64q14.016 0 23.008 8.992T768 736t-8.992 23.008T736 768h-64q-14.016 0-23.008-8.992T640 736t8.992-23.008T672 704z"  ></path></symbol><symbol id="ivy-icon-dessert" viewBox="0 0 1024 1024"><path d="M128 416v-48q0-32 13.504-60.512T179.52 257.984t55.008-28.992 62.496-3.008q22.016-72.992 80.512-116.992T512.032 64q76 0.992 134.496 44.992t80.512 116.992q32-4.992 62.496 3.008t55.008 28.992 38.016 49.504 13.504 60.512V416q-3.008 152.992-100.992 260t-251.008 123.008V896h-64v-96.992q-152.992-16-251.008-123.008T128.064 416z m287.008-32h194.016q-4-39.008 11.488-74.016t47.488-59.008q-14.016-55.008-56.512-88.512T512 128.96t-99.488 33.504-56.512 88.512q32 24 47.488 59.008T414.976 384z m-72.992 0q4.992-22.016-3.008-42.016t-26.496-32.992T272 296t-40.512 12.992-26.496 32.992T201.984 384h140z m340 0h140q4.992-22.016-3.008-42.016t-26.496-32.992T752 296t-40.512 12.992-26.496 32.992T681.984 384zM512 736q126.016-3.008 214.496-83.008T829.984 448H193.984q15.008 124.992 103.488 204.992T511.968 736z m-128 160h256q14.016 0 23.008 8.992T672 928t-8.992 23.008T640 960h-256q-14.016 0-23.008-8.992T352 928t8.992-23.008T384 896z"  ></path></symbol><symbol id="ivy-icon-dish" viewBox="0 0 1024 1024"><path d="M480 256.992V192h-96q-14.016 0-23.008-8.992T352 160t8.992-23.008T384 128h256q14.016 0 23.008 8.992T672 160t-8.992 23.008T640 192h-96v64.992q94.016 7.008 176 50.016t140.992 116.512 83.488 162.496 11.488 182.016H67.968q-12.992-92.992 11.488-182.016t83.488-162.496 140.992-116.512 176-50.016zM128 704h768q-4-163.008-112.512-271.488T512 320q-163.008 4-271.488 112.512T128 704z m-32 128h832q14.016 0 23.008 8.992T960 864t-8.992 23.008T928 896H96q-14.016 0-23.008-8.992T64 864t8.992-23.008T96 832z"  ></path></symbol><symbol id="ivy-icon-delete" viewBox="0 0 1024 1024"><path d="M160 256H96q-14.016 0-23.008-8.992T64 224t8.992-23.008T96 192h256V96q0-14.016 8.992-23.008T384 64h256q14.016 0 23.008 8.992T672 96v96h256q14.016 0 23.008 8.992T960 224t-8.992 23.008T928 256h-64v672q0 14.016-8.992 23.008T832 960H192q-14.016 0-23.008-8.992T160 928V256z m448-64V128h-192v64h192zM224 896h576V256H224v640z m192-128q-14.016 0-23.008-8.992T384 736V416q0-14.016 8.992-23.008T416 384t23.008 8.992T448 416v320q0 14.016-8.992 23.008T416 768z m192 0q-14.016 0-23.008-8.992T576 736V416q0-14.016 8.992-23.008T608 384t23.008 8.992T640 416v320q0 14.016-8.992 23.008T608 768z"  ></path></symbol><symbol id="ivy-icon-document-copy" viewBox="0 0 1024 1024"><path d="M128 320v576h576V320H128zM96 256h640q14.016 0 23.008 8.992T768 288v640q0 14.016-8.992 23.008T736 960H96q-14.016 0-23.008-8.992T64 928V288q0-14.016 8.992-23.008T96 256z m864-160v704q0 14.016-8.992 23.008T928 832h-96v-64h64V128H384v64h-64V96q0-14.016 8.992-23.008T352 64h576q14.016 0 23.008 8.992T960 96zM256 672h320v64H256v-64z m0-192h320v64H256v-64z"  ></path></symbol><symbol id="ivy-icon-document" viewBox="0 0 1024 1024"><path d="M832 384h-256V128H192v768h640V384z m-25.984-64L640 153.984V320h166.016zM160 64h480l256 256v608q0 14.016-8.992 23.008T864 960H160q-14.016 0-23.008-8.992T128 928V96q0-14.016 8.992-23.008T160 64z m160 448h384v64H320v-64z m0-192h160v64h-160v-64z m0 384h384v64H320v-64z"  ></path></symbol><symbol id="ivy-icon-discover" viewBox="0 0 1024 1024"><path d="M512 896q163.008-4 271.488-112.512T896 512q-4-163.008-112.512-271.488T512 128q-163.008 4-271.488 112.512T128 512q4 163.008 112.512 271.488T512 896z m0 64q-190.016-4.992-316.512-131.488T64 512q4.992-190.016 131.488-316.512T512 64q190.016 4.992 316.512 131.488T960 512q-4.992 190.016-131.488 316.512T512 960z m214.016-644.992q-74.016 171.008-157.504 254.016t-253.504 156.992q-8 3.008-14.016-3.008t-3.008-14.016q74.016-170.016 156.992-252.992t254.016-158.016q8-3.008 14.016 3.008t3.008 14.016z"  ></path></symbol><symbol id="ivy-icon-document-add" viewBox="0 0 1024 1024"><path d="M832 384h-256V128H192v768h640V384z m-25.984-64L640 153.984V320h166.016zM160 64h480l256 256v608q0 14.016-8.992 23.008T864 960H160q-14.016 0-23.008-8.992T128 928V96q0-14.016 8.992-23.008T160 64z m320 512v-128h64v128h128v64h-128v128h-64v-128h-128v-64h128z"  ></path></symbol><symbol id="ivy-icon-document-checked" viewBox="0 0 1024 1024"><path d="M806.016 320L640 153.984V320h166.016zM832 384h-256V128H192v768h640V384zM160 64h480l256 256v608q0 14.016-8.992 23.008T864 960H160q-14.016 0-23.008-8.992T128 928V96q0-14.016 8.992-23.008T160 64z m318.016 582.016l180.992-180.992 46.016 44.992-227.008 227.008L320 578.016l44.992-44.992z"  ></path></symbol><symbol id="ivy-icon-document-delete" viewBox="0 0 1024 1024"><path d="M806.016 320L640 153.984V320h166.016zM832 384h-256V128H192v768h640V384zM160 64h480l256 256v608q0 14.016-8.992 23.008T864 960H160q-14.016 0-23.008-8.992T128 928V96q0-14.016 8.992-23.008T160 64z m308.992 546.016l-91.008-90.016 46.016-46.016 90.016 91.008 91.008-91.008 44.992 46.016-90.016 90.016 90.016 91.008-44.992 44.992-91.008-90.016-90.016 90.016-46.016-44.992z"  ></path></symbol><symbol id="ivy-icon-document-remove" viewBox="0 0 1024 1024"><path d="M806.016 320L640 153.984V320h166.016zM832 384h-256V128H192v768h640V384zM160 64h480l256 256v608q0 14.016-8.992 23.008T864 960H160q-14.016 0-23.008-8.992T128 928V96q0-14.016 8.992-23.008T160 64z m192 512h320v64H352v-64z"  ></path></symbol><symbol id="ivy-icon-dish-" viewBox="0 0 1024 1024"><path d="M384 275.008V224q2.016-54.016 38.016-90.496T512.032 96q54.016 0.992 90.016 36.992T640.064 224v50.016q162.016 52 248.992 188.512t66.016 305.504H69.056q-22.016-168.992 65.504-305.504t249.504-187.488zM96 832h832q14.016 0 23.008 8.992T960 864t-8.992 23.008T928 896H96q-14.016 0-23.008-8.992T64 864t8.992-23.008T96 832z m32-128h768q-4-163.008-112.512-271.488T512 320q-163.008 4-271.488 112.512T128 704zM576 256V224q-0.992-27.008-19.008-44.992T512 160.992t-44.992 18.016T448 224v32h128z"  ></path></symbol><symbol id="textend"></symbol>`;

class Icon extends HTMLElement {
    constructor() {
        super();
        const template = document.createElement("template");
        template.innerHTML = `
            <style type="text/css">
                :host {
                    display: inline-flex;
                    color: inherit;
                    transition: 0.3s;
                    font-size: inherit;
                    align-items: center;
                    justify-content: center;
                }
                :host([spin]) .ivy-icon {
                    animation: spin 1.4s linear infinite;
                }
                .ivy-icon {
                    display: block;
                    width: 1em;
                    height: 1em;
                    vertical-align: -0.15em;
                    fill: currentColor;
                    overflow: hidden;
                }
                
                @keyframes spin {
                    0% {
                        transform: rotate(0deg);
                    }
                    100% {
                        transform: rotate(360deg);
                    }
                }
                .ivy-icon-hidden {
                    width: 0;
                    height: 0;
                    overflow:hidden;
                    position: absolute;
                }
            </style>
            <svg aria-hidden="true" class="ivy-icon-hidden">
                
            </svg>
            <svg class="ivy-icon" style="font-size: ${this.size}px;color: ${this.color};">
                <use xlink:href="#ivy-icon-${this.name}" class="ivy-icon-inner"></use>
            </svg>
        `;
        this._shadowRoot = this.attachShadow({
            mode: "open",
        });
        this._shadowRoot.appendChild(template.content.cloneNode(true));
        this.root = this._shadowRoot.querySelector(".ivy-icon");
        this.use = this._shadowRoot.querySelector(".ivy-icon-inner");
        this.hiddenSvg = this._shadowRoot.querySelector(".ivy-icon-hidden");
    }
    static get observedAttributes() {
        return ["size", "name", "color"];
    }
    get size() {
        return this.getAttribute("size") || 14;
    }
    get name() {
        return this.getAttribute("name") || "";
    }
    get color() {
        return this.getAttribute("color") || "";
    }

    set name(value) {
        this.setAttribute("name", value);
    }
    set color(value) {
        this.setAttribute("color", value);
    }
    set size(value) {
        this.setAttribute("size", value);
    }

    connectedCallback() {
        if (this.name !== null) {
            const reg1 = new RegExp(`ivy-icon-${this.name}`);
            const reg = new RegExp(
                `(.+)(<symbol id=\"ivy-icon-${this.name}\" viewBox=\"0 0 1024 1024\"><path d=\"[^\"]+"\ +><\/path><\/symbol>)(.+)`,
                "g"
            );
            if (reg1.test(iconfont)) {
                this.hiddenSvg.innerHTML = iconfont.replace(reg, "$2");
            }
        }
    }
    attributeChangedCallback(name, oldVal, newVal) {
        if (name === "color") {
            this.root.style.color = newVal;
        }
        if (name === "name") {
            const reg1 = new RegExp(`ivy-icon-${this.name}`);
            const reg = new RegExp(
                `(.+)(<symbol id=\"ivy-icon-${this.name}\" viewBox=\"0 0 1024 1024\"><path d=\"[^\"]+"\ +><\/path><\/symbol>)(.+)`,
                "g"
            );
            if (reg1.test(iconfont)) {
                this.hiddenSvg.innerHTML = iconfont.replace(reg, "$2");
            }
            this.use.setAttribute("xlink:href", `#ivy-icon-${newVal}`);
        }
        if (name === "size") {
            this.root.style.fontSize = newVal;
        }
    }
}

if (!customElements.get("ivy-icon")) {
    customElements.define("ivy-icon", Icon);
}

/* 公共颜色变量 */

const $_color_primary = "#409EFF";
const $_color_success = "#67C23A";
const $_color_warn = "#E6A23C";
const $_color_error = "#F56C6C";
const $_color_info = "#909399";

/** 文字基础颜色 **/
const $_text_color = "#606266";

/****边框颜色 */
const $_border_color_base = "#DCDFE6";

/***圆角 */
const $_border_radius = "4px";

/*****阴影 */
const $_shadow_base = "0 1px 6px rgba(0,0,0, 0.2)";

/*****边框 */
const $_border_base = `1px solid ${$_border_color_base}`;

const $_mask_color = "rgba(55, 55, 55, 0.6)";

class Button extends HTMLElement {
    constructor() {
        super();
        const template = document.createElement("template");

        template.innerHTML = `
            <style>
                :host {
                    margin-left: 12px;
                    line-height: 34px;
                    display: inline-flex;
                }
                :host(:first-child){
                    margin-left: 0;
                }
                .ivy-button {
                    display: block;
                    overflow: hidden;
                    outline: none;
                    height: 34px;
                    line-height: 34px;
                    border: ${$_border_base};
                    border-radius: var(--border-radius, ${$_border_radius});
                    box-sizing: border-box;
                    padding: 0 20px;
                    background: white;
                    cursor: pointer;
                    transition: backgroundColor 0.3s, color 0.3s, opacity 0.3s;
                }

                .ivy-button:not([disabled]):hover,
                .ivy-button:not([disabled]):focus{
                    opacity: 0.8;
                }

                :host([disabled]) .ivy-button {
                    opacity: 0.7;
                    cursor: not-allowed;
                }

                .ivy-button-primary {
                    border: 1px solid var(--color-primary, ${$_color_primary});
                    background-color: var(--color-primary, ${$_color_primary});
                    color: white;
                }
                .ivy-button-success {
                    border: 1px solid var(--color-success, ${$_color_success});;
                    background-color: var(--color-success, ${$_color_success});;
                    color: white;
                }
                .ivy-button-warn {
                    border: 1px solid var(--color-warn, ${$_color_warn});;
                    background-color: var(--color-warn, ${$_color_warn});;
                    color: white;
                }
                .ivy-button-danger {
                    border: 1px solid var(--color-danger, ${$_color_error});;
                    background-color: var(--color-danger, ${$_color_error});;
                    color: white;
                }
                .ivy-button-info {
                    border: 1px solid var(--color-info, ${$_color_info});;
                    background-color: var(--color-info, ${$_color_info});;
                    color: white;
                }
                #ivy-loading {
                    width: 1em;
                    height: 1em;
                    vertical-align: text-top;
                    fill: currentColor;
                    overflow: hidden;
                    animation: rotate 1.4s linear infinite;
                    display: none;
                }
                @keyframes rotate{
                    to{
                        transform: rotate(360deg); 
                    }
                }
            </style>
            <svg aria-hidden="true" style="position: absolute; width: 0px; height: 0px; overflow: hidden;">
                <symbol id="ivy-icon-loading" viewBox="0 0 1024 1024">
                    <path
                        d="M512 64q14.016 0 23.008 8.992T544 96v192q0 14.016-8.992 23.008T512 320t-23.008-8.992T480 288V96q0-14.016 8.992-23.008T512 64z m0 640q14.016 0 23.008 8.992T544 736v192q0 14.016-8.992 23.008T512 960t-23.008-8.992T480 928v-192q0-14.016 8.992-23.008T512 704z m448-192q0 14.016-8.992 23.008T928 544h-192q-14.016 0-23.008-8.992T704 512t8.992-23.008T736 480h192q14.016 0 23.008 8.992T960 512z m-640 0q0 14.016-8.992 23.008T288 544H96q-14.016 0-23.008-8.992T64 512t8.992-23.008T96 480h192q14.016 0 23.008 8.992T320 512zM195.008 195.008q10.016-8.992 23.008-8.992t22.016 8.992l136 136q8.992 10.016 8.992 22.496t-9.504 22.016-22.016 9.504-22.496-8.992l-136-136q-8.992-8.992-8.992-22.016t8.992-23.008zM648 648q10.016-10.016 22.496-10.016t22.496 10.016l136 136q8.992 8.992 8.992 22.016t-9.504 22.496-22.496 9.504-22.016-8.992l-136-136q-10.016-10.016-10.016-22.496t10.016-22.496z m180.992-452.992q8.992 10.016 8.992 23.008t-8.992 22.016l-136 136q-10.016 8.992-22.496 8.992t-22.016-9.504-9.504-22.016 8.992-22.496l136-136q8.992-8.992 22.016-8.992t23.008 8.992zM376 648q10.016 10.016 10.016 22.496t-10.016 22.496l-136 136q-8.992 8.992-22.016 8.992t-22.496-9.504-9.504-22.496 8.992-22.016l136-136q10.016-10.016 22.496-10.016t22.496 10.016z"
                    ></path>
                </symbol>
            </svg>
            
            <button class="ivy-button">
                <svg view="0 0 1024 1024" class="ivy-icon" xmlns="http://www.w3.org/2000/svg" version="1.1" aria-hidden="true" id="ivy-loading">
                    <use href="#ivy-icon-loading"></use>
                </svg>
                <span class="ivy-button-inner"><slot></slot></span>
            </button>
        `;

        this._shadowRoot = this.attachShadow({
            mode: "open",
        });
        this._shadowRoot.appendChild(template.content.cloneNode(true));

        this.$button = this._shadowRoot.querySelector("button");
        this.$loading = this._shadowRoot.querySelector("#ivy-loading");
        this.$buttonInner = this._shadowRoot.querySelector(".ivy-button-inner");
    }
    connectedCallback() {
        if (this.type && this.$button) {
            this.$button.setAttribute("class", `${this.class} ivy-button-${this.type}`);
        }
    }

    get type() {
        return this.getAttribute("type");
    }

    set type(value) {
        this.setAttribute("type", value);
    }

    get loading() {
        return this.getAttribute("loading");
    }

    set loading(value) {
        this.setAttribute("loading", value);
    }

    get round() {
        return this.getAttribute("round");
    }

    set round(value) {
        this.setAttribute("round", value);
    }

    get disabled() {
        return this.getAttribute("disabled");
    }

    set disabled(value) {
        this.setAttribute("disabled", value);
    }

    static get observedAttributes() {
        return ["type", "round", "disabled", "loading"];
    }

    get class() {
        return this.$button.classList;
    }

    attributeChangedCallback(name, oldVal, newVal) {
        this.render(name);
    }
    render(name) {
        if (name === "round") {
            this.$button.style.borderRadius = "17px";
        }
        /* if (name === "disabled") {
            this.$button.style.cursor = "not-allowed";
            this.$button.style.opacity = "0.5";
        } */
        if (name === "loading") {
            this.$loading.style.display = "initial";
            this.$buttonInner.style.marginLeft = "4px";
            this.$button.style.cursor = "not-allowed";
            this.$button.style.opacity = "0.5";
        }
    }
}
if (!customElements.get("ivy-button")) {
    customElements.define("ivy-button", Button);
}

class Card extends HTMLElement {
    constructor() {
        super();

        const template = document.createElement("template");

        template.innerHTML = `
            <style>
                :host {
                    display: inline-block;
                }
                :host([shadow]) .ins-card {
                    box-shadow: var(--box-shadow, ${$_shadow_base});
                    border-color: #eee;
                }
                .ins-card {
                    border: ${$_border_base};
                    border-radius: var(--border-radius, ${$_border_radius});
                }
                .ins-card-header {
                    border-bottom: ${$_border_base};
                    padding: 12px 16px;
                }
                .ins-card-body {
                    padding: 16px;
                }
            </style>
            <div class="ins-card">
                <div class="ins-card-header">
                    <slot name="header" id="header">${this.header}</slot>
                </div>
                <div class="ins-card-body">
                    <slot></slot>
                </div>
            </div>
        `;

        this._shadowRoot = this.attachShadow({
            mode: "open",
        });
        this._shadowRoot.appendChild(template.content.cloneNode(true));

        this.$el = this._shadowRoot.querySelector(".ins-card");
        this.$header = this._shadowRoot.querySelector(".ins-card-header").children[0];
    }

    static get observedAttributes() {
        return ["shadow", "header"];
    }

    get shadow() {
        return this.getAttribute("shadow");
    }

    get header() {
        return this.getAttribute("header") || "";
    }

    set header(value) {
        this.setAttribute("header", value);
    }

    connectedCallback() {
        /* console.log(this.firstChild, "this.firstChild");
        const flag = this.firstElementChild.slot === "header";
        if (!flag) {
            this.$el.children[0].children[0].innerHTML = this.header;
        } */
        // this.header = this.haeder;
    }

    attributeChangedCallback(name, oldVal, val) {
        if (name === "header" && this.firstElementChild.slot !== "header") {
            const header = val ? val : oldVal;
            this.$header.innerHTML = header;
        }
    }
}

if (!customElements.get("ins-card")) {
    customElements.define("ins-card", Card);
}

class Timeline extends HTMLElement {
    constructor() {
        super();
        const template = document.createElement("template");
        template.innerHTML = `
            <style>
                :host {
                    display: flex;
                }
                :host([reverse]) .ivy-timeline {
                    flex-direction: column-reverse;
                }
                .ivy-timeline {
                    display: flex;
                    flex-wrap: wrap;
                    flex-direction: column;
                }
            </style>
            <div class="ivy-timeline">
                <slot class="slot"></slot>
            </div>
        `;
        this._shadowRoot = this.attachShadow({
            mode: "open",
        });
        this._shadowRoot.appendChild(template.content.cloneNode(true));
        this.root = this._shadowRoot.querySelector(".ivy-timeline");
        this.slot = this._shadowRoot.querySelector(".slot");
    }
    static get observedAttributes() {
        return ["reverse"];
    }
    get reverse() {
        return this.getAttribute("reverse");
    }
    connectedCallback() {
        const reverse = this.reverse;
        const children = [...this.children];
        children.map(cur => {
            if (reverse !== null) cur.setAttribute("reverse", "");
        });
    }
    attributeChangedCallback(name, oldVal, newVal) {}
}

class TimelineItem extends HTMLElement {
    constructor() {
        super();
        const template = document.createElement("template");
        template.innerHTML = `
            <style>
                :host {
                    display: block;
                    position: relative;
                    padding: 4px 0 20px 28px;
                }
                :host(:last-child) .ivy-timeline-line {
                    display: none;
                }
                :host([reverse]:first-child) .ivy-timeline-line {
                    display: none;
                }
                :host([reverse]:last-child) .ivy-timeline-line {
                    display: block;
                }
                :host([hide-timestamp]) .ivy-timeline-timestamp {
                    display: none;
                }
                :host([type="primary"]) .ivy-timeline-dot {
                    background-color: var(--color-primary, ${$_color_primary});
                }
                :host([type="success"]) .ivy-timeline-dot {
                    background-color: var(--color-success, ${$_color_success});
                }
                :host([type="warn"]) .ivy-timeline-dot {
                    background-color: var(--color-warn, ${$_color_warn});
                }
                :host([type="error"]) .ivy-timeline-dot {
                    background-color: var(--color-error, ${$_color_error});
                }
                .ivy-timeline-dot {
                    position: absolute;
                    left: -1px;
                    width: 12px;
                    height: 12px;
                    background-color: #e4e7ed;
                    border-radius: 50%;
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    z-index: 1;
                }
                .ivy-timeline-line {
                    position: absolute;
                    left: 4px;
                    height: 100%;
                    border-left: 2px solid #e4e7ed;
                }
                .ivy-timeline-timestamp {
                    line-height: 1em;
                    margin-bottom: 6px;
                    color: #666;
                }             
            </style>
            <div class="ivy-timeline-dot"></div>
            <div class="ivy-timeline-line"></div>
            <div class="ivy-timeline-ctx">
                <div class="ivy-timeline-timestamp">${this.timestamp}</div>
                <div><slot></slot></div>
            </div>
        `;
        this._shadowRoot = this.attachShadow({
            mode: "open",
        });
        this._shadowRoot.appendChild(template.content.cloneNode(true));
        this.timestampEle = this._shadowRoot.querySelector(".ivy-timeline-timestamp");
    }
    static get observedAttributes() {
        return ["timestamp"];
    }
    get timestamp() {
        return this.getAttribute("timestamp");
    }
    set timestamp(value) {
        this.setAttribute("timestamp", value);
    }
    connectedCallback() {
        this.timestampEle.textContent = this.timestamp;
    }
    attributeChangedCallback(name, oldVal, newVal) {}
}

if (!customElements.get("ivy-timeline")) {
    customElements.define("ivy-timeline", Timeline);
}
if (!customElements.get("ivy-timeline-item")) {
    customElements.define("ivy-timeline-item", TimelineItem);
}

class Divider extends HTMLElement {
    constructor() {
        super();
        const template = document.createElement("template");

        template.innerHTML = `
            <style>
                :host{
                    padding: 28px 0;
                    display: block;
                }
                .ivy-divider {
                    height: 1px;
                    position: relative;
                    line-height: 1px;
                    background-color: transparent;
                    display: flex;
                    z-index: 0;
                }
                .ivy-divider::before {
                    content: "";
                    display: block;
                    width: 100%;
                    height: 0px;
                    border-top: 1px solid var(--color-line-default, ${$_border_color_base});
                    position: absolute;
                    left: 0;
                    top: 0;
                    z-index: -1;
                }
                :host([type="solid"]) .ivy-divider::before {
                    border-top-style: solid;
                }
                :host([type="dotted"]) .ivy-divider::before {
                    border-top-style: dotted;
                }
                :host([type="dashed"]) .ivy-divider::before {
                    border-top-style: dashed;
                }
                :host([type="double"]) .ivy-divider::before {
                    border-top-style: double;
                }
                :host([type="groove"]) .ivy-divider::before {
                    border-top-style: groove;
                }
                :host([type="ridge"]) .ivy-divider::before {
                    border-top-style: ridge;
                }
                :host([type="inset"]) .ivy-divider::before {
                    border-top-style: inset;
                }
                :host([type="outset"]) .ivy-divider::before {
                    border-top-style: outset;
                }
                .ivy-divider-text {
                    display: inline-block;
                    padding: 0 10px;
                    font-size: inherit;
                    background-color: white;
                    margin: 0 auto;
                }
                :host([hide-text]) .ivy-divider-text {
                    display: none;
                }
                :host([placement="center"]) .ivy-divider-text {
                    margin: 0 auto;
                }
                :host([placement="left"]) .ivy-divider-text{
                    margin: 0;
                    position: absolute;
                    left: 10%;
                }
                :host([placement="right"]) .ivy-divider-text{
                    margin: 0;
                    position: absolute;
                    right: 10%;
                }
            </style>
            <div class="ivy-divider">
                <div class="ivy-divider-text"><slot></slot></span>
            </div>
        `;
        this._shadowRoot = this.attachShadow({
            mode: "open",
        });

        this._shadowRoot.appendChild(template.content.cloneNode(true));
        this.root = this._shadowRoot.querySelector(".ivy-divider");
    }

    static get observedAttributes() {
        return ["type"];
    }

    get type() {
        return this.getAttribute("type");
    }

    set type(value) {
        this.setAttribute("type", value);
    }
}

if (!customElements.get("ivy-divider")) {
    customElements.define("ivy-divider", Divider);
}

class Modal extends HTMLElement {
    constructor() {
        super();
        const template = document.createElement("template");
        template.innerHTML = `
            <style>
                :host {
                    position: fixed;
                    left: 0;
                    top: 0;
                    z-index: 9000;
                    display: none;
                    width: 100vw;
                    height: 100vh;
                }
                :host([show]){
                    display: block;
                }
                .ivy-mask {
                    position: absolute;
                    left: 0;
                    top: 0;
                    z-index: -1;
                    width: 100%;
                    height: 100%;
                    background-color: rgba(55, 55, 55, 0.6);
                }
                .ivy-modal {
                    width: 500px;
                    margin: 14vh auto 0;
                    background-color: #ffffff;
                    border-radius: var(--border-radius, ${$_border_radius});
                    position: relative;
                    animation: shows 0.3s forwards;
                }
                .ivy-modal-header {
                    padding: 12px 16px;
                    border-bottom: 1px solid var(--border-color, ${$_border_color_base});
                }
                .ivy-modal-content {
                    padding: 16px;
                }
                .ivy-modal-footer {
                    padding: 12px 16px;
                    border-top: 1px solid var(--border-color, ${$_border_color_base});
                    text-align: right;
                }
                .ivy-modal-button {
                    line-height: 1em;
                    font-size: 14px;
                    padding: 8px 20px;
                    border: 1px solid #dcdfe6;
                    outline: none;
                    display: inline-block;
                    border-radius: 4px;
                    cursor: pointer;
                    background-color: #fff;
                    transition: all 0.1s;
                }
                .ivy-modal-button:hover {
                    color: #409eff;
                    border-color: #c6e2ff;
                    background-color: #ecf5ff;
                }
                .ivy-modal-button + .ivy-modal-button {
                    margin-left: 10px;
                }
                .ivy-modal-button-primary {
                    background-color: #2d8cf0;
                    border-color: #2d8cf0;
                    color: white;
                    
                }
                .ivy-modal-button-primary:hover {
                    background-color: #66b1ff;
                    border-color: #66b1ff;
                    color: #fff;
                }
                .ivy-modal-close {
                    position: absolute;
                    top: 12px;
                    right: 12px;
                    width: 16px;
                    height: 16px;
                    cursor: pointer;
                    z-index: 1;
                }
                .ivy-modal-close::before,
                .ivy-modal-close::after {
                    content: "";
                    display: block;
                    position: absolute;
                    left: 8px;
                    top: 0;
                    width: 1px;
                    height: 16px;
                    background-color: #999;
                    border-radius: 0.5px;
                    transform: rotate(-45deg);
                    z-index: -1;
                }
                .ivy-modal-close::before {
                    transform: rotate(45deg);
                }
                .ivy-modal-close:hover::before,
                .ivy-modal-close:hover::after {
                    background-color: #444;
                }
                @keyframes shows {
                    0% {
                        display: none;
                        margin: 0 auto 0;
                    }
                    100% {
                        display: block;
                        margin: 14vh auto 0;
                    }
                }
            </style>
            <div class="ivy-mask"></div>
            <div class="ivy-modal">
                <div class="ivy-modal-header">
                    <slot name="header">${this.title}</slot>
                </div>
                <div class="ivy-modal-content">
                    <slot></slot>
                </div>
                <div class="ivy-modal-footer">
                    <slot name="footer">
                        <button class="ivy-modal-button ivy-modal-button-cancel">取消</button>
                        <button class="ivy-modal-button ivy-modal-button-primary">确定</button>
                    </slot>
                </div>
                <div class="ivy-modal-close"></div>
            </div>
        `;
        this._shadowRoot = this.attachShadow({
            mode: "closed",
        });
        this._shadowRoot.appendChild(template.content.cloneNode(true));
        this.root = this._shadowRoot.querySelector(".ivy-modal");
        document.body.appendChild(this);

        const closeBtn = this._shadowRoot.querySelector(".ivy-modal-close");
        const cancelBtn = this._shadowRoot.querySelector(".ivy-modal-button-cancel");
        const sureBtn = this._shadowRoot.querySelector(".ivy-modal-button-primary");

        closeBtn.addEventListener("click", () => {
            this.dispatchEvent(new CustomEvent("close", { bubbles: false, cancelable: true, composed: false }));
            this.removeAttribute("show");
        });
        cancelBtn.addEventListener("click", () => {
            this.dispatchEvent(new CustomEvent("cancel", { bubbles: false, cancelable: true, composed: false }));
            this.removeAttribute("show");
        });
        sureBtn.addEventListener("click", () => {
            this.dispatchEvent(new CustomEvent("sure", { bubbles: false, cancelable: true, composed: false }));
            this.removeAttribute("show");
        });
    }
    static get observedAttributes() {
        return ["show", "title"];
    }
    get show() {
        return this.getAttribute("show");
    }
    get title() {
        return this.getAttribute("title") || "";
    }

    set show(value) {
        this.setAttribute("show", value);
    }
    set title(value) {
        this.setAttribute("title", value);
    }
    connectedCallback() {}
    attributeChangedCallback(name, oldVal, newVal) {}
}

if (!customElements.get("ivy-modal")) {
    customElements.define("ivy-modal", Modal);
}

class Progress extends HTMLElement {
    constructor() {
        super();
        const template = document.createElement("template");
        template.innerHTML = `
            <style type="text/css">
                :host {
                    display: flex;
                }
                .ivy-progress {
                    display: block;
                    width: 100%;
                    border-radius: ${this.size / 2}px;
                    overflow: hidden;
                    background-color: #f3f3f3;
                }
                .ivy-progress-inner {
                    height: 100%;
                    border-radius: ${this.size / 2}px;
                }
                
            </style>
            <div class="ivy-progress" style="height: ${this.size}px">
                <div class="ivy-progress-inner" style="background-color: ${this.color};width: ${this.value}%;"></div>
            </div>
            
        `;
        this._shadowRoot = this.attachShadow({
            mode: "open",
        });
        this._shadowRoot.appendChild(template.content.cloneNode(true));
        this.root = this._shadowRoot.querySelector(".ivy-progress");
        this.inner = this._shadowRoot.querySelector(".ivy-progress-inner");
    }
    static get observedAttributes() {
        return ["value", "size", "color"];
    }
    get value() {
        return this.getAttribute("value") || "0";
    }
    set value(value) {
        this.setAttribute("value", value);
    }

    get size() {
        return this.getAttribute("size") || "10";
    }
    set size(value) {
        this.setAttribute("size", value);
    }

    get color() {
        return this.getAttribute("color") || $_color_primary;
    }
    set color(value) {
        this.setAttribute("color", value);
    }

    connectedCallback() {
        this.inner.style.backgroundColor = this.color;
        this.inner.style.width = this.value + "%";
        this.root.style.height = this.size + "px";
        this.root.style.borderRadius = this.size / 2 + "px";
    }
    attributeChangedCallback(name, oldVal, newVal) {}
}

if (!customElements.get("ivy-progress")) {
    customElements.define("ivy-progress", Progress);
}

class Row extends HTMLElement {
    constructor() {
        super();
        const template = document.createElement("template");

        template.innerHTML = `
            <style>
                :host {
                    display: flex;
                    width: 100%;
                    flex-wrap: wrap;
                }
                
            </style>
            <slot></slot>
        `;
        this._shadowRoot = this.attachShadow({
            mode: "open",
        });
        this._shadowRoot.appendChild(template.content.cloneNode(true));
    }
    static get observedAttributes() {
        return ["offset", "gutter"];
    }

    get gutter() {
        return this.getAttribute("gutter") || 0;
    }
    set gutter(val) {
        this.setAttribute("gutter", val);
    }

    connectedCallback() {
        const gutter = this.gutter;
        const children = [...this.children];
        children.map(cur => {
            if (gutter !== null) cur.setAttribute("gutter", gutter);
        });
    }
}

if (!customElements.get("ivy-row")) {
    customElements.define("ivy-row", Row);
}

class Col extends HTMLElement {
    constructor() {
        super();
        const template = document.createElement("template");

        template.innerHTML = `
            <style>
                :host {
                    flex: 0 0 ${(this.span / 24) * 100}%;
                    width: ${(this.span / 24) * 100}%;
                    margin: 0 ${this.gutter / 2}px;
                    margin-left: calc(${this.gutter / 2}px + ${(this.offset / 24) * 100}%);
                }
                :host(:first-child) {
                    margin-left: 0 !important;
                }
                :host(:last-child) {
                    margin-right: 0 !important;
                }
                
            </style>
            <slot></slot>
        `;
        this._shadowRoot = this.attachShadow({
            mode: "open",
        });
        this._shadowRoot.appendChild(template.content.cloneNode(true));
    }

    static get observedAttributes() {
        return ["span", "offset", "gutter"];
    }

    get span() {
        return this.getAttribute("span") || 24;
    }

    set span(val) {
        this.setAttribute("span", val);
    }

    get offset() {
        return this.getAttribute("offset") || 0;
    }

    set offset(val) {
        this.setAttribute("offset", val);
    }

    get gutter() {
        return this.getAttribute("gutter") || 0;
    }
    set gutter(val) {
        this.setAttribute("gutter", val);
    }
}

if (!customElements.get("ivy-col")) {
    customElements.define("ivy-col", Col);
}

class Switch extends HTMLElement {
    constructor() {
        super();

        const template = document.createElement("template");

        template.innerHTML = `
            <style>
                :host {
                    display: inline-flex;
                }
                .ivy-switch {
                    display: inline-block;
                    position: relative;
                    width: 40px;
                    height: 20px;
                    background: #ccc;
                    border-radius: 10px;
                    transition: border-color 0.3s, background-color 0.3s;
                    cursor: pointer;
                }
                .ivy-switch::after{
                    content: '';
                    display: inline-block;
                    width: 1rem;
                    height:1rem;
                    border-radius: 50%;
                    background: #fff;
                    box-shadow: 0, 0, 2px, #999;
                    transition:.4s;
                    top: 2px;
                    position: absolute;
                    left: 2px;
                }
                :host([checked]) .ivy-switch {
                    background: var(--color-primary, ${$_color_primary});
                }
                :host([checked]) .ivy-switch::after{
                    content: '';
                    position: absolute;
                    left: 55%;
                    top: 2px;
                }
                :host([disabled]) {
                    opacity: 0.6;
                }
                :host([disabled]) .ivy-switch {
                    cursor: not-allowed;
                }
            </style>
            <label class="ivy-switch">
                <input id="ivy-switch" type="checkbox" ${this.checked} ${this.disabled} hidden>
            </label>
        `;

        this._shadowRoot = this.attachShadow({
            mode: "open",
        });
        this._shadowRoot.appendChild(template.content.cloneNode(true));

        this.$switch = this._shadowRoot.querySelector(".ivy-switch");
        this.input = this._shadowRoot.querySelector("#ivy-switch");
    }

    static get observedAttributes() {
        return ["checked", "disabled", "value"];
    }

    get value() {
        return this.getAttribute("value");
    }

    get checked() {
        return this.getAttribute("checked");
    }

    set checked(value) {
        this.setAttribute("checked", value);
    }

    get disabled() {
        return this.getAttribute("disabled");
    }

    set disabled(value) {
        this.setAttribute("disabled", value);
    }

    connectedCallback() {
        this.input.addEventListener("change", e => {
            if (this.disabled !== null) {
                return false;
            }
            const checked = e.target.checked;
            if (checked) {
                this.removeAttribute("checked");
            } else {
                this.setAttribute("checked", "");
            }
            this.dispatchEvent(new CustomEvent("change", { bubbles: false, cancelable: true, composed: false, detail: !checked }));
        });
    }

    attributeChangedCallback(name, oldVal, newVal) {}
}
if (!customElements.get("ivy-switch")) {
    customElements.define("ivy-switch", Switch);
}

class Collapse extends HTMLElement {
    constructor() {
        super();
        const template = document.createElement("template");

        template.innerHTML = `
            <style>
                :host {
                    border: 1px solid #dcdee2;
                    display: inline-block;
                    border-radius: 2px;
                    overflow: hidden;
                }
            </style>
            <slot></slot>
        `;
        this._shadowRoot = this.attachShadow({
            mode: "open",
        });
        this._shadowRoot.appendChild(template.content.cloneNode(true));
    }
    static get observedAttributes() {
        return ["active"];
    }

    get active() {
        return this.getAttribute("active");
    }

    connectedCallback() {
        const active = this.active;
        const children = [...this.children];
        children.map((cur, i) => {
            const name = cur.getAttribute("name");
            if (name === null) {
                cur.setAttribute("name", `_collapse_${i}`);
            }
            if (active === name) cur.setAttribute("active", "");
        });
    }
}

if (!customElements.get("ivy-collapse")) {
    customElements.define("ivy-collapse", Collapse);
}

class CollapseItem extends HTMLElement {
    constructor() {
        super();
        const template = document.createElement("template");

        template.innerHTML = `
            <style>
                :host {
                    font-size: 14px;
                }
                :host([active]) .ivy-collapse-item-body {
                    transition: all 0.3s;
                }
                .ivy-collapse-item-header {
                    background-color: #f7f7f7;
                    padding: 10px 20px;
                    cursor: pointer;
                    border-bottom: 1px solid #dcdee2;
                    line-height: 1em;
                    display: flex;
                    align-items: center;
                    align-content: center;
                }
                .ivy-collapse-item-body {
                    overflow: hidden;
                    transition: all 0.3s;
                    background-color: #fff;
                }
                .ivy-collapse-item-body-inner {
                    padding: 10px 20px;
                    box-sizing: border-box;
                }
                :host(:last-child) .ivy-collapse-item-header {
                    border-bottom: none;
                }
                :host([active]:last-child) .ivy-collapse-item-header {
                    border-bottom: 1px solid #dcdee2;
                }
                
            </style>
            <div class="ivy-collapse-item-header">
                <slot name="title" class="ivy-collapse-item-header-slot">${this.title}</slot>
            </div>
            <div class="ivy-collapse-item-body">
                <div class="ivy-collapse-item-body-inner">
                    <slot></slot>
                </div>
            </div>
        `;
        this._shadowRoot = this.attachShadow({
            mode: "open",
        });
        this._shadowRoot.appendChild(template.content.cloneNode(true));
        this.$title = this._shadowRoot.querySelector(".ivy-collapse-item-header");
        this.body = this._shadowRoot.querySelector(".ivy-collapse-item-body");
        this.bodyInner = this._shadowRoot.querySelector(".ivy-collapse-item-body-inner");
        this.headerSlot = this._shadowRoot.querySelector(".ivy-collapse-item-header-slot");
    }

    static get observedAttributes() {
        return ["title", "name", "active"];
    }

    get active() {
        return this.getAttribute("active");
    }
    set active(val) {
        this.setAttribute("active", val);
    }

    get title() {
        return this.getAttribute("title") || "";
    }
    set title(value) {
        this.setAttribute("title", value);
    }

    get name() {
        return this.getAttribute("name") || "";
    }

    connectedCallback() {
        this.height = getComputedStyle(this.bodyInner)["height"];
        this.$title.addEventListener("click", () => {
            if (this.active !== null) {
                this.removeAttribute("active");
                this.body.style.height = 0;
            } else {
                this.setAttribute("active", "");
                this.body.style.height = this.height;
            }
        });

        if (this.active === null) {
            this.body.style.height = 0;
        } else {
            this.body.style.height = getComputedStyle(this.bodyInner)["height"];
        }

        this.headerSlot.textContent = this.title;
    }
}

if (!customElements.get("ivy-collapse-item")) {
    customElements.define("ivy-collapse-item", CollapseItem);
}

class Drawer extends HTMLElement {
    constructor() {
        super();
        const template = document.createElement("template");

        template.innerHTML = `
            <style>
                :host {
                    position: fixed;
                    left: 0;
                    top: 0;
                    z-index: 8000;
                    width: 100%;
                    height: 100%;
                    display: none;
                    overflow: hidden;
                    transition: all 0.3s;
                }
                .ivy-mask {
                    position: absolute;
                    left: 0;
                    top: 0;
                    z-index: -1;
                    width: 100%;
                    height: 100%;
                    background-color: var(--mask-color, ${$_mask_color});
                }
                .ivy-drawer {
                    position: absolute;
                    right: 0;
                    top: 0;
                    z-index: 1;
                    height: 100%;
                    background-color: #ffffff;
                    display: flex;
                    flex-direction: column;
                    transition: transform 0.3s;
                    transform: translateX(${this.width}px)
                }
                .ivy-drawer-header {
                    padding: 12px 16px;
                    border-bottom: 1px solid var(--border-color, ${$_border_color_base});
                }
                :host([hide-title]) .ivy-drawer-header {
                    display: none;
                }
                .ivy-drawer-body {
                    padding: 16px;
                    flex: auto;
                }
            </style>
            <div class="ivy-mask"></div>
            <div class="ivy-drawer" style="width: ${this.width}px">
                <div class="ivy-drawer-header"><slot name="title">${this.title}</slot></div>
                <div class="ivy-drawer-body"><slot></slot></div>
            </div>
        `;
        this._shadowRoot = this.attachShadow({
            mode: "open",
        });
        this._shadowRoot.appendChild(template.content.cloneNode(true));
        this.mask = this._shadowRoot.querySelector(".ivy-mask");
        this.$title = this._shadowRoot.querySelector(".ivy-drawer-header");
        this.wrap = this._shadowRoot.querySelector(".ivy-drawer");

        this.mask.addEventListener("click", () => {
            if (this.maskClosable !== "false") {
                this.removeAttribute("show");
                new CustomEvent("close", { detail: { eventType: "maskClose" } });
            }
        });
        // document.body.appendChild(this);
    }
    static get observedAttributes() {
        return ["title", "width", "maskClosable", "show"];
    }

    get title() {
        return this.getAttribute("title") || "";
    }
    set title(value) {
        this.setAttribute("title", value);
    }

    get width() {
        return this.getAttribute("width") || "500";
    }
    get maskClosable() {
        return this.getAttribute("maskClosable");
    }
    set maskClosable(value) {
        this.setAttribute("maskClosable", value);
    }

    get show() {
        return this.getAttribute("show");
    }

    connectedCallback() {
        this.$title.textContent = this.title;
    }

    attributeChangedCallback(name, oldVal, newVal) {
        if (name === "show") {
            if (newVal === null) {
                this.wrap.style.transform = `translateX(${this.width}px)`;
                this.style.opacity = `0`;
                let timer = setTimeout(() => {
                    this.style.display = "none";
                    clearTimeout(timer);
                    timer = undefined;
                }, 300);
            } else {
                this.style.display = "block";
                this.style.opacity = `1`;
                setTimeout(() => {
                    this.wrap.style.transform = `translateX(0)`;
                }, 1);
            }
        }
    }
}

if (!customElements.get("ivy-drawer")) {
    customElements.define("ivy-drawer", Drawer);
}

class Message extends HTMLElement {
    constructor() {
        super();
        const template = document.createElement("template");
        template.innerHTML = `
            <style type="text/css">
                :host {
                    display: block;
                    pointer-events: all;
                    margin-top: 20px;
                    pointer-events: inherit;
                    height: 0;
                    transition: all 0.3s;
                }
                .ivy-message {
                    padding: 11px 30px;
                    position: relative;
                    display: inline-flex;
                    align-content: center;
                    align-items: center;
                    cursor: pointer;
                    box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
                    border-radius: 4px;
                    min-width: 200px;
                    background: #fff;
                    pointer-events: initial;
                    box-sizing: border-box;
                }
                .ivy-message-type {
                    position: absolute;
                    left: 8px;
                }
                .ivy-message-content {
                    line-height: 1em;
                }
            </style>
            <div class="ivy-message">
                <ivy-icon name="info" class="ivy-message-type"></ivy-icon>
                <div class="ivy-message-content"></div>
            </div>
        `;
        this._shadowRoot = this.attachShadow({
            mode: "open",
        });
        this._shadowRoot.appendChild(template.content.cloneNode(true));
        this.el = this._shadowRoot.querySelector(".ivy-message");
        this.wrap = this._shadowRoot.querySelector(".ivy-message-content");
    }
    static get observedAttributes() {
        return ["message", "show", "type"];
    }
    get message() {
        return this.getAttribute("message") || "";
    }
    get show() {
        return this.getAttribute("show");
    }

    set message(value) {
        this.setAttribute("message", value);
    }

    attributeChangedCallback(name, oldVal, val) {
        if (name === "message") {
            this.wrap.innerText = val;
        }
        if (name === "show") {
            if (val === null) {
                this.style.height = "0";
            } else {
                this.style.height = "36px";
            }
        }
    }
}

if (!customElements.get("ivy-message")) {
    customElements.define("ivy-message", Message);
    window.onload = function () {
        window.$ivy = {};
        window.$ivy.message = function (opt = {}) {
            const ivyBox = document.getElementById("ivy-message-box");
            if (ivyBox === null) {
                const parent = document.createElement("div");
                parent.id = "ivy-message-box";
                parent.style.position = "fixed";
                parent.style.top = "0";
                parent.style.left = "0";
                parent.style.zIndex = "1000";
                parent.style.width = "100vw";
                parent.style.pointerEvents = "none";
                parent.style.textAlign = "center";

                const instance = document.createElement("ivy-message");
                instance.message = opt.message || "";
                parent.appendChild(instance);
                instance.setAttribute("show", "");
                document.body.appendChild(parent);
                const timer = setTimeout(() => {
                    parent.removeChild(instance);
                    clearTimeout(timer);
                }, 180000);
            } else {
                const instance = document.createElement("ivy-message");
                instance.message = opt.message || "";
                ivyBox.appendChild(instance);
                instance.setAttribute("show", "");
                const timer = setTimeout(() => {
                    ivyBox.removeChild(instance);
                    clearTimeout(timer);
                }, 1800);
            }
        };
    };
}

/**
 * 向上查找指定的元素
 * @param {HTMLElement} self 起点
 * @param {String} nodeName 查找的元素名称
 * @returns {HTMLElement | null} 查找的结果
 */
function findElementUpward(self, nodeName) {
    let parent = self.parentNode;
    let name = parent.nodeName.toLowerCase();

    while (parent && (!name || nodeName !== name)) {
        parent = parent.parentNode;
        if (parent) {
            name = parent.nodeName.toLowerCase();
        }
    }
    return parent;
}

/**
 * 向下找到所有的指定组件
 * @param {HTMLElement} self 起点
 * @param {String} nodeName 查找的元素名称
 * @returns {HTMLCollection} 查找的结果
 */
const findElementsDownward = (self, nodeName) => {
    const children = self.children;
    return [...children].reduce((elements, child) => {
        if (child.nodeName.toLowerCase() === nodeName) {
            elements.push(child);
        }
        const foundChildren = findElementsDownward(child, nodeName);
        return elements.concat(foundChildren);
    }, []);
};

/**
 * 找到指定组件的兄弟组件
 * @param {HTMLElement} self 起点
 * @param {String} componentName 查找的元素名称
 * @param {Boolean} exceptMe 是否包含自身
 * @returns {HTMLCollection} 查找的结果
 */
const findBrothersElements = (self, nodeName, exceptMe = true) => {
    let res = [...self.parentElement.children];
    res = res.filter(item => {
        return item.nodeName.toLowerCase() === nodeName;
    });
    let index = res.findIndex(item => item._uid === self._uid);
    if (exceptMe) res.splice(index, 1);
    return res;
};

/**
 * 颜色叠加
 * @param {String} c1 颜色1-HEX格式
 * @param {String} c2 颜色2-HEX格式
 * @param {Number} ratio 小数-c1:所占比重；1-ratio:c2所占比重
 * @returns {String} HEX格式
 */
const colorBlend = (c1, c2, ratio) => {
    ratio = Math.max(Math.min(Number(ratio), 1), 0);
    const r1 = parseInt(c1.substring(1, 3), 16);
    const g1 = parseInt(c1.substring(3, 5), 16);
    const b1 = parseInt(c1.substring(5, 7), 16);
    const r2 = parseInt(c2.substring(1, 3), 16);
    const g2 = parseInt(c2.substring(3, 5), 16);
    const b2 = parseInt(c2.substring(5, 7), 16);
    let r = Math.round(r1 * ratio + r2 * (1 - ratio));
    let g = Math.round(g1 * ratio + g2 * (1 - ratio));
    let b = Math.round(b1 * ratio + b2 * (1 - ratio));
    r = "" + (r || 0).toString(16);
    g = "" + (g || 0).toString(16);
    b = "" + (b || 0).toString(16);
    return `#${r}${g}${b}`;
};

class Rate extends HTMLElement {
    constructor() {
        super();
        const template = document.createElement("template");
        template.innerHTML = `
            <style type="text/css">
                :host {
                    display: inline-block;
                }
                .ivy-rate {
                    display: flex;
                    align-items: center;
                    line-height: 1em;
                }
                .ivy-rate>ivy-icon {
                    transform: scale(1);
                    transition: transform 0.3s;
                    cursor: pointer;
                    box-sizing: border-box;
                }
                .ivy-rate>ivy-icon:hover {
                    transform: scale(1.2);
                }
                :host([disabled])>.ivy-rate>ivy-icon:hover {
                    transform: scale(1);
                    cursor: auto;
                }
            </style>
            <div class="ivy-rate">
                <ivy-icon name="${this.icon}" color="#eeeeee" size="${this.size}"></ivy-icon>
                <ivy-icon name="${this.icon}" color="#eeeeee" size="${this.size}"></ivy-icon>
                <ivy-icon name="${this.icon}" color="#eeeeee" size="${this.size}"></ivy-icon>
                <ivy-icon name="${this.icon}" color="#eeeeee" size="${this.size}"></ivy-icon>
                <ivy-icon name="${this.icon}" color="#eeeeee" size="${this.size}"></ivy-icon>
            </div>
        `;
        this._shadowRoot = this.attachShadow({
            mode: "open",
        });
        this._shadowRoot.appendChild(template.content.cloneNode(true));
        this.root = this._shadowRoot.querySelector(".ivy-rate");

        this.root.addEventListener("click", ev => {
            if (this.disabled !== null) return;
            const target = ev.target;
            const nodeName = target.nodeName.toLowerCase();
            const children = [...this.root.children];
            if (nodeName === "ivy-icon") {
                for (let i of children) {
                    i.setAttribute("color", this.color || $_color_primary);
                    if (target === i) {
                        this.value = children.indexOf(target) + 1;
                        this.dispatchEvent(new CustomEvent("change", { detail: this.value }));
                        break;
                    }
                }
            }
        });
        this.root.addEventListener(
            "mouseenter",
            ev => {
                if (this.disabled !== null) return;
                const target = ev.target;
                const nodeName = target.nodeName.toLowerCase();
                const children = [...this.root.children];
                if (nodeName === "ivy-icon") {
                    for (let i of children) {
                        i.setAttribute("color", this.color || $_color_primary);
                        if (target === i) {
                            break;
                        }
                    }
                }
            },
            true
        );
        this.root.addEventListener(
            "mouseleave",
            ev => {
                if (this.disabled !== null) return;
                const target = ev.target;
                const nodeName = target.nodeName.toLowerCase();
                const children = [...this.root.children];
                if (nodeName === "ivy-icon") {
                    for (let i in children) {
                        if (this.value <= i) {
                            children[i].setAttribute("color", "#eeeeee");
                        }
                    }
                }
            },
            true
        );
    }
    static get observedAttributes() {
        return ["size", "icon", "color", "value", "disabled"];
    }
    get size() {
        return this.getAttribute("size") || 20;
    }
    get icon() {
        return this.getAttribute("icon") || "star-on";
    }
    get color() {
        return this.getAttribute("color") || "";
    }
    get value() {
        return this.getAttribute("value") || "0";
    }
    get disabled() {
        return this.getAttribute("disabled");
    }

    set color(value) {
        this.setAttribute("color", value);
    }
    set value(value) {
        this.setAttribute("value", value);
    }
    set disabled(value) {
        this.setAttribute("disabled", value);
    }

    connectedCallback() {
        const children = findElementsDownward(this.root, "ivy-icon");
        [...children].map((ele, i) => {
            if (i < this.value) {
                ele.setAttribute("color", this.color || $_color_primary);
            }
        });
    }
    attributeChangedCallback(name, oldVal, newVal) {
        if (name === "value") {
            const children = findElementsDownward(this.root, "ivy-icon");
            [...children].map((ele, i) => {
                if (i < this.value) {
                    ele.setAttribute("color", this.color || $_color_primary);
                }
            });
        }
    }
}

if (!customElements.get("ivy-rate")) {
    customElements.define("ivy-rate", Rate);
}

class Tab extends HTMLElement {
    constructor() {
        super();
        const template = document.createElement("template");

        template.innerHTML = `
            <style>
                :host {
                    display: block;
                }
                .ivy-tab {}
                .ivy-tab-header {
                    margin-bottom: 15px;
                    display: flex;
                    position: relative;
                }
                .ivy-tab-header::after {
                    position: absolute;
                    left: 0;
                    bottom: 0;
                    content: "";
                    display: block;
                    width: 100%;
                    height: 1px;
                    background-color: var(--border-color, ${$_border_color_base});
                    z-index: -1;
                }
                .ivy-tab-header-arrow {
                    flex: 0 0 30px;
                    width: 30px;
                    align-content: center;
                    align-items: center;
                    justify-content: center;
                    cursor: pointer;
                    display: none;
                }
                .ivy-tab-header-arrow:hover ivy-icon[name="^arrow"] {
                    color: var(--color-primary, $_color_primary) !important;
                }
                .ivy-tab-wrap {
                    flex: 0 0 100%;
                    overflow: hidden;
                    display: inline-flex;
                }
                .ivy-tab-wrap-inner {
                    display: flex;
                    position: relative;
                    transition: left 0.3s;
                    left: 0;
                }
                .ivy-tab-wrap-item {
                    padding: 0 20px;
                    height: 40px;
                    box-sizing: border-box;
                    line-height: 40px;
                    display: inline-block;
                    list-style: none;
                    font-size: 14px;
                    font-weight: 500;
                    color: #303133;
                    position: relative;
                    cursor: pointer;
                    word-break: keep-all;
                }
                .ivy-tab-wrap-item-first {
                    padding-left: 0;
                }
                .ivy-tab-wrap-item-last {
                    padding-right: 0;
                }
                .ivy-tab-wrap-line {
                    position: absolute;
                    bottom: 0;
                    left: 0;
                    height: 1px;
                    background-color: var(--color-primary, ${$_color_primary});
                    transition: left 0.3s, width 0.3s;
                }
            </style>
            <div class="ivy-tab">
                <div class="ivy-tab-header">
                    <div class="ivy-tab-header-arrow ivy-tab-header-arrow-left">
                        <ivy-icon name="arrow-left"></ivy-icon>
                    </div>
                    <div class="ivy-tab-wrap">
                        <div class="ivy-tab-wrap-inner">
                            <div class="ivy-tab-wrap-line"></div>
                        </div>
                    </div>
                    <div class="ivy-tab-header-arrow ivy-tab-header-arrow-right">
                        <ivy-icon name="arrow-right"></ivy-icon>
                    </div>
                </div>
                <div>
                    <slot></slot>
                </div>
            </div>
        `;
        this._shadowRoot = this.attachShadow({
            mode: "open",
        });
        this._shadowRoot.appendChild(template.content.cloneNode(true));

        this.tableWrap = this._shadowRoot.querySelector(".ivy-tab-wrap");
        this.tableWrapInner = this._shadowRoot.querySelector(".ivy-tab-wrap-inner");
        this.arrowLeft = this._shadowRoot.querySelector(".ivy-tab-header-arrow-left");
        this.arrowRight = this._shadowRoot.querySelector(".ivy-tab-header-arrow-right");
        this.tableWrapLine = null;

        this.tableWrapInner.addEventListener("click", ev => {
            const target = ev.target;
            const classList = [...target.classList];

            const name = target.getAttribute("name");
            const children = [...this.children];
            if (classList.includes("ivy-tab-wrap-item")) {
                children.map(cur => {
                    if (cur.getAttribute("name") === name) {
                        cur.setAttribute("active", "");
                        this.active = name;
                    } else {
                        cur.removeAttribute("active");
                    }
                });
            }
            // this.dispatchEvent(new CustomEvent("change", { detail: name }));
            const width = getComputedStyle(target)["width"];
            const paddingLeft = getComputedStyle(target)["paddingLeft"];
            const paddingRight = getComputedStyle(target)["paddingRight"];
            const lastWidth = parseFloat(width) - parseFloat(paddingLeft) - parseFloat(paddingRight);
            const offset = target.offsetLeft;
            this.tableWrapLine.style.width = `${lastWidth}px`;
            this.tableWrapLine.style.left = `${offset + parseFloat(paddingLeft)}px`;
        });

        this.arrowLeft.addEventListener("click", ev => {
            const left = getComputedStyle(this.tableWrapInner)["left"];
            const leftN = parseFloat(left);
            if (leftN < -60) {
                this.tableWrapInner.style.left = `${leftN + 60}px`;
            } else {
                this.tableWrapInner.style.left = 0;
            }
        });
        this.arrowRight.addEventListener("click", ev => {
            const innerStyle = getComputedStyle(this.tableWrapInner);
            const left = innerStyle["left"];
            const width = innerStyle["width"];
            const leftN = parseFloat(left);
            const widthN = parseFloat(width);
            const wrapWidth = parseFloat(getComputedStyle(this.tableWrap)["width"]);
            if (wrapWidth - leftN < widthN - 60) {
                this.tableWrapInner.style.left = `${leftN - 60}px`;
            } else {
                this.tableWrapInner.style.left = `-${widthN - wrapWidth}px`;
            }
        });
    }
    static get observedAttributes() {
        return ["active"];
    }

    get active() {
        return this.getAttribute("active");
    }

    set active(value) {
        this.setAttribute("active", value);
    }

    createTabHeader(i, len = 0) {
        const element = document.createElement("div");

        if (i === 0) {
            div.setAttribute("class", "ivy-tab-wrap-item ivy-tab-wrap-item-first");
        } else if (i === len) {
            div.setAttribute("class", "ivy-tab-wrap-item ivy-tab-wrap-item-last");
        } else {
            div.setAttribute("class", "ivy-tab-wrap-item");
        }
        return element;
    }

    connectedCallback() {
        const titles = ['<div class="ivy-tab-wrap-line"></div>'];
        const children = [...this.children];
        children.map((ele, i) => {
            const key = ele.getAttribute("name");
            if (i === 0) {
                if (this.active === null) {
                    if (key === null) {
                        ele.setAttribute("name", String(i));
                        this.active = "0";
                    } else {
                        this.active = key;
                    }
                    ele.setAttribute("active", "");
                } else {
                    if (key === null) {
                        ele.setAttribute("name", String(i));
                        if (this.active === String(i)) {
                            ele.setAttribute("active", "");
                        }
                    } else {
                        if (key === this.active) {
                            ele.setAttribute("active", "");
                        }
                    }
                }
            } else {
                if (key === null) {
                    ele.setAttribute("name", String(i));
                    if (this.active === String(i)) {
                        ele.setAttribute("active", "");
                    }
                } else {
                    if (key === this.active) {
                        ele.setAttribute("active", "");
                    }
                }
            }

            titles.push(
                `<div class="ivy-tab-wrap-item ${i === 0 ? "ivy-tab-wrap-item-first" : ""} ${
                    i === children.length - 1 ? "ivy-tab-wrap-item-last" : ""
                }" name="${ele.getAttribute("name")}">${ele.getAttribute("title")}</div>`
            );
        });
        this.tableWrapInner.innerHTML = titles.join("");

        this.tableWrapLine = this._shadowRoot.querySelector(".ivy-tab-wrap-line");

        const tableWrapInnerWidth = getComputedStyle(this.tableWrapInner)["width"];
        const tableWrapWidth = getComputedStyle(this.tableWrap)["width"];

        if (parseFloat(tableWrapWidth) < parseFloat(tableWrapInnerWidth)) {
            this.tableWrap.style.flex = "0 0 calc(100% - 60px)";
            this._shadowRoot.querySelector(".ivy-tab-header-arrow-left").style.display = "inline-flex";
            this._shadowRoot.querySelector(".ivy-tab-header-arrow-right").style.display = "inline-flex";
        }

        let headers = [...this.tableWrapInner.children];
        headers = headers.map(v => {
            const flag = v.getAttribute("name") === this.active;
            if (flag) {
                const style = getComputedStyle(v);
                const width = style["width"];
                const offset = v.offsetLeft;
                const paddingLeft = style["paddingLeft"];
                const paddingRight = style["paddingRight"];
                const lastWidth = parseFloat(width) - parseFloat(paddingLeft) - parseFloat(paddingRight);
                this.tableWrapLine.style.width = `${lastWidth}px`;
                this.tableWrapLine.style.left = `${offset + parseFloat(paddingLeft)}px`;
            }
        });
    }

    attributeChangedCallback(attr, oldVal, val) {
        if (attr === "active") {
            const children = [...this.children];
            const headerList = [...this.tableWrapInner.children].filter(item => {
                const classList = [...item.classList];
                return classList.includes("ivy-tab-wrap-item");
            });
            children.map(cur => {
                if (cur.getAttribute("name") === val) {
                    cur.setAttribute("active", "");
                } else {
                    cur.removeAttribute("active");
                }
            });

            headerList.map(cur => {
                const name = cur.getAttribute("name");
                if (val === name) {
                    const width = getComputedStyle(cur)["width"];
                    const paddingLeft = getComputedStyle(cur)["paddingLeft"];
                    const paddingRight = getComputedStyle(cur)["paddingRight"];
                    const lastWidth = parseFloat(width) - parseFloat(paddingLeft) - parseFloat(paddingRight);
                    const offset = cur.offsetLeft;
                    this.tableWrapLine.style.width = `${lastWidth}px`;
                    this.tableWrapLine.style.left = `${offset + parseFloat(paddingLeft)}px`;
                }
            });

            this.dispatchEvent(new CustomEvent("change", { detail: val }));
        }
    }
}

if (!customElements.get("ivy-tab")) {
    customElements.define("ivy-tab", Tab);
}

class TabPane extends HTMLElement {
    constructor() {
        super();
        const template = document.createElement("template");

        template.innerHTML = `
            <style>
                :host {
                    display: none;
                }
                :host([active]) {
                    display: block;
                }
            </style>
            <div>
                <slot></slot>
            </div>
        `;
        this._shadowRoot = this.attachShadow({
            mode: "open",
        });
        this._shadowRoot.appendChild(template.content.cloneNode(true));
    }

    static get observedAttributes() {
        return ["title", "name", "active"];
    }

    get title() {
        return this.getAttribute("title") || "";
    }

    get name() {
        return this.getAttribute("name");
    }

    get active() {
        return this.getAttribute("active");
    }

    set title(value) {
        this.setAttribute("title", value);
    }

    set name(value) {
        this.setAttribute("name", value);
    }

    set active(value) {
        this.setAttribute("active", value);
    }

    connectedCallback() {}

    attributeChangedCallback(attr, oldVal, val) {}
}

if (!customElements.get("ivy-tab-pane")) {
    customElements.define("ivy-tab-pane", TabPane);
}

class Image extends HTMLElement {
    constructor() {
        super();
        const template = document.createElement("template");
        template.innerHTML = `
            <style type="text/css">
                :host {
                    display: inline-block;
                }
                .ivy-image {
                    display: block;
                    box-sizing: border-box;
                    position: relative;
                    overflow: hidden;
                    width: 100%;
                    height: 100%;
                }
                .ivy-image-inner {
                    display: block;
                    vertical-align: top;
                    width: 100%;
                    height: 100%;
                    display: none;
                    background-color: white;
                }
                .ivy-image-error,
                .ivy-image-placeholder {
                    width: 100%;
                    height: 100%;
                    position: absolute;
                    top: 0;
                    left: 0;
                    transition: all 0.3s;
                    z-index: -1;
                    background: #f5f7fa;
                }
                .ivy-image-placeholder {
                    z-index: 1;
                    opacity: 1;
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    font-size: 14px;
                    color: #c0c4cc;
                    vertical-align: middle;
                }
                .ivy-image-error {
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    font-size: 14px;
                    color: #c0c4cc;
                    vertical-align: middle;
                }
            </style>
            <div class="ivy-image">
                <img src="${this.src}" class="ivy-image-inner" />
                <div class="ivy-image-error">
                    <slot name="error">加载失败</slot>
                </div>
                <div class="ivy-image-placeholder">
                    <slot name="placeholder">
                        <ivy-icon name="loading" spin size="28"></ivy-icon>
                    </slot>
                </div>
            </div>
        `;
        this._shadowRoot = this.attachShadow({
            mode: "open",
        });
        this._shadowRoot.appendChild(template.content.cloneNode(true));
        this.root = this._shadowRoot.querySelector(".ivy-image");
        this.image = this._shadowRoot.querySelector(".ivy-image-inner");
        this.loadEle = this._shadowRoot.querySelector(".ivy-image-placeholder");
        this.errEle = this._shadowRoot.querySelector(".ivy-image-error");

        this.image.addEventListener("error", () => {
            this.loadEle.style.opacity = 0;
            this.loadEle.style.zIndex = -1;
            this.errEle.style.zIndex = 1;
            this.errEle.style.opacity = 1;
        });
        this.image.addEventListener("load", () => {
            this.image.style.display = "block";
            this.loadEle.style.opacity = 0;
            this.loadEle.style.zIndex = -1;
        });
    }
    static get observedAttributes() {
        return ["fit", "src"];
    }
    get fit() {
        return this.getAttribute("fit");
    }
    get src() {
        return this.getAttribute("src");
    }

    set src(value) {
        this.setAttribute("src", value);
    }
    set fit(value) {
        this.setAttribute("fit", value);
    }

    connectedCallback() {
        if (this.fit !== null) {
            this.image.style.objectFit = this.fit;
        }
    }
    attributeChangedCallback(name, oldVal, newVal) {
        if (name === "fit") {
            this.image.style.objectFit = newVal;
        }
        if (name === "src") {
            this.image.src = newVal;
        }
    }
}

if (!customElements.get("ivy-image")) {
    customElements.define("ivy-image", Image);
}

class Tooltip extends HTMLElement {
    constructor() {
        super();
        const template = document.createElement("template");

        template.innerHTML = `
            <style>
                :host {
                    display: inline-block;
                }
                .ivy-tooltip {
                    position: relative;
                }
                .ivy-tooltip-ref {
                    display: inline-flex;
                }
                .ivy-tooltip-content {
                    display: none;
                    position: absolute;
                    transition: opacity 0.3s;
                    opacity: 0;
                    z-index: 10;
                }
                .ivy-tooltip-arrow {
                    position: absolute;
                    width: 8px;
                    height: 8px;
                }
                .ivy-tooltip-arrow::before,
                .ivy-tooltip-arrow::after {
                    content: "";
                    display: block;
                    position: absolute;
                    height: 0;
                    width: 0;
                    border: 6px solid transparent;
                }
                .ivy-tooltip-arrow::after {
                    border-width: 5px;
                }
                
                .ivy-tooltip-text {
                    padding: 8px 14px;
                    word-break: keep-all;
                    white-space: nowrap;
                    border: 1px solid var(--border-color, ${$_border_color_base});
                    border-radius: var(--border-radius, ${$_border_radius});
                    background-color: #fff;
                }

                :host([placement|="top"]) .ivy-tooltip-content {
                    bottom: calc(100% + 8px);
                }
                :host([placement|="top"]) .ivy-tooltip-arrow {
                    bottom: 0;
                    left: 50%;
                    margin-left: -6px;
                }
                :host([placement|="top"]) .ivy-tooltip-arrow::before {
                    top: 7px;
                    border-top-color: var(--border-color, ${$_border_color_base});
                }
                :host([placement|="top"]) .ivy-tooltip-arrow::after {
                    left: 1px;
                    top: 7px;
                    border-top-color: #ffffff;
                }

                
                :host([theme="dark"][placement|="top"]) .ivy-tooltip-arrow::before {
                    border-top-color: rgb(70, 76, 91);
                }
                :host([theme="dark"][placement|="top"]) .ivy-tooltip-arrow::after {
                    border-top-color: rgb(70, 76, 91);
                }
                :host([theme="dark"][placement|="top"]) .ivy-tooltip-text {
                    border: 1px solid rgb(70, 76, 91);
                    background-color: rgb(70, 76, 91);
                    color: white;
                }

                :host([placement|="bottom"]) .ivy-tooltip-content {
                    top: calc(100% + 8px);
                }
                :host([placement|="bottom"]) .ivy-tooltip-arrow {
                    top: -4px;
                    left: 50%;
                    margin-left: -6px;
                }
                :host([placement|="bottom"]) .ivy-tooltip-arrow::before {
                    top: -7px;
                    border-color: transparent transparent var(--border-color, ${$_border_color_base}) transparent;
                }
                :host([placement|="bottom"]) .ivy-tooltip-arrow::after {
                    left: 1px;
                    top: -5px;
                    border-color: transparent transparent #ffffff transparent;
                }
                :host([theme="dark"][placement|="bottom"]) .ivy-tooltip-arrow::before {
                    border-bottom-color: rgb(70, 76, 91);
                }
                :host([theme="dark"][placement|="bottom"]) .ivy-tooltip-arrow::after {
                    border-bottom-color: rgb(70, 76, 91);
                }
                :host([theme="dark"][placement|="bottom"]) .ivy-tooltip-text {
                    border: 1px solid rgb(70, 76, 91);
                    background-color: rgb(70, 76, 91);
                    color: white;
                }

                :host([placement$="-left"]) .ivy-tooltip-arrow {
                    left: 20px;
                }
                :host([placement$="-right"]) .ivy-tooltip-arrow {
                    left: calc(100% - 20px);
                }

                :host([placement|="left"]) .ivy-tooltip-content {
                    right: calc(100% + 8px);
                }
                :host([placement|="left"]) .ivy-tooltip-arrow {
                    right: -4px;
                    top: 50%;
                    margin-top: -6px;
                }
                :host([placement|="left"]) .ivy-tooltip-arrow::before {
                    right: -7px;
                    border-color: transparent transparent transparent var(--border-color, ${$_border_color_base});
                }
                :host([placement|="left"]) .ivy-tooltip-arrow::after {
                    top: 1px;
                    right: -5px;
                    border-color: transparent transparent transparent #ffffff;
                }
                :host([theme="dark"][placement|="left"]) .ivy-tooltip-arrow::before {
                    border-left-color: rgb(70, 76, 91);
                }
                :host([theme="dark"][placement|="left"]) .ivy-tooltip-arrow::after {
                    border-left-color: rgb(70, 76, 91);
                }
                :host([theme="dark"][placement|="left"]) .ivy-tooltip-text {
                    border: 1px solid rgb(70, 76, 91);
                    background-color: rgb(70, 76, 91);
                    color: white;
                }

                :host([placement|="right"]) .ivy-tooltip-content {
                    left: calc(100% + 8px);
                }
                :host([placement|="right"]) .ivy-tooltip-arrow {
                    left: -4px;
                    top: 50%;
                    margin-top: -6px;
                }
                :host([placement|="right"]) .ivy-tooltip-arrow::before {
                    left: -7px;
                    border-color: transparent var(--border-color, ${$_border_color_base}) transparent transparent;
                }
                :host([placement|="right"]) .ivy-tooltip-arrow::after {
                    top: 1px;
                    left: -5px;
                    border-color: transparent #ffffff transparent transparent;
                }


                :host([placement$="-top"]) .ivy-tooltip-arrow {
                    top: 12px;
                }
                :host([placement$="-bottom"]) .ivy-tooltip-arrow {
                    top: calc(100% - 12px);
                }
                :host([theme="dark"][placement|="right"]) .ivy-tooltip-arrow::before {
                    border-right-color: rgb(70, 76, 91);
                }
                :host([theme="dark"][placement|="right"]) .ivy-tooltip-arrow::after {
                    border-right-color: rgb(70, 76, 91);
                }
                :host([theme="dark"][placement|="right"]) .ivy-tooltip-text {
                    border: 1px solid rgb(70, 76, 91);
                    background-color: rgb(70, 76, 91);
                    color: white;
                }
            </style>
            
            <div class="ivy-tooltip">
                <div class="ivy-tooltip-ref"><slot></slot></div>
                <div class="ivy-tooltip-content">
                    <div class="ivy-tooltip-arrow"></div>
                    <div class="ivy-tooltip-text"><slot name="content" class="ivy-tooltip-content-slot">${this.content}</slot></div>
                </span>
            </div>
        `;
        this._shadowRoot = this.attachShadow({
            mode: "open",
        });
        this._shadowRoot.appendChild(template.content.cloneNode(true));
        this.root = this._shadowRoot.querySelector(".ivy-tooltip");
        this.ref = this._shadowRoot.querySelector(".ivy-tooltip-ref");
        this.ctx = this._shadowRoot.querySelector(".ivy-tooltip-content");
        this.contentSlot = this._shadowRoot.querySelector(".ivy-tooltip-content-slot");

        this.timer = null;

        this.ref.addEventListener(
            "mouseover",
            ev => {
                clearTimeout(this.timer);
                this.ctx.style.display = "block";
                const sliderStyle = getComputedStyle(this.ctx);
                const placement = this.placement;

                if (/^(top|bottom)/.test(placement)) {
                    const width = getComputedStyle(ev.target)["width"];
                    const sliderWidth = sliderStyle["width"];
                    if (/-left$/.test(placement)) {
                        this.ctx.style.left = 0;
                    } else if (/-right$/.test(placement)) {
                        this.ctx.style.right = 0;
                    } else {
                        this.ctx.style.left = -(parseFloat(sliderWidth) - parseFloat(width)) / 2 + "px";
                    }
                } else {
                    const height = getComputedStyle(ev.target)["height"];
                    const sliderHeight = sliderStyle["height"];
                    if (/-top$/.test(placement)) {
                        this.ctx.style.top = 0;
                    } else if (/-bottom$/.test(placement)) {
                        this.ctx.style.bottom = 0;
                    } else {
                        this.ctx.style.top = -(parseFloat(sliderHeight) - parseFloat(height)) / 2 + "px";
                    }
                }

                this.ctx.style.opacity = "1";
            },
            true
        );
        this.ref.addEventListener("mouseleave", () => {
            this.ctx.style.opacity = "0";
            this.timer = setTimeout(() => {
                this.ctx.style.display = "none";
                clearTimeout(this.timer);
            }, 300);
        });
    }

    static get observedAttributes() {
        return ["content", "dark", "placement"];
    }

    get content() {
        return this.getAttribute("content");
    }
    get dark() {
        return this.getAttribute("dark");
    }
    get placement() {
        return this.getAttribute("placement");
    }

    set content(value) {
        this.setAttribute("content", value);
    }
    set dark(value) {
        this.setAttribute("dark", value);
    }
    set placement(value) {
        this.setAttribute("placement", value);
    }

    connectedCallback() {
        if (this.placement === null) {
            this.placement = "top";
        }
        this.contentSlot.textContent = this.content;
    }

    attributeChangedCallback(attr, oldVal, val) {}
}

if (!customElements.get("ivy-tooltip")) {
    customElements.define("ivy-tooltip", Tooltip);
}

class Table extends HTMLElement {
    constructor() {
        super();
        const template = document.createElement("template");

        template.innerHTML = `
            <style>
                :host {
                    display: flex;
                }
                .ivy-table {
                    position: relative;
                }
                .ivy-table-header,
                .ivy-table-body {
                    width: 100%;
                }
                .ivy-table-loading {
                    position: absolute;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    display: none;
                    opacity: 1;
                    transition: opacity 0.3s;
                    background-color: hsla(0, 0%, 100%, 0.9);
                    justify-content: center;
                    align-items: center;
                }
                .ivy-table-column-cell .ivy-cell {
                    box-sizing: border-box;
                    padding-left: 10px;
                    padding-right: 10px;
                }
                .ivy-table td {
                    padding: 8px 0;
                    min-width: 0;
                    box-sizing: border-box;
                    text-overflow: ellipsis;
                    vertical-align: middle;
                    text-align: left;
                }
                .ivy-table-body .ivy-table-column-cell {
                    border-top: 1px solid var(--border-color, ${$_border_color_base});
                }
                table {
                    border-collapse: collapse;
                }
                :host([loading]) .ivy-table-loading {
                    display: flex;
                }
            </style>
            <div class="ivy-table">
                <table class="ivy-table-header">
                    <tbody class="ivy-table-header-inner">
                        
                    </tbody>
                </table>
                <table class="ivy-table-body">
                    <tbody class="ivy-table-body-inner">
                        <slot></slot>
                    </tbody>
                </table>
                <div class="ivy-table-loading">
                    <slot name="loading">
                        <ivy-icon name="loading" size="18" color="gray" spin></ivy-icon>
                    </slot>
                </div>
            </div>
        `;
        this._shadowRoot = this.attachShadow({
            mode: "open",
        });
        this._shadowRoot.appendChild(template.content.cloneNode(true));
        this.table = this._shadowRoot.querySelector(".ivy-table");
        this.tableHeader = this._shadowRoot.querySelector(".ivy-table-header");
        this.tableHeaderInner = this._shadowRoot.querySelector(".ivy-table-header-inner");
        this.tableBody = this._shadowRoot.querySelector(".ivy-table-body");
        this.tableBodyInner = this._shadowRoot.querySelector(".ivy-table-body-inner");

        this.columns = [];
    }
    static get observedAttributes() {
        return ["data-source", "border", "loading"];
    }

    get dataSource() {
        return this.getAttribute("data-source");
    }
    get border() {
        return this.getAttribute("border");
    }
    get loading() {
        return this.getAttribute("loading");
    }

    set dataSource(value) {
        this.setAttribute("data-source", value);
    }
    set border(value) {
        this.setAttribute("border", value);
    }
    set loading(value) {
        this.setAttribute("loading", value);
    }

    renderHeader(label, i) {
        return `<td class="ivy-table-column-${i} ivy-table-column-cell  ivy-table-column-cell-header"><div class="ivy-cell">${label}</div></td>`;
    }

    renderCol(width, i) {
        return `<col width='${width}' class="ivy-table-column-${i}">`;
    }

    renderBody(data, columns) {
        return data.map(cur => {
            const trInner = columns
                .map((item, i) => {
                    return `<td class="ivy-table-column-${i} ivy-table-column-cell"><div class="ivy-cell">${
                        cur[item.prop] || ""
                    }</div></td>`;
                })
                .join("");

            return `<tr>${trInner}</tr>`;
        });
    }

    connectedCallback() {
        const children = [...this.children];

        const tableStyle = getComputedStyle(this);
        const tableWidth = tableStyle["width"];
        this.tableHeader.style.width = tableWidth;
        this.tableBody.style.width = tableWidth;

        let fixWidth = 0;
        let minWidth = 0;
        let autoWidthCount = 0;

        let columns = children.map(cur => {
            const width = cur.getAttribute("width");
            const minWidths = cur.getAttribute("minWidth");
            if (width !== null) {
                fixWidth += parseFloat(width);
            } else {
                autoWidthCount++;
                if (minWidths !== null) {
                    minWidth += parseFloat(minWidths);
                }
            }

            return {
                prop: cur.getAttribute("prop"),
                label: cur.getAttribute("label"),
                width: width,
                minWidth: cur.getAttribute("minWidth"),
            };
        });
        this.columns = columns;

        const tableWidthMin = parseFloat(tableWidth) - fixWidth;

        let header = [];
        let colgroup = [];

        columns.map((cur, i) => {
            header.push(this.renderHeader(cur.label, i));
            let width = 0;
            if (cur.width !== null) {
                width = parseFloat(cur.width);
            } else {
                if (cur.minWidth !== null) {
                    width = (parseFloat(cur.minWidth) / minWidth) * tableWidthMin;
                } else {
                    width = tableWidthMin / autoWidthCount;
                }
            }

            colgroup.push(this.renderCol(width, i));
        });

        const colgroupEle = document.createElement("colgroup");
        const colgroupEleClone = document.createElement("colgroup");
        colgroupEle.innerHTML = colgroup.join("");
        colgroupEleClone.innerHTML = colgroup.join("");
        this.tableHeader.insertBefore(colgroupEle, this.tableHeaderInner);
        this.tableBody.insertBefore(colgroupEleClone, this.tableBodyInner);
        this.tableHeaderInner.innerHTML = `<tr>${header.join("")}</tr>`;

        if (this.dataSource === null) {
            this.dataSource = [];
        } else {
            try {
                const tableBody = this.renderBody(JSON.parse(this.dataSource), columns);
                this.tableBodyInner.innerHTML = tableBody.join("");
            } catch (error) {
                throw "ivy-table组件的data-source属性必须是JSON字符串";
            }
        }
    }

    attributeChangedCallback(attr, oldVal, val) {
        if (attr === "data-source") {
            try {
                const data = JSON.parse(val);
                const tableBody = this.renderBody(data, this.columns);
                this.tableBodyInner.innerHTML = tableBody.join("");
            } catch (error) {
                throw "ivy-table组件的data-source属性必须是JSON字符串";
            }
        }
    }
}

if (!customElements.get("ivy-table")) {
    customElements.define("ivy-table", Table);
}

class TableColumn extends HTMLElement {
    constructor() {
        super();
        const template = document.createElement("template");

        template.innerHTML = `
            <style>
                :host {}
            </style>
            <div>
                <slot></slot>
            </div>
        `;
        this._shadowRoot = this.attachShadow({
            mode: "open",
        });
        this._shadowRoot.appendChild(template.content.cloneNode(true));
    }

    static get observedAttributes() {
        return ["prop", "label", "width", "minWidth"];
    }

    get prop() {
        return this.getAttribute("prop");
    }
    get label() {
        return this.getAttribute("label");
    }
    get width() {
        return this.getAttribute("width");
    }
    get minWidth() {
        return this.getAttribute("minWidth");
    }

    set prop(value) {
        this.setAttribute("prop", value);
    }
    set label(value) {
        this.setAttribute("label", value);
    }
    set width(value) {
        this.setAttribute("width", value);
    }
    set minWidth(value) {
        this.setAttribute("minWidth", value);
    }
}

if (!customElements.get("ivy-table-column")) {
    customElements.define("ivy-table-column", TableColumn);
}

class Form extends HTMLElement {
    constructor() {
        super();
        const template = document.createElement("template");

        template.innerHTML = `
            <style>
                :host {
                    display: flex;
                }
                
            </style>
            <form>
                <slot></slot>
            </form>
        `;
        this._shadowRoot = this.attachShadow({
            mode: "open",
        });
        this._shadowRoot.appendChild(template.content.cloneNode(true));
        this.tableHeader = this._shadowRoot.querySelector(".ivy-table-header");
        this.tableHeaderInner = this._shadowRoot.querySelector(".ivy-table-header-inner");
        this.tableBody = this._shadowRoot.querySelector(".ivy-table-body");
        this.tableBodyInner = this._shadowRoot.querySelector(".ivy-table-body-inner");

        this.columns = [];
    }
    static get observedAttributes() {
        return ["dataSource", "border"];
    }

    get dataSource() {
        return this.getAttribute("dataSource");
    }
    get border() {
        return this.getAttribute("border");
    }

    set dataSource(value) {
        this.setAttribute("dataSource", value);
    }
    set border(value) {
        this.setAttribute("border", value);
    }

    validate(cb) {
        const ivyFormItem = findElementsDownward(this, "ivy-form-item");
        const flag = ivyFormItem.every(item => {
            if (item.validator || item.message) {
                return item.status !== "error";
            } else {
                return true;
            }
        });
        cb(flag);
    }

    connectedCallback() {}

    attributeChangedCallback(attr, oldVal, val) {}
}

if (!customElements.get("ivy-form")) {
    customElements.define("ivy-form", Form);
}

class FormItem extends HTMLElement {
    constructor() {
        super();
        const template = document.createElement("template");

        template.innerHTML = `
            <style>
                :host {
                    display: block;
                }
                .ivy-form-item {
                    display: block;
                    position: relative;
                    margin-bottom: 20px;
                }
                .ivy-form-item-msg {
                    position: absolute;
                    left: 
                    bottom: -20px;
                    font-size: 12px;
                    line-height: 20px;
                    width: 100%;
                }
                .ivy-form-item-inner {
                    display: flex;
                    align-items: center;
                }
                .ivy-form-item-label {
                    margin-right: 10px;
                }
            </style>
            <div class="ivy-form-item">
                <div class="ivy-form-item-inner">
                    <div class="ivy-form-item-label">${this.label}</div>
                    <div>
                        <slot></slot>
                    </div>
                </div>
                <div class="ivy-form-item-msg">
                    这里是错误信息
                </div>
            </div>
        `;
        this._shadowRoot = this.attachShadow({
            mode: "open",
        });
        this._shadowRoot.appendChild(template.content.cloneNode(true));

        this.msg = this._shadowRoot.querySelector(".ivy-form-item-msg");
    }

    static get observedAttributes() {
        return ["rule", "label", "required", "message", "validator", "event", "status"];
    }

    get prop() {
        return this.getAttribute("prop");
    }
    get label() {
        return this.getAttribute("label");
    }
    get required() {
        return this.getAttribute("required");
    }
    get required() {
        return this.getAttribute("required");
    }
    get message() {
        return this.getAttribute("message");
    }
    get validator() {
        return this.getAttribute("validator");
    }
    get event() {
        return this.getAttribute("event");
    }
    get status() {
        return this.getAttribute("status");
    }

    set prop(value) {
        this.setAttribute("prop", value);
    }
    set label(value) {
        this.setAttribute("label", value);
    }
    set required(value) {
        this.setAttribute("required", value);
    }
    set message(value) {
        this.setAttribute("message", value);
    }
    set validator(value) {
        this.setAttribute("validator", value);
    }
    set event(value) {
        this.setAttribute("event", value);
    }
    set status(value) {
        this.setAttribute("status", value);
    }

    connectedCallback() {}

    attributeChangedCallback(attr, oldVal, val) {
        if (attr === "status") {
            if (val === "error") {
                this.msg.style.display = "block";
            } else {
                this.msg.style.display = "none";
            }
        }
    }
}

if (!customElements.get("ivy-form-item")) {
    customElements.define("ivy-form-item", FormItem);
}

class Input extends HTMLElement {
    constructor() {
        super();
        const template = document.createElement("template");

        template.innerHTML = `
            <style>
                :host {
                    display: block;
                }
                .ivy-input {
                    position: relative;
                }
                .ivy-input-inner {
                    background-color: #fff;
                    background-image: none;
                    border-radius: var(--border-radius, ${$_border_radius});
                    border: 1px solid #dcdfe6;
                    box-sizing: border-box;
                    color: #606266;
                    display: inline-block;
                    font-size: inherit;
                    height: 34px;
                    line-height: 34px;
                    outline: none;
                    padding: 0 15px;
                    transition: border-color 0.2s cubic-bezier(0.645, 0.045, 0.355,1);
                    width: 100%;
                }
                .ivy-input-inner::-webkit-input-placeholder {
                    color: #C0C4CC;
                    font-size: 14px;
                }
                .ivy-input-inner::-moz-input-placeholder {
                    color: #C0C4CC;
                    font-size: 14px;
                }
                .ivy-input-inner:-moz-input-placeholder {
                    color: #C0C4CC;
                    font-size: 14px;
                }
                .ivy-input-inner:-ms-input-placeholder {
                    color: #C0C4CC;
                    font-size: 14px;
                }
                .ivy-input-inner:active,
                .ivy-input-inner:hover,
                .ivy-input-inner:focus {
                    border-color: var(--color-primary, ${$_color_primary});
                }
                :host([disabled]) {
                    cursor: not-allowed;
                }
                :host([disabled]) .ivy-input-inner {
                    background-color: #f5f7fa;
                    border-color: #e4e7ed;
                    color: #c0c4cc;
                    cursor: not-allowed;
                }
                :host([readonly]) {
                    cursor: not-allowed;
                }
                .ivy-input-icon {
                    display: none;
                    position: absolute;
                    right: 0;
                    height: 100%;
                    width: 30px;
                    align-items: center;
                    justify-content: center;
                    pointer-events: none;
                }
                .ivy-input .ivy-input-icon-prefix {
                    left: 0;
                }
            </style>
            <div class="ivy-input">
                <span class="ivy-input-icon ivy-input-icon-prefix">
                    <ivy-icon name="loading" color="#c0c4cc"></ivy-icon>
                </span>
                <input class="ivy-input-inner" />
                <span class="ivy-input-icon ivy-input-icon-suffix">
                    <ivy-icon name="reading" color="#c0c4cc"></ivy-icon>
                </span>
            </div>
            
        `;
        this._shadowRoot = this.attachShadow({
            mode: "open",
        });
        this._shadowRoot.appendChild(template.content.cloneNode(true));

        this.inputInner = this._shadowRoot.querySelector(".ivy-input-inner");
        this.preIcon = this._shadowRoot.querySelector(".ivy-input-icon-prefix");
        this.preIconInner = this._shadowRoot.querySelector(".ivy-input-icon-prefix ivy-icon");
        this.sufIcon = this._shadowRoot.querySelector(".ivy-input-icon-suffix");
        this.sufIconInner = this._shadowRoot.querySelector(".ivy-input-icon-suffix ivy-icon");

        this.inputInner.addEventListener("change", ev => {
            const target = ev.target;
            const value = target.value;
            const ivyFormItem = findElementUpward(this, "ivy-form-item");
            if (ivyFormItem !== null) {
                const validator = ivyFormItem.validator;
                if (validator === null) {
                    const message = ivyFormItem.message;
                    if (message !== null) {
                        if (value === null || value === "") {
                            ivyFormItem.status = "error";
                            this.status = "error";
                        }
                    }
                }
            }
            this.value = value;
            this.dispatchEvent(new CustomEvent("change", { detail: value }));
        });

        this.inputInner.addEventListener("focus", () => {
            this.focus = "";
            this.dispatchEvent(new CustomEvent("focus"));
        });
        this.inputInner.addEventListener("blur", () => {
            this.dispatchEvent(new CustomEvent("blur"));
        });
        this.inputInner.addEventListener("input", ev => {
            const target = ev.target;
            const value = target.value;
            this.value = value;
            this.dispatchEvent(new CustomEvent("change", { detail: value }));
        });
    }

    static get observedAttributes() {
        return ["status", "value", "disabled", "readonly", "focus", "prefix-icon", "suffix-icon", "placeholder"];
    }

    get status() {
        return this.getAttribute("status");
    }
    get value() {
        return this.getAttribute("value");
    }
    get disabled() {
        return this.getAttribute("disabled");
    }
    get readonly() {
        return this.getAttribute("readonly");
    }
    get focus() {
        return this.getAttribute("focus");
    }
    get prefixIcon() {
        return this.getAttribute("prefix-icon");
    }
    get suffixIcon() {
        return this.getAttribute("suffix-icon");
    }
    get placeholder() {
        return this.getAttribute("placeholder");
    }

    set status(value) {
        this.setAttribute("status", value);
    }
    set value(value) {
        this.setAttribute("value", value);
    }
    set disabled(value) {
        this.setAttribute("disabled", value);
    }
    set readonly(value) {
        this.setAttribute("readonly", value);
    }
    set focus(value) {
        this.setAttribute("focus", value);
    }
    set prefixIcon(value) {
        this.setAttribute("prefix-icon", value);
    }
    set suffixIcon(value) {
        this.setAttribute("suffix-icon", value);
    }
    set placeholder(value) {
        this.setAttribute("placeholder", value);
    }

    connectedCallback() {
        if (this.disabled !== null) {
            this.inputInner.setAttribute("disabled", "disabled");
        }
        if (this.readonly !== null) {
            this.inputInner.setAttribute("readonly", "");
        }
        if (this.placeholder !== null) {
            this.inputInner.setAttribute("placeholder", this.placeholder);
        }
        if (this.prefixIcon !== null) {
            this.preIconInner.setAttribute("name", this.prefixIcon);
            this.preIcon.style.display = "inline-flex";
            this.inputInner.style.paddingLeft = "30px";
        }
        if (this.suffixIcon !== null) {
            this.sufIconInner.setAttribute("name", this.suffixIcon);
            this.sufIcon.style.display = "inline-flex";
            this.inputInner.style.paddingRight = "30px";
        }
    }

    attributeChangedCallback(attr, oldVal, val) {
        if (attr === "disabled") {
            if (val === null) {
                this.inputInner.removeAttribute("disabled");
            } else {
                this.inputInner.setAttribute("disabled", "");
            }
        }
        if (attr === "prefix-icon") {
            if (val === null || val === "") {
                this.preIcon.style.display = "none";
                this.preIconInner.removeAttribute("name");
                this.inputInner.style.paddingLeft = "15px";
            } else {
                this.preIconInner.setAttribute("name", val);
                this.preIcon.style.display = "inline-flex";
                this.inputInner.style.paddingLeft = "30px";
            }
        }
        if (attr === "suffix-icon") {
            if (val === null || val === "") {
                this.sufIcon.style.display = "none";
                this.sufIconInner.removeAttribute("name");
                this.inputInner.style.paddingRight = "15px";
            } else {
                this.sufIconInner.setAttribute("name", val);
                this.sufIcon.style.display = "inline-flex";
                this.inputInner.style.paddingRight = "30px";
            }
        }
        if (attr === "placeholder") {
            if (val === null) {
                this.inputInner.removeAttribute("placeholder");
            } else {
                this.inputInner.setAttribute("placeholder", val);
            }
        }
    }
}

if (!customElements.get("ivy-input")) {
    customElements.define("ivy-input", Input);
}

var top = 'top';
var bottom = 'bottom';
var right = 'right';
var left = 'left';
var auto = 'auto';
var basePlacements = [top, bottom, right, left];
var start = 'start';
var end = 'end';
var clippingParents = 'clippingParents';
var viewport = 'viewport';
var popper = 'popper';
var reference = 'reference';
var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
  return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []); // modifiers that need to read the DOM

var beforeRead = 'beforeRead';
var read = 'read';
var afterRead = 'afterRead'; // pure-logic modifiers

var beforeMain = 'beforeMain';
var main = 'main';
var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

var beforeWrite = 'beforeWrite';
var write = 'write';
var afterWrite = 'afterWrite';
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

function getNodeName(element) {
  return element ? (element.nodeName || '').toLowerCase() : null;
}

function getWindow(node) {
  if (node == null) {
    return window;
  }

  if (node.toString() !== '[object Window]') {
    var ownerDocument = node.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }

  return node;
}

function isElement(node) {
  var OwnElement = getWindow(node).Element;
  return node instanceof OwnElement || node instanceof Element;
}

function isHTMLElement(node) {
  var OwnElement = getWindow(node).HTMLElement;
  return node instanceof OwnElement || node instanceof HTMLElement;
}

function isShadowRoot(node) {
  // IE 11 has no ShadowRoot
  if (typeof ShadowRoot === 'undefined') {
    return false;
  }

  var OwnElement = getWindow(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}

// and applies them to the HTMLElements such as popper and arrow

function applyStyles(_ref) {
  var state = _ref.state;
  Object.keys(state.elements).forEach(function (name) {
    var style = state.styles[name] || {};
    var attributes = state.attributes[name] || {};
    var element = state.elements[name]; // arrow is optional + virtual elements

    if (!isHTMLElement(element) || !getNodeName(element)) {
      return;
    } // Flow doesn't support to extend this property, but it's the most
    // effective way to apply styles to an HTMLElement
    // $FlowFixMe[cannot-write]


    Object.assign(element.style, style);
    Object.keys(attributes).forEach(function (name) {
      var value = attributes[name];

      if (value === false) {
        element.removeAttribute(name);
      } else {
        element.setAttribute(name, value === true ? '' : value);
      }
    });
  });
}

function effect$2(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: '0',
      top: '0',
      margin: '0'
    },
    arrow: {
      position: 'absolute'
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);
  state.styles = initialStyles;

  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }

  return function () {
    Object.keys(state.elements).forEach(function (name) {
      var element = state.elements[name];
      var attributes = state.attributes[name] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

      var style = styleProperties.reduce(function (style, property) {
        style[property] = '';
        return style;
      }, {}); // arrow is optional + virtual elements

      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      }

      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function (attribute) {
        element.removeAttribute(attribute);
      });
    });
  };
} // eslint-disable-next-line import/no-unused-modules


var applyStyles$1 = {
  name: 'applyStyles',
  enabled: true,
  phase: 'write',
  fn: applyStyles,
  effect: effect$2,
  requires: ['computeStyles']
};

function getBasePlacement(placement) {
  return placement.split('-')[0];
}

var round$1 = Math.round;
function getBoundingClientRect(element, includeScale) {
  if (includeScale === void 0) {
    includeScale = false;
  }

  var rect = element.getBoundingClientRect();
  var scaleX = 1;
  var scaleY = 1;

  if (isHTMLElement(element) && includeScale) {
    // Fallback to 1 in case both values are `0`
    scaleX = rect.width / element.offsetWidth || 1;
    scaleY = rect.height / element.offsetHeight || 1;
  }

  return {
    width: round$1(rect.width / scaleX),
    height: round$1(rect.height / scaleY),
    top: round$1(rect.top / scaleY),
    right: round$1(rect.right / scaleX),
    bottom: round$1(rect.bottom / scaleY),
    left: round$1(rect.left / scaleX),
    x: round$1(rect.left / scaleX),
    y: round$1(rect.top / scaleY)
  };
}

// means it doesn't take into account transforms.

function getLayoutRect(element) {
  var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.
  // Fixes https://github.com/popperjs/popper-core/issues/1223

  var width = element.offsetWidth;
  var height = element.offsetHeight;

  if (Math.abs(clientRect.width - width) <= 1) {
    width = clientRect.width;
  }

  if (Math.abs(clientRect.height - height) <= 1) {
    height = clientRect.height;
  }

  return {
    x: element.offsetLeft,
    y: element.offsetTop,
    width: width,
    height: height
  };
}

function contains(parent, child) {
  var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

  if (parent.contains(child)) {
    return true;
  } // then fallback to custom implementation with Shadow DOM support
  else if (rootNode && isShadowRoot(rootNode)) {
      var next = child;

      do {
        if (next && parent.isSameNode(next)) {
          return true;
        } // $FlowFixMe[prop-missing]: need a better way to handle this...


        next = next.parentNode || next.host;
      } while (next);
    } // Give up, the result is false


  return false;
}

function getComputedStyle$1(element) {
  return getWindow(element).getComputedStyle(element);
}

function isTableElement(element) {
  return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;
}

function getDocumentElement(element) {
  // $FlowFixMe[incompatible-return]: assume body is always available
  return ((isElement(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]
  element.document) || window.document).documentElement;
}

function getParentNode(element) {
  if (getNodeName(element) === 'html') {
    return element;
  }

  return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle
    // $FlowFixMe[incompatible-return]
    // $FlowFixMe[prop-missing]
    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
    element.parentNode || ( // DOM Element detected
    isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
    getDocumentElement(element) // fallback

  );
}

function getTrueOffsetParent(element) {
  if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
  getComputedStyle$1(element).position === 'fixed') {
    return null;
  }

  return element.offsetParent;
} // `.offsetParent` reports `null` for fixed elements, while absolute elements
// return the containing block


function getContainingBlock(element) {
  var isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') !== -1;
  var isIE = navigator.userAgent.indexOf('Trident') !== -1;

  if (isIE && isHTMLElement(element)) {
    // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
    var elementCss = getComputedStyle$1(element);

    if (elementCss.position === 'fixed') {
      return null;
    }
  }

  var currentNode = getParentNode(element);

  while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {
    var css = getComputedStyle$1(currentNode); // This is non-exhaustive but covers the most common CSS properties that
    // create a containing block.
    // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

    if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }

  return null;
} // Gets the closest ancestor positioned element. Handles some edge cases,
// such as table ancestors and cross browser bugs.


function getOffsetParent(element) {
  var window = getWindow(element);
  var offsetParent = getTrueOffsetParent(element);

  while (offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === 'static') {
    offsetParent = getTrueOffsetParent(offsetParent);
  }

  if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle$1(offsetParent).position === 'static')) {
    return window;
  }

  return offsetParent || getContainingBlock(element) || window;
}

function getMainAxisFromPlacement(placement) {
  return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
}

var max = Math.max;
var min = Math.min;
var round = Math.round;

function within(min$1, value, max$1) {
  return max(min$1, min(value, max$1));
}

function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}

function mergePaddingObject(paddingObject) {
  return Object.assign({}, getFreshSideObject(), paddingObject);
}

function expandToHashMap(value, keys) {
  return keys.reduce(function (hashMap, key) {
    hashMap[key] = value;
    return hashMap;
  }, {});
}

var toPaddingObject = function toPaddingObject(padding, state) {
  padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
    placement: state.placement
  })) : padding;
  return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
};

function arrow(_ref) {
  var _state$modifiersData$;

  var state = _ref.state,
      name = _ref.name,
      options = _ref.options;
  var arrowElement = state.elements.arrow;
  var popperOffsets = state.modifiersData.popperOffsets;
  var basePlacement = getBasePlacement(state.placement);
  var axis = getMainAxisFromPlacement(basePlacement);
  var isVertical = [left, right].indexOf(basePlacement) >= 0;
  var len = isVertical ? 'height' : 'width';

  if (!arrowElement || !popperOffsets) {
    return;
  }

  var paddingObject = toPaddingObject(options.padding, state);
  var arrowRect = getLayoutRect(arrowElement);
  var minProp = axis === 'y' ? top : left;
  var maxProp = axis === 'y' ? bottom : right;
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
  var startDiff = popperOffsets[axis] - state.rects.reference[axis];
  var arrowOffsetParent = getOffsetParent(arrowElement);
  var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
  // outside of the popper bounds

  var min = paddingObject[minProp];
  var max = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset = within(min, center, max); // Prevents breaking syntax highlighting...

  var axisProp = axis;
  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
}

function effect$1(_ref2) {
  var state = _ref2.state,
      options = _ref2.options;
  var _options$element = options.element,
      arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;

  if (arrowElement == null) {
    return;
  } // CSS selector


  if (typeof arrowElement === 'string') {
    arrowElement = state.elements.popper.querySelector(arrowElement);

    if (!arrowElement) {
      return;
    }
  }

  if (process.env.NODE_ENV !== "production") {
    if (!isHTMLElement(arrowElement)) {
      console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', 'To use an SVG arrow, wrap it in an HTMLElement that will be used as', 'the arrow.'].join(' '));
    }
  }

  if (!contains(state.elements.popper, arrowElement)) {
    if (process.env.NODE_ENV !== "production") {
      console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', 'element.'].join(' '));
    }

    return;
  }

  state.elements.arrow = arrowElement;
} // eslint-disable-next-line import/no-unused-modules


var arrow$1 = {
  name: 'arrow',
  enabled: true,
  phase: 'main',
  fn: arrow,
  effect: effect$1,
  requires: ['popperOffsets'],
  requiresIfExists: ['preventOverflow']
};

var unsetSides = {
  top: 'auto',
  right: 'auto',
  bottom: 'auto',
  left: 'auto'
}; // Round the offsets to the nearest suitable subpixel based on the DPR.
// Zooming can change the DPR, but it seems to report a value that will
// cleanly divide the values into the appropriate subpixels.

function roundOffsetsByDPR(_ref) {
  var x = _ref.x,
      y = _ref.y;
  var win = window;
  var dpr = win.devicePixelRatio || 1;
  return {
    x: round(round(x * dpr) / dpr) || 0,
    y: round(round(y * dpr) / dpr) || 0
  };
}

function mapToStyles(_ref2) {
  var _Object$assign2;

  var popper = _ref2.popper,
      popperRect = _ref2.popperRect,
      placement = _ref2.placement,
      offsets = _ref2.offsets,
      position = _ref2.position,
      gpuAcceleration = _ref2.gpuAcceleration,
      adaptive = _ref2.adaptive,
      roundOffsets = _ref2.roundOffsets;

  var _ref3 = roundOffsets === true ? roundOffsetsByDPR(offsets) : typeof roundOffsets === 'function' ? roundOffsets(offsets) : offsets,
      _ref3$x = _ref3.x,
      x = _ref3$x === void 0 ? 0 : _ref3$x,
      _ref3$y = _ref3.y,
      y = _ref3$y === void 0 ? 0 : _ref3$y;

  var hasX = offsets.hasOwnProperty('x');
  var hasY = offsets.hasOwnProperty('y');
  var sideX = left;
  var sideY = top;
  var win = window;

  if (adaptive) {
    var offsetParent = getOffsetParent(popper);
    var heightProp = 'clientHeight';
    var widthProp = 'clientWidth';

    if (offsetParent === getWindow(popper)) {
      offsetParent = getDocumentElement(popper);

      if (getComputedStyle$1(offsetParent).position !== 'static') {
        heightProp = 'scrollHeight';
        widthProp = 'scrollWidth';
      }
    } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it


    offsetParent = offsetParent;

    if (placement === top) {
      sideY = bottom; // $FlowFixMe[prop-missing]

      y -= offsetParent[heightProp] - popperRect.height;
      y *= gpuAcceleration ? 1 : -1;
    }

    if (placement === left) {
      sideX = right; // $FlowFixMe[prop-missing]

      x -= offsetParent[widthProp] - popperRect.width;
      x *= gpuAcceleration ? 1 : -1;
    }
  }

  var commonStyles = Object.assign({
    position: position
  }, adaptive && unsetSides);

  if (gpuAcceleration) {
    var _Object$assign;

    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) < 2 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
  }

  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
}

function computeStyles(_ref4) {
  var state = _ref4.state,
      options = _ref4.options;
  var _options$gpuAccelerat = options.gpuAcceleration,
      gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
      _options$adaptive = options.adaptive,
      adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
      _options$roundOffsets = options.roundOffsets,
      roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;

  if (process.env.NODE_ENV !== "production") {
    var transitionProperty = getComputedStyle$1(state.elements.popper).transitionProperty || '';

    if (adaptive && ['transform', 'top', 'right', 'bottom', 'left'].some(function (property) {
      return transitionProperty.indexOf(property) >= 0;
    })) {
      console.warn(['Popper: Detected CSS transitions on at least one of the following', 'CSS properties: "transform", "top", "right", "bottom", "left".', '\n\n', 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', 'for smooth transitions, or remove these properties from the CSS', 'transition declaration on the popper element if only transitioning', 'opacity or background-color for example.', '\n\n', 'We recommend using the popper element as a wrapper around an inner', 'element that can have any CSS property transitioned for animations.'].join(' '));
    }
  }

  var commonStyles = {
    placement: getBasePlacement(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration: gpuAcceleration
  };

  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive: adaptive,
      roundOffsets: roundOffsets
    })));
  }

  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.arrow,
      position: 'absolute',
      adaptive: false,
      roundOffsets: roundOffsets
    })));
  }

  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    'data-popper-placement': state.placement
  });
} // eslint-disable-next-line import/no-unused-modules


var computeStyles$1 = {
  name: 'computeStyles',
  enabled: true,
  phase: 'beforeWrite',
  fn: computeStyles,
  data: {}
};

var passive = {
  passive: true
};

function effect(_ref) {
  var state = _ref.state,
      instance = _ref.instance,
      options = _ref.options;
  var _options$scroll = options.scroll,
      scroll = _options$scroll === void 0 ? true : _options$scroll,
      _options$resize = options.resize,
      resize = _options$resize === void 0 ? true : _options$resize;
  var window = getWindow(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);

  if (scroll) {
    scrollParents.forEach(function (scrollParent) {
      scrollParent.addEventListener('scroll', instance.update, passive);
    });
  }

  if (resize) {
    window.addEventListener('resize', instance.update, passive);
  }

  return function () {
    if (scroll) {
      scrollParents.forEach(function (scrollParent) {
        scrollParent.removeEventListener('scroll', instance.update, passive);
      });
    }

    if (resize) {
      window.removeEventListener('resize', instance.update, passive);
    }
  };
} // eslint-disable-next-line import/no-unused-modules


var eventListeners = {
  name: 'eventListeners',
  enabled: true,
  phase: 'write',
  fn: function fn() {},
  effect: effect,
  data: {}
};

var hash$1 = {
  left: 'right',
  right: 'left',
  bottom: 'top',
  top: 'bottom'
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function (matched) {
    return hash$1[matched];
  });
}

var hash = {
  start: 'end',
  end: 'start'
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function (matched) {
    return hash[matched];
  });
}

function getWindowScroll(node) {
  var win = getWindow(node);
  var scrollLeft = win.pageXOffset;
  var scrollTop = win.pageYOffset;
  return {
    scrollLeft: scrollLeft,
    scrollTop: scrollTop
  };
}

function getWindowScrollBarX(element) {
  // If <html> has a CSS width greater than the viewport, then this will be
  // incorrect for RTL.
  // Popper 1 is broken in this case and never had a bug report so let's assume
  // it's not an issue. I don't think anyone ever specifies width on <html>
  // anyway.
  // Browsers where the left scrollbar doesn't cause an issue report `0` for
  // this (e.g. Edge 2019, IE11, Safari)
  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
}

function getViewportRect(element) {
  var win = getWindow(element);
  var html = getDocumentElement(element);
  var visualViewport = win.visualViewport;
  var width = html.clientWidth;
  var height = html.clientHeight;
  var x = 0;
  var y = 0; // NB: This isn't supported on iOS <= 12. If the keyboard is open, the popper
  // can be obscured underneath it.
  // Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even
  // if it isn't open, so if this isn't available, the popper will be detected
  // to overflow the bottom of the screen too early.

  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height; // Uses Layout Viewport (like Chrome; Safari does not currently)
    // In Chrome, it returns a value very close to 0 (+/-) but contains rounding
    // errors due to floating point numbers, so we need to check precision.
    // Safari returns a number <= 0, usually < -1 when pinch-zoomed
    // Feature detection fails in mobile emulation mode in Chrome.
    // Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <
    // 0.001
    // Fallback here: "Not Safari" userAgent

    if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }

  return {
    width: width,
    height: height,
    x: x + getWindowScrollBarX(element),
    y: y
  };
}

// of the `<html>` and `<body>` rect bounds if horizontally scrollable

function getDocumentRect(element) {
  var _element$ownerDocumen;

  var html = getDocumentElement(element);
  var winScroll = getWindowScroll(element);
  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
  var y = -winScroll.scrollTop;

  if (getComputedStyle$1(body || html).direction === 'rtl') {
    x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
  }

  return {
    width: width,
    height: height,
    x: x,
    y: y
  };
}

function isScrollParent(element) {
  // Firefox wants us to check `-x` and `-y` variations as well
  var _getComputedStyle = getComputedStyle$1(element),
      overflow = _getComputedStyle.overflow,
      overflowX = _getComputedStyle.overflowX,
      overflowY = _getComputedStyle.overflowY;

  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}

function getScrollParent(node) {
  if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {
    // $FlowFixMe[incompatible-return]: assume body is always available
    return node.ownerDocument.body;
  }

  if (isHTMLElement(node) && isScrollParent(node)) {
    return node;
  }

  return getScrollParent(getParentNode(node));
}

/*
given a DOM element, return the list of all scroll parents, up the list of ancesors
until we get to the top window object. This list is what we attach scroll listeners
to, because if any of these parent elements scroll, we'll need to re-calculate the
reference element's position.
*/

function listScrollParents(element, list) {
  var _element$ownerDocumen;

  if (list === void 0) {
    list = [];
  }

  var scrollParent = getScrollParent(element);
  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
  var win = getWindow(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list.concat(target);
  return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
  updatedList.concat(listScrollParents(getParentNode(target)));
}

function rectToClientRect(rect) {
  return Object.assign({}, rect, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}

function getInnerBoundingClientRect(element) {
  var rect = getBoundingClientRect(element);
  rect.top = rect.top + element.clientTop;
  rect.left = rect.left + element.clientLeft;
  rect.bottom = rect.top + element.clientHeight;
  rect.right = rect.left + element.clientWidth;
  rect.width = element.clientWidth;
  rect.height = element.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}

function getClientRectFromMixedType(element, clippingParent) {
  return clippingParent === viewport ? rectToClientRect(getViewportRect(element)) : isHTMLElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
} // A "clipping parent" is an overflowable container with the characteristic of
// clipping (or hiding) overflowing elements with a position different from
// `initial`


function getClippingParents(element) {
  var clippingParents = listScrollParents(getParentNode(element));
  var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle$1(element).position) >= 0;
  var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;

  if (!isElement(clipperElement)) {
    return [];
  } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414


  return clippingParents.filter(function (clippingParent) {
    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';
  });
} // Gets the maximum area that the element is visible in due to any number of
// clipping parents


function getClippingRect(element, boundary, rootBoundary) {
  var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
  var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents[0];
  var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element, clippingParent);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element, firstClippingParent));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}

function getVariation(placement) {
  return placement.split('-')[1];
}

function computeOffsets(_ref) {
  var reference = _ref.reference,
      element = _ref.element,
      placement = _ref.placement;
  var basePlacement = placement ? getBasePlacement(placement) : null;
  var variation = placement ? getVariation(placement) : null;
  var commonX = reference.x + reference.width / 2 - element.width / 2;
  var commonY = reference.y + reference.height / 2 - element.height / 2;
  var offsets;

  switch (basePlacement) {
    case top:
      offsets = {
        x: commonX,
        y: reference.y - element.height
      };
      break;

    case bottom:
      offsets = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;

    case right:
      offsets = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;

    case left:
      offsets = {
        x: reference.x - element.width,
        y: commonY
      };
      break;

    default:
      offsets = {
        x: reference.x,
        y: reference.y
      };
  }

  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;

  if (mainAxis != null) {
    var len = mainAxis === 'y' ? 'height' : 'width';

    switch (variation) {
      case start:
        offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
        break;

      case end:
        offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
        break;
    }
  }

  return offsets;
}

function detectOverflow(state, options) {
  if (options === void 0) {
    options = {};
  }

  var _options = options,
      _options$placement = _options.placement,
      placement = _options$placement === void 0 ? state.placement : _options$placement,
      _options$boundary = _options.boundary,
      boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,
      _options$rootBoundary = _options.rootBoundary,
      rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,
      _options$elementConte = _options.elementContext,
      elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,
      _options$altBoundary = _options.altBoundary,
      altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
      _options$padding = _options.padding,
      padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
  var altContext = elementContext === popper ? reference : popper;
  var referenceElement = state.elements.reference;
  var popperRect = state.rects.popper;
  var element = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);
  var referenceClientRect = getBoundingClientRect(referenceElement);
  var popperOffsets = computeOffsets({
    reference: referenceClientRect,
    element: popperRect,
    strategy: 'absolute',
    placement: placement
  });
  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));
  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
  // 0 or negative = within the clipping rect

  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

  if (elementContext === popper && offsetData) {
    var offset = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function (key) {
      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
      var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';
      overflowOffsets[key] += offset[axis] * multiply;
    });
  }

  return overflowOffsets;
}

function computeAutoPlacement(state, options) {
  if (options === void 0) {
    options = {};
  }

  var _options = options,
      placement = _options.placement,
      boundary = _options.boundary,
      rootBoundary = _options.rootBoundary,
      padding = _options.padding,
      flipVariations = _options.flipVariations,
      _options$allowedAutoP = _options.allowedAutoPlacements,
      allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
  var variation = getVariation(placement);
  var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {
    return getVariation(placement) === variation;
  }) : basePlacements;
  var allowedPlacements = placements$1.filter(function (placement) {
    return allowedAutoPlacements.indexOf(placement) >= 0;
  });

  if (allowedPlacements.length === 0) {
    allowedPlacements = placements$1;

    if (process.env.NODE_ENV !== "production") {
      console.error(['Popper: The `allowedAutoPlacements` option did not allow any', 'placements. Ensure the `placement` option matches the variation', 'of the allowed placements.', 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(' '));
    }
  } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...


  var overflows = allowedPlacements.reduce(function (acc, placement) {
    acc[placement] = detectOverflow(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding
    })[getBasePlacement(placement)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function (a, b) {
    return overflows[a] - overflows[b];
  });
}

function getExpandedFallbackPlacements(placement) {
  if (getBasePlacement(placement) === auto) {
    return [];
  }

  var oppositePlacement = getOppositePlacement(placement);
  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
}

function flip(_ref) {
  var state = _ref.state,
      options = _ref.options,
      name = _ref.name;

  if (state.modifiersData[name]._skip) {
    return;
  }

  var _options$mainAxis = options.mainAxis,
      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
      _options$altAxis = options.altAxis,
      checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
      specifiedFallbackPlacements = options.fallbackPlacements,
      padding = options.padding,
      boundary = options.boundary,
      rootBoundary = options.rootBoundary,
      altBoundary = options.altBoundary,
      _options$flipVariatio = options.flipVariations,
      flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
      allowedAutoPlacements = options.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = getBasePlacement(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
    return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding,
      flipVariations: flipVariations,
      allowedAutoPlacements: allowedAutoPlacements
    }) : placement);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements[0];

  for (var i = 0; i < placements.length; i++) {
    var placement = placements[i];

    var _basePlacement = getBasePlacement(placement);

    var isStartVariation = getVariation(placement) === start;
    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
    var len = isVertical ? 'width' : 'height';
    var overflow = detectOverflow(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      altBoundary: altBoundary,
      padding: padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;

    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = getOppositePlacement(mainVariationSide);
    }

    var altVariationSide = getOppositePlacement(mainVariationSide);
    var checks = [];

    if (checkMainAxis) {
      checks.push(overflow[_basePlacement] <= 0);
    }

    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }

    if (checks.every(function (check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }

    checksMap.set(placement, checks);
  }

  if (makeFallbackChecks) {
    // `2` may be desired in some cases – research later
    var numberOfChecks = flipVariations ? 3 : 1;

    var _loop = function _loop(_i) {
      var fittingPlacement = placements.find(function (placement) {
        var checks = checksMap.get(placement);

        if (checks) {
          return checks.slice(0, _i).every(function (check) {
            return check;
          });
        }
      });

      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };

    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);

      if (_ret === "break") break;
    }
  }

  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
} // eslint-disable-next-line import/no-unused-modules


var flip$1 = {
  name: 'flip',
  enabled: true,
  phase: 'main',
  fn: flip,
  requiresIfExists: ['offset'],
  data: {
    _skip: false
  }
};

function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }

  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}

function isAnySideFullyClipped(overflow) {
  return [top, right, bottom, left].some(function (side) {
    return overflow[side] >= 0;
  });
}

function hide(_ref) {
  var state = _ref.state,
      name = _ref.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = detectOverflow(state, {
    elementContext: 'reference'
  });
  var popperAltOverflow = detectOverflow(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets: referenceClippingOffsets,
    popperEscapeOffsets: popperEscapeOffsets,
    isReferenceHidden: isReferenceHidden,
    hasPopperEscaped: hasPopperEscaped
  };
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    'data-popper-reference-hidden': isReferenceHidden,
    'data-popper-escaped': hasPopperEscaped
  });
} // eslint-disable-next-line import/no-unused-modules


var hide$1 = {
  name: 'hide',
  enabled: true,
  phase: 'main',
  requiresIfExists: ['preventOverflow'],
  fn: hide
};

function distanceAndSkiddingToXY(placement, rects, offset) {
  var basePlacement = getBasePlacement(placement);
  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;

  var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
    placement: placement
  })) : offset,
      skidding = _ref[0],
      distance = _ref[1];

  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [left, right].indexOf(basePlacement) >= 0 ? {
    x: distance,
    y: skidding
  } : {
    x: skidding,
    y: distance
  };
}

function offset(_ref2) {
  var state = _ref2.state,
      options = _ref2.options,
      name = _ref2.name;
  var _options$offset = options.offset,
      offset = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data = placements.reduce(function (acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
    return acc;
  }, {});
  var _data$state$placement = data[state.placement],
      x = _data$state$placement.x,
      y = _data$state$placement.y;

  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x;
    state.modifiersData.popperOffsets.y += y;
  }

  state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules


var offset$1 = {
  name: 'offset',
  enabled: true,
  phase: 'main',
  requires: ['popperOffsets'],
  fn: offset
};

function popperOffsets(_ref) {
  var state = _ref.state,
      name = _ref.name;
  // Offsets are the actual position the popper needs to have to be
  // properly positioned near its reference element
  // This is the most basic placement, and will be adjusted by
  // the modifiers in the next step
  state.modifiersData[name] = computeOffsets({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: 'absolute',
    placement: state.placement
  });
} // eslint-disable-next-line import/no-unused-modules


var popperOffsets$1 = {
  name: 'popperOffsets',
  enabled: true,
  phase: 'read',
  fn: popperOffsets,
  data: {}
};

function getAltAxis(axis) {
  return axis === 'x' ? 'y' : 'x';
}

function preventOverflow(_ref) {
  var state = _ref.state,
      options = _ref.options,
      name = _ref.name;
  var _options$mainAxis = options.mainAxis,
      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
      _options$altAxis = options.altAxis,
      checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
      boundary = options.boundary,
      rootBoundary = options.rootBoundary,
      altBoundary = options.altBoundary,
      padding = options.padding,
      _options$tether = options.tether,
      tether = _options$tether === void 0 ? true : _options$tether,
      _options$tetherOffset = options.tetherOffset,
      tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = detectOverflow(state, {
    boundary: boundary,
    rootBoundary: rootBoundary,
    padding: padding,
    altBoundary: altBoundary
  });
  var basePlacement = getBasePlacement(state.placement);
  var variation = getVariation(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = getMainAxisFromPlacement(basePlacement);
  var altAxis = getAltAxis(mainAxis);
  var popperOffsets = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
    placement: state.placement
  })) : tetherOffset;
  var data = {
    x: 0,
    y: 0
  };

  if (!popperOffsets) {
    return;
  }

  if (checkMainAxis || checkAltAxis) {
    var mainSide = mainAxis === 'y' ? top : left;
    var altSide = mainAxis === 'y' ? bottom : right;
    var len = mainAxis === 'y' ? 'height' : 'width';
    var offset = popperOffsets[mainAxis];
    var min$1 = popperOffsets[mainAxis] + overflow[mainSide];
    var max$1 = popperOffsets[mainAxis] - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === start ? referenceRect[len] : popperRect[len];
    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
    // outside the reference bounds

    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
    // to include its full size in the calculation. If the reference is small
    // and near the edge of a boundary, the popper can overflow even if the
    // reference is not overflowing as well (e.g. virtual elements with no
    // width or height)

    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - tetherOffsetValue : minLen - arrowLen - arrowPaddingMin - tetherOffsetValue;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + tetherOffsetValue : maxLen + arrowLen + arrowPaddingMax + tetherOffsetValue;
    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = state.modifiersData.offset ? state.modifiersData.offset[state.placement][mainAxis] : 0;
    var tetherMin = popperOffsets[mainAxis] + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = popperOffsets[mainAxis] + maxOffset - offsetModifierValue;

    if (checkMainAxis) {
      var preventedOffset = within(tether ? min(min$1, tetherMin) : min$1, offset, tether ? max(max$1, tetherMax) : max$1);
      popperOffsets[mainAxis] = preventedOffset;
      data[mainAxis] = preventedOffset - offset;
    }

    if (checkAltAxis) {
      var _mainSide = mainAxis === 'x' ? top : left;

      var _altSide = mainAxis === 'x' ? bottom : right;

      var _offset = popperOffsets[altAxis];

      var _min = _offset + overflow[_mainSide];

      var _max = _offset - overflow[_altSide];

      var _preventedOffset = within(tether ? min(_min, tetherMin) : _min, _offset, tether ? max(_max, tetherMax) : _max);

      popperOffsets[altAxis] = _preventedOffset;
      data[altAxis] = _preventedOffset - _offset;
    }
  }

  state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules


var preventOverflow$1 = {
  name: 'preventOverflow',
  enabled: true,
  phase: 'main',
  fn: preventOverflow,
  requiresIfExists: ['offset']
};

function getHTMLElementScroll(element) {
  return {
    scrollLeft: element.scrollLeft,
    scrollTop: element.scrollTop
  };
}

function getNodeScroll(node) {
  if (node === getWindow(node) || !isHTMLElement(node)) {
    return getWindowScroll(node);
  } else {
    return getHTMLElementScroll(node);
  }
}

function isElementScaled(element) {
  var rect = element.getBoundingClientRect();
  var scaleX = rect.width / element.offsetWidth || 1;
  var scaleY = rect.height / element.offsetHeight || 1;
  return scaleX !== 1 || scaleY !== 1;
} // Returns the composite rect of an element relative to its offsetParent.
// Composite means it takes into account transforms as well as layout.


function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }

  var isOffsetParentAnElement = isHTMLElement(offsetParent);
  var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
  var documentElement = getDocumentElement(offsetParent);
  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };

  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
    isScrollParent(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }

    if (isHTMLElement(offsetParent)) {
      offsets = getBoundingClientRect(offsetParent, true);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }

  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}

function order(modifiers) {
  var map = new Map();
  var visited = new Set();
  var result = [];
  modifiers.forEach(function (modifier) {
    map.set(modifier.name, modifier);
  }); // On visiting object, check for its dependencies and visit them recursively

  function sort(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function (dep) {
      if (!visited.has(dep)) {
        var depModifier = map.get(dep);

        if (depModifier) {
          sort(depModifier);
        }
      }
    });
    result.push(modifier);
  }

  modifiers.forEach(function (modifier) {
    if (!visited.has(modifier.name)) {
      // check for visited object
      sort(modifier);
    }
  });
  return result;
}

function orderModifiers(modifiers) {
  // order based on dependencies
  var orderedModifiers = order(modifiers); // order based on phase

  return modifierPhases.reduce(function (acc, phase) {
    return acc.concat(orderedModifiers.filter(function (modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}

function debounce(fn) {
  var pending;
  return function () {
    if (!pending) {
      pending = new Promise(function (resolve) {
        Promise.resolve().then(function () {
          pending = undefined;
          resolve(fn());
        });
      });
    }

    return pending;
  };
}

function format(str) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  return [].concat(args).reduce(function (p, c) {
    return p.replace(/%s/, c);
  }, str);
}

var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
var VALID_PROPERTIES = ['name', 'enabled', 'phase', 'fn', 'effect', 'requires', 'options'];
function validateModifiers(modifiers) {
  modifiers.forEach(function (modifier) {
    Object.keys(modifier).forEach(function (key) {
      switch (key) {
        case 'name':
          if (typeof modifier.name !== 'string') {
            console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', "\"" + String(modifier.name) + "\""));
          }

          break;

        case 'enabled':
          if (typeof modifier.enabled !== 'boolean') {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', "\"" + String(modifier.enabled) + "\""));
          }

        case 'phase':
          if (modifierPhases.indexOf(modifier.phase) < 0) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(', '), "\"" + String(modifier.phase) + "\""));
          }

          break;

        case 'fn':
          if (typeof modifier.fn !== 'function') {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', "\"" + String(modifier.fn) + "\""));
          }

          break;

        case 'effect':
          if (typeof modifier.effect !== 'function') {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', "\"" + String(modifier.fn) + "\""));
          }

          break;

        case 'requires':
          if (!Array.isArray(modifier.requires)) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', "\"" + String(modifier.requires) + "\""));
          }

          break;

        case 'requiresIfExists':
          if (!Array.isArray(modifier.requiresIfExists)) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', "\"" + String(modifier.requiresIfExists) + "\""));
          }

          break;

        case 'options':
        case 'data':
          break;

        default:
          console.error("PopperJS: an invalid property has been provided to the \"" + modifier.name + "\" modifier, valid properties are " + VALID_PROPERTIES.map(function (s) {
            return "\"" + s + "\"";
          }).join(', ') + "; but \"" + key + "\" was provided.");
      }

      modifier.requires && modifier.requires.forEach(function (requirement) {
        if (modifiers.find(function (mod) {
          return mod.name === requirement;
        }) == null) {
          console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
        }
      });
    });
  });
}

function uniqueBy(arr, fn) {
  var identifiers = new Set();
  return arr.filter(function (item) {
    var identifier = fn(item);

    if (!identifiers.has(identifier)) {
      identifiers.add(identifier);
      return true;
    }
  });
}

function mergeByName(modifiers) {
  var merged = modifiers.reduce(function (merged, current) {
    var existing = merged[current.name];
    merged[current.name] = existing ? Object.assign({}, existing, current, {
      options: Object.assign({}, existing.options, current.options),
      data: Object.assign({}, existing.data, current.data)
    }) : current;
    return merged;
  }, {}); // IE11 does not support Object.values

  return Object.keys(merged).map(function (key) {
    return merged[key];
  });
}

var INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';
var INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';
var DEFAULT_OPTIONS = {
  placement: 'bottom',
  modifiers: [],
  strategy: 'absolute'
};

function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return !args.some(function (element) {
    return !(element && typeof element.getBoundingClientRect === 'function');
  });
}

function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }

  var _generatorOptions = generatorOptions,
      _generatorOptions$def = _generatorOptions.defaultModifiers,
      defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
      _generatorOptions$def2 = _generatorOptions.defaultOptions,
      defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper(reference, popper, options) {
    if (options === void 0) {
      options = defaultOptions;
    }

    var state = {
      placement: 'bottom',
      orderedModifiers: [],
      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
      modifiersData: {},
      elements: {
        reference: reference,
        popper: popper
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance = {
      state: state,
      setOptions: function setOptions(options) {
        cleanupModifierEffects();
        state.options = Object.assign({}, defaultOptions, state.options, options);
        state.scrollParents = {
          reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],
          popper: listScrollParents(popper)
        }; // Orders the modifiers based on their dependencies and `phase`
        // properties

        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

        state.orderedModifiers = orderedModifiers.filter(function (m) {
          return m.enabled;
        }); // Validate the provided modifiers so that the consumer will get warned
        // if one of the modifiers is invalid for any reason

        if (process.env.NODE_ENV !== "production") {
          var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function (_ref) {
            var name = _ref.name;
            return name;
          });
          validateModifiers(modifiers);

          if (getBasePlacement(state.options.placement) === auto) {
            var flipModifier = state.orderedModifiers.find(function (_ref2) {
              var name = _ref2.name;
              return name === 'flip';
            });

            if (!flipModifier) {
              console.error(['Popper: "auto" placements require the "flip" modifier be', 'present and enabled to work.'].join(' '));
            }
          }

          var _getComputedStyle = getComputedStyle$1(popper),
              marginTop = _getComputedStyle.marginTop,
              marginRight = _getComputedStyle.marginRight,
              marginBottom = _getComputedStyle.marginBottom,
              marginLeft = _getComputedStyle.marginLeft; // We no longer take into account `margins` on the popper, and it can
          // cause bugs with positioning, so we'll warn the consumer


          if ([marginTop, marginRight, marginBottom, marginLeft].some(function (margin) {
            return parseFloat(margin);
          })) {
            console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', 'between the popper and its reference element or boundary.', 'To replicate margin, use the `offset` modifier, as well as', 'the `padding` option in the `preventOverflow` and `flip`', 'modifiers.'].join(' '));
          }
        }

        runModifierEffects();
        return instance.update();
      },
      // Sync update – it will always be executed, even if not necessary. This
      // is useful for low frequency updates where sync behavior simplifies the
      // logic.
      // For high frequency updates (e.g. `resize` and `scroll` events), always
      // prefer the async Popper#update method
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }

        var _state$elements = state.elements,
            reference = _state$elements.reference,
            popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
        // anymore

        if (!areValidElements(reference, popper)) {
          if (process.env.NODE_ENV !== "production") {
            console.error(INVALID_ELEMENT_ERROR);
          }

          return;
        } // Store the reference and popper rects to be read by modifiers


        state.rects = {
          reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),
          popper: getLayoutRect(popper)
        }; // Modifiers have the ability to reset the current update cycle. The
        // most common use case for this is the `flip` modifier changing the
        // placement, which then needs to re-run all the modifiers, because the
        // logic was previously ran for the previous placement and is therefore
        // stale/incorrect

        state.reset = false;
        state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
        // is filled with the initial data specified by the modifier. This means
        // it doesn't persist and is fresh on each update.
        // To ensure persistent data, use `${name}#persistent`

        state.orderedModifiers.forEach(function (modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });
        var __debug_loops__ = 0;

        for (var index = 0; index < state.orderedModifiers.length; index++) {
          if (process.env.NODE_ENV !== "production") {
            __debug_loops__ += 1;

            if (__debug_loops__ > 100) {
              console.error(INFINITE_LOOP_ERROR);
              break;
            }
          }

          if (state.reset === true) {
            state.reset = false;
            index = -1;
            continue;
          }

          var _state$orderedModifie = state.orderedModifiers[index],
              fn = _state$orderedModifie.fn,
              _state$orderedModifie2 = _state$orderedModifie.options,
              _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
              name = _state$orderedModifie.name;

          if (typeof fn === 'function') {
            state = fn({
              state: state,
              options: _options,
              name: name,
              instance: instance
            }) || state;
          }
        }
      },
      // Async and optimistically optimized update – it will not be executed if
      // not necessary (debounced to run at most once-per-tick)
      update: debounce(function () {
        return new Promise(function (resolve) {
          instance.forceUpdate();
          resolve(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };

    if (!areValidElements(reference, popper)) {
      if (process.env.NODE_ENV !== "production") {
        console.error(INVALID_ELEMENT_ERROR);
      }

      return instance;
    }

    instance.setOptions(options).then(function (state) {
      if (!isDestroyed && options.onFirstUpdate) {
        options.onFirstUpdate(state);
      }
    }); // Modifiers have the ability to execute arbitrary code before the first
    // update cycle runs. They will be executed in the same order as the update
    // cycle. This is useful when a modifier adds some persistent data that
    // other modifiers need to use, but the modifier is run after the dependent
    // one.

    function runModifierEffects() {
      state.orderedModifiers.forEach(function (_ref3) {
        var name = _ref3.name,
            _ref3$options = _ref3.options,
            options = _ref3$options === void 0 ? {} : _ref3$options,
            effect = _ref3.effect;

        if (typeof effect === 'function') {
          var cleanupFn = effect({
            state: state,
            name: name,
            instance: instance,
            options: options
          });

          var noopFn = function noopFn() {};

          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }

    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function (fn) {
        return fn();
      });
      effectCleanupFns = [];
    }

    return instance;
  };
}

var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
var createPopper = /*#__PURE__*/popperGenerator({
  defaultModifiers: defaultModifiers
}); // eslint-disable-next-line import/no-unused-modules

class Select extends HTMLElement {
    constructor() {
        super();
        const template = document.createElement("template");

        template.innerHTML = `
            <style>
                :host {
                    display: inline-block;
                    width: 224px;
                    position: relative;
                }
                .ivy-select {
                    display: block;
                    position: relative;
                }
                .ivy-select-input-box {
                    position: relative;
                }
                .ivy-select-input-box ivy-icon {
                    position: absolute;
                    right: 8px;
                    top: 50%;
                    margin-top: -7px;
                    transition: transform 0.3s;
                    transform: rotate(0);
                    color: #C0C4CC;
                    pointer-events: none;
                }
                :host([show]) .ivy-select-input-box ivy-icon {
                    transform: rotate(-180deg);
                }
                .ivy-select-input {
                    background-color: #fff;
                    background-image: none;
                    border-radius: var(--border-radius, ${$_border_radius});
                    border: 1px solid var(--border-color, ${$_border_color_base});
                    box-sizing: border-box;
                    color: #606266;
                    display: inline-block;
                    font-size: inherit;
                    height: 34px;
                    line-height: 34px;
                    outline: none;
                    padding: 0 30px 0 15px;
                    transition: border-color .2s cubic-bezier(.645,.045,.355,1);
                    width: 100%;
                }
                .ivy-select-input::-webkit-input-placeholder {
                    color: #C0C4CC;
                    font-size: 14px;
                }
                .ivy-select-input::-moz-input-placeholder {
                    color: #C0C4CC;
                    font-size: 14px;
                }
                .ivy-select-input:-moz-input-placeholder {
                    color: #C0C4CC;
                    font-size: 14px;
                }
                .ivy-select-input:-ms-input-placeholder {
                    color: #C0C4CC;
                    font-size: 14px;
                }
                .ivy-select-input:active,
                .ivy-select-input:hover,
                .ivy-select-input:focus {
                    border-color: var(--color-primary, ${$_color_primary});
                }
                :host([disabled]) {
                    cursor: not-allowed;
                }
                :host([disabled]) .ivy-select-input {
                    background-color: #f5f7fa;
                    border-color: #e4e7ed;
                    color: #c0c4cc;
                    cursor: not-allowed;
                }
                .ivy-drop {
                    display: none;
                    opacity: 0;
                    transition: opacity 0.3s;
                    width: 100%;
                    position: relative;
                    z-index: 1;
                }
                .ivy-drop-body {
                    background-color: white;
                    box-shadow: var(--box-shadow, ${$_shadow_base});
                    padding: 6px 0;
                    box-sizing: border-box;
                    overflow: hidden;
                }
                .ivy-arrow {
                    border-width: 6px;
                    filter: drop-shadow(0 2px 12px rgba(0,0,0, 0.03));
                }
                
                .ivy-arrow::after {
                    position: absolute;
                    display: block;
                    width: 0;
                    height: 0;
                    border-color: transparent;
                    border-style: solid;
                }
                .ivy-arrow::after {
                    content: "";
                    border-width: 6px;
                }

                :host([placement|="bottom"]) .ivy-arrow::after {
                    top: 1px;
                    margin-left: -6px;
                    border-top-width: 0;
                    border-bottom-color: red;
                }
            </style>
            <div class="ivy-select">
                <div class="ivy-select-input-box">
                    <input class="ivy-select-input"></input>
                    <ivy-icon name="arrow-down"></ivy-icon>
                </div>
                <div class="ivy-drop">
                    <div class="ivy-arrow" data-popper-arrow></div>
                    <div class="ivy-drop-body">
                        <slot></slot>
                    </div>
                </div>
            </div>
        `;
        this._shadowRoot = this.attachShadow({
            mode: "open",
        });
        this._shadowRoot.appendChild(template.content.cloneNode(true));
        this.select = this._shadowRoot.querySelector(".ivy-select");
        this.drop = this._shadowRoot.querySelector(".ivy-drop");
        this.selectInput = this._shadowRoot.querySelector(".ivy-select-input");

        this.timer = null;
        this.selectInput.addEventListener("click", this.showHandler);
        this.selectInput.addEventListener("keypress", this.showHandler);

        this.drop.addEventListener("click", ev => {
            const target = ev.target;
            const label = target.label;
            const value = target.value;
            const nodeName = target.nodeName.toLowerCase();
            const children = [...this.children];
            if (nodeName === "ivy-option") {
                this.value = value || label || "";
                children.map(cur => {
                    cur.removeAttribute("active");
                });
                target.active = "";
                this.selectInput.value = label || value || "";
            }
        });
        this.popper = createPopper(this, this.drop, {
            placement: "bottom",
            modifiers: [
                {
                    name: "arrow",
                    options: {
                        element: this._shadowRoot.querySelector(".ivy-arrow"),
                        padding: 5,
                    },
                },
                {
                    name: "offset",
                    options: {
                        offset: ({ placement }) => {
                            if (/^(left|right)/.test(placement)) {
                                return [12, 0];
                            } else {
                                return [0, 12];
                            }
                        },
                    },
                },
            ],
        });
    }
    static get observedAttributes() {
        return ["value", "placeholder", "disabled", "show"];
    }

    get value() {
        return this.getAttribute("value");
    }
    get placeholder() {
        return this.getAttribute("placeholder");
    }
    get disabled() {
        return this.getAttribute("disabled");
    }
    get show() {
        return this.getAttribute("show");
    }

    set value(value) {
        this.setAttribute("value", value);
    }
    set placeholder(value) {
        this.setAttribute("placeholder", value);
    }
    set disabled(value) {
        this.setAttribute("disabled", value);
    }
    set show(value) {
        this.setAttribute("show", value);
    }

    showHandler = ev => {
        const type = ev.type;
        const which = ev.which;
        const isEnter = type === "keypress" && which === 13;
        if (isEnter || type === "click") {
            this.show = "";
            if (this.timer !== null) {
                clearTimeout(this.timer);
            }
            this.drop.style.display = "block";
            this.popper.update();
            this.drop.style.opacity = 1;
        }
    };

    hideHandler = () => {
        this.removeAttribute("show");
        this.drop.style.opacity = 0;
        this.timer = setTimeout(() => {
            this.drop.style.display = "none";
            clearTimeout(this.timer);
            this.timer = null;
        }, 300);
        this.popper.update();
    };

    validate(cb) {
        const ivyFormItem = findElementsDownward(this, "ivy-form-item");
        const flag = ivyFormItem.every(item => {
            if (item.validator || item.message) {
                return item.status !== "error";
            } else {
                return true;
            }
        });
        cb(flag);
    }

    connectedCallback() {
        this.popper.update();
        if (this.disabled !== null) {
            this.selectInput.setAttribute("disabled", "disabled");
        }

        this.selectInput.setAttribute("placeholder", this.placeholder || "请选择");
        document.body.addEventListener("click", this.hideHandler, true);
    }

    attributeChangedCallback(attr, oldVal, val) {
        if (attr === "value") {
            this.selectInput.value = val;
        }
    }

    disconnectedCallback() {
        document.body.removeEventListener("click", this.hideHandler);
    }
}

if (!customElements.get("ivy-select")) {
    customElements.define("ivy-select", Select);
}

class Option extends HTMLElement {
    constructor() {
        super();
        const template = document.createElement("template");

        template.innerHTML = `
            <style>
                :host {
                    display: block;
                }
                .ivy-option {
                    display: block;
                    font-size: 14px;
                    padding: 0 20px;
                    position: relative;
                    white-space: nowrap;
                    overflow: hidden;
                    text-overflow: ellipsis;
                    color: #606266;
                    height: 34px;
                    line-height: 34px;
                    box-sizing: border-box;
                    cursor: pointer;
                }
                .ivy-option:hover {
                    background-color: #f5f7fa;
                }
                :host([active]) .ivy-option {
                    color: var(--color-primary, ${$_color_primary});
                }
            </style>
            <div class="ivy-option">
                <slot">${this.label}</slot>
            </div>
        `;
        this._shadowRoot = this.attachShadow({
            mode: "open",
        });
        this._shadowRoot.appendChild(template.content.cloneNode(true));

        this.msg = this._shadowRoot.querySelector(".ivy-form-item-msg");
    }

    static get observedAttributes() {
        return ["active", "label", "required", "message", "validator", "event", "status"];
    }

    get active() {
        return this.getAttribute("active");
    }
    get label() {
        return this.getAttribute("label");
    }
    get required() {
        return this.getAttribute("required");
    }
    get required() {
        return this.getAttribute("required");
    }
    get message() {
        return this.getAttribute("message");
    }
    get validator() {
        return this.getAttribute("validator");
    }
    get event() {
        return this.getAttribute("event");
    }
    get status() {
        return this.getAttribute("status");
    }

    set active(value) {
        this.setAttribute("active", value);
    }
    set label(value) {
        this.setAttribute("label", value);
    }
    set required(value) {
        this.setAttribute("required", value);
    }
    set message(value) {
        this.setAttribute("message", value);
    }
    set validator(value) {
        this.setAttribute("validator", value);
    }
    set event(value) {
        this.setAttribute("event", value);
    }
    set status(value) {
        this.setAttribute("status", value);
    }

    connectedCallback() {}

    attributeChangedCallback(attr, oldVal, val) {
        if (attr === "status") {
            if (val === "error") {
                this.msg.style.display = "block";
            } else {
                this.msg.style.display = "none";
            }
        }
    }
}

if (!customElements.get("ivy-option")) {
    customElements.define("ivy-option", Option);
}

class Radio extends HTMLElement {
    constructor() {
        super();

        const template = document.createElement("template");

        template.innerHTML = `
            <style>
                :host {
                    display: inline-block;
                    margin-right: 30px;
                }
                :host(:last-of-type) {
                    margin-right: 0;
                }
                .ivy-radio {
                    color: var(--text-color, ${$_text_color});
                    font-weight: 500;
                    font-size: 14px;
                    position: relative;
                    cursor: pointer;
                    display: flex;
                    align-items: center;
                    align-content: center;
                    white-space: nowrap;
                    user-select: none;
                }
                .ivy-radio-input {
                    white-space: nowrap;
                    cursor: pointer;
                    outline: none;
                    display: inline-flex;
                    align-items: center;
                    line-height: 1;
                    position: relative;
                }
                .ivy-radio-inner {
                    border: 1px solid #dcdfe6;
                    border-radius: 100%;
                    width: 14px;
                    height: 14px;
                    background-color: #fff;
                    position: relative;
                    cursor: pointer;
                    display: inline-block;
                    box-sizing: border-box;
                }
                .ivy-radio-inner::after {
                    width: 4px;
                    height: 4px;
                    border-radius: 100%;
                    background-color: #fff;
                    content: "";
                    position: absolute;
                    left: 50%;
                    top: 50%;
                    transform: translate(-50%,-50%) scale(0);
                    transition: transform .15s ease-in;
                }
                :host([checked]) .ivy-radio-inner {
                    background-color: var(--color-primary, ${$_color_primary});
                    border-color: var(--color-primary, ${$_color_primary});
                }
                :host([checked]) .ivy-radio-inner::after {
                    transform: translate(-50%, -50%) scale(1);
                }
                :host([disabled]) .ivy-radio {
                    cursor: not-allowed;
                }
                :host([disabled]) .ivy-radio-inner {
                    background-color: #edf2fc;
                    border-color: #dcdfe6;
                    cursor: not-allowed;
                }
                :host([disabled][checked]) .ivy-radio-inner {
                    background-color: #f2f6fc;
                    border-color: #dcdfe6;
                }
                :host([disabled][checked]) .ivy-radio-inner::after {
                    background-color: #c0c4cc;
                }
                .ivy-radio-label {
                    padding-left: 8px;
                    font-size: 14px;
                    display: inline-flex;
                    align-items: center;
                }
            </style>
            <div class="ivy-radio">
                <span class="ivy-radio-input">
                    <span class="ivy-radio-inner"></span>
                </span>
                <span class="ivy-radio-label">
                    <slot></slot>
                </span>
            </div>
        `;

        this._shadowRoot = this.attachShadow({
            mode: "open",
        });
        this._shadowRoot.appendChild(template.content.cloneNode(true));

        this.root = this._shadowRoot.querySelector(".ivy-radio");

        this.root.addEventListener("click", ev => {
            console.log(this.disabled, "this.disabled");
            if (this.disabled !== null) {
                return false;
            }
            const checkboxGroup = findElementUpward(this, "ivy-radio-group");
            const checked = ev.target.checked;
            if (checkboxGroup === null) {
                if (checked) {
                    return;
                } else {
                    this.setAttribute("checked", "checked");
                    this.value = this.falseLabel || false;
                }
                this.dispatchEvent(new CustomEvent("change", { detail: { value: this.value } }));
            } else {
                const brother = findBrothersElements(this, "ivy-radio", false);
                if (!checked) {
                    brother.map(el => {
                        const isChecked = el.checked;
                        if (isChecked !== null) {
                            console.log(el.innerText, "inline");
                            el.removeAttribute("checked");
                        }
                    });
                    this.checked = "";
                    checkboxGroup.value = this.label;
                    checkboxGroup.dispatchEvent(new CustomEvent("change", { detail: { value: checkboxGroup.value } }));
                }
            }
        });
    }

    static get observedAttributes() {
        return ["value", "checked", "label", "disabled"];
    }

    get value() {
        return this.getAttribute("value");
    }
    get checked() {
        return this.getAttribute("checked");
    }
    get label() {
        return this.getAttribute("label");
    }
    get trueLabel() {
        return this.getAttribute("true-label");
    }
    get falseLabel() {
        return this.getAttribute("false-label");
    }
    get disabled() {
        return this.getAttribute("disabled");
    }

    set value(value) {
        this.setAttribute("value", value);
    }
    set checked(value) {
        this.setAttribute("checked", value);
    }
    set label(value) {
        this.setAttribute("label", value);
    }
    set trueLabel(value) {
        this.setAttribute("true-label", value);
    }
    set falseLabel(value) {
        this.setAttribute("false-label", value);
    }
    set disabled(value) {
        this.setAttribute("disabled", value);
    }

    connectedCallback() {
        if (this.checked !== null) {
            const checkboxGroup = findElementUpward(this, "ivy-radio-group");
            if (checkboxGroup === null) {
                this.value = this.label;
            }
        }
    }

    attributeChangedCallback(attr, oldVal, val) {
    }

    disconnectedCallback() {}
}

if (!customElements.get("ivy-radio")) {
    customElements.define("ivy-radio", Radio);
}

class RadioGroup extends HTMLElement {
    constructor() {
        super();

        const template = document.createElement("template");

        template.innerHTML = `
            <style>
                :host {}
            </style>
            <slot></slot>
        `;

        this._shadowRoot = this.attachShadow({
            mode: "open",
        });
        this._shadowRoot.appendChild(template.content.cloneNode(true));
        this.value = null;
    }

    static get observedAttributes() {
        return ["disabled"];
    }

    get disabled() {
        return this.getAttribute("disabled");
    }

    set disabled(value) {
        this.setAttribute("disabled", value);
    }

    connectedCallback() {
        const checkboxList = findElementsDownward(this, "ivy-radio");
        checkboxList.map(cur => {
            const checked = cur.getAttribute("checked");
            if (checked !== null) {
                this.value = cur.getAttribute("label");
            }
            if (this.disabled !== null) {
                cur.setAttribute("disabled", "");
            }
        });
    }

    attributeChangedCallback(attr, oldVal, val) {
        if (attr === "disabled") {
            const checkboxList = findElementsDownward(this, "ivy-radio");
            if (val === null) {
                checkboxList.map(cur => {
                    cur.removeAttribute("disabled");
                });
            } else {
                checkboxList.map(cur => {
                    cur.setAttribute("disabled", "");
                });
            }
        }
    }

    disconnectedCallback() {}
}

if (!customElements.get("ivy-radio-group")) {
    customElements.define("ivy-radio-group", RadioGroup);
}

class Checkbox extends HTMLElement {
    constructor() {
        super();

        const template = document.createElement("template");

        template.innerHTML = `
            <style>
                :host {
                    display: inline-block;
                    margin-right: 30px;
                }
                :host(:last-of-type) {
                    margin-right: 0;
                }
                .ivy-checkbox {
                    color: var(--text-color, ${$_text_color});
                    font-weight: 500;
                    font-size: 14px;
                    position: relative;
                    cursor: pointer;
                    display: flex;
                    align-items: center;
                    white-space: nowrap;
                    user-select: none;
                }
                .ivy-checkbox-input {
                    white-space: nowrap;
                    cursor: pointer;
                    outline: none;
                    display: inline-flex;
                    align-items: center;
                    line-height: 1;
                    position: relative;
                }
                .ivy-checkbox-inner {
                    display: inline-block;
                    position: relative;
                    border: 1px solid #dcdfe6;
                    border-radius: 2px;
                    box-sizing: border-box;
                    width: 14px;
                    height: 14px;
                    background-color: #fff;
                    z-index: 1;
                    transition: border-color 0.25s cubic-bezier(0.71, -0.46, 0.29, 1.46),background-color 0.25s cubic-bezier(0.71, -0.46, 0.29, 1.46);
                }
                .ivy-checkbox-inner::after {
                    box-sizing: content-box;
                    content: "";
                    border: 1px solid #fff;
                    border-left: 0;
                    border-top: 0;
                    height: 7px;
                    left: 4px;
                    position: absolute;
                    top: 1px;
                    transform: rotate(45deg) scaleY(0);
                    width: 3px;
                    transition: transform 0.15s ease-in 0.05s;
                    transform-origin: center;
                }
                :host([checked]) .ivy-checkbox-inner {
                    background-color: var(--color-primary, ${$_color_primary});
                    border-color: var(--color-primary, ${$_color_primary});
                }
                :host([checked]) .ivy-checkbox-inner::after {
                    transform: rotate(45deg) scaleY(1);
                }
                :host([disabled]) .ivy-checkbox-inner {
                    background-color: #edf2fc;
                    border-color: #dcdfe6;
                    cursor: not-allowed;
                }
                :host([disabled][checked]) .ivy-checkbox-inner {
                    background-color: #f2f6fc;
                    border-color: #dcdfe6;
                }
                :host([disabled][checked]) .ivy-checkbox-inner::after {
                    border-color: #c0c4cc;
                }
                .ivy-checkbox-original {
                    opacity: 0;
                    outline: none;
                    position: absolute;
                    margin: 0;
                    width: 0;
                    height: 0;
                    z-index: -1;
                }
                .ivy-checkbox-label {
                    display: inline-block;
                    padding-left: 8px;
                    line-height: 19px;
                    font-size: 14px;
                }
            </style>
            <label class="ivy-checkbox">
                <span class="ivy-checkbox-input">
                    <span class="ivy-checkbox-inner"></span>
                    <input class="ivy-checkbox-original" type="checkbox" aria-hidden="false" />
                </span>
                <span class="ivy-checkbox-label">
                    <slot></slot>
                </span>
            </label>
        `;

        this._shadowRoot = this.attachShadow({
            mode: "open",
        });
        this._shadowRoot.appendChild(template.content.cloneNode(true));

        this.checkOriginal = this._shadowRoot.querySelector(".ivy-checkbox-original");

        this.checkOriginal.addEventListener("change", ev => {
            const checkboxGroup = findElementUpward(this, "ivy-checkbox-group");
            const checked = this.checkOriginal.checked;
            if (checkboxGroup !== null) {
                console.log(checkboxGroup);
                if (checked) {
                    this.checked = "";
                    checkboxGroup.value.push(this.label);
                } else {
                    this.removeAttribute("checked");
                    const index = checkboxGroup.value.indexOf(this.label);
                    checkboxGroup.value.splice(index, 1);
                }
                checkboxGroup.dispatchEvent(new CustomEvent("change", { detail: { value: checkboxGroup.value } }));
            } else {
                if (checked) {
                    this.checked = "";
                    this.value = this.trueLabel || true;
                } else {
                    this.removeAttribute("checked");
                    this.value = this.falseLabel || false;
                }
                this.dispatchEvent(new CustomEvent("change", { detail: { value: this.value } }));
            }
        });
    }

    static get observedAttributes() {
        return ["value", "checked", "label", "true-label", "false-label", "disabled"];
    }

    get value() {
        return this.getAttribute("value");
    }
    get checked() {
        return this.getAttribute("checked");
    }
    get label() {
        return this.getAttribute("label");
    }
    get trueLabel() {
        return this.getAttribute("true-label");
    }
    get falseLabel() {
        return this.getAttribute("false-label");
    }
    get disabled() {
        return this.getAttribute("disabled");
    }

    set value(value) {
        this.setAttribute("value", value);
    }
    set checked(value) {
        this.setAttribute("checked", value);
    }
    set label(value) {
        this.setAttribute("label", value);
    }
    set trueLabel(value) {
        this.setAttribute("true-label", value);
    }
    set falseLabel(value) {
        this.setAttribute("false-label", value);
    }
    set disabled(value) {
        this.setAttribute("disabled", value);
    }

    connectedCallback() {
        if (this.checked !== null) {
            this.checkOriginal.setAttribute("checked", "checked");
            const checkboxGroup = findElementUpward(this, "ivy-checkbox-group");
            if (checkboxGroup === null) {
                this.value = this.trueLabel || true;
            }
        } else {
            this.value = this.falseLabel || false;
        }
        if (this.disabled !== null) {
            this.checkOriginal.setAttribute("disabled", "disabled");
        }
    }

    attributeChangedCallback(attr, oldVal, val) {
        if (attr === "disabled") {
            if (val === null) {
                this.checkOriginal.removeAttribute("disabled");
            } else {
                this.checkOriginal.setAttribute("disabled", "disabled");
            }
        }
    }

    disconnectedCallback() {}
}

if (!customElements.get("ivy-checkbox")) {
    customElements.define("ivy-checkbox", Checkbox);
}

class CheckboxGroup extends HTMLElement {
    constructor() {
        super();

        const template = document.createElement("template");

        template.innerHTML = `
            <style>
                :host {}
            </style>
            <slot></slot>
        `;

        this._shadowRoot = this.attachShadow({
            mode: "open",
        });
        this._shadowRoot.appendChild(template.content.cloneNode(true));
        this.value = [];
    }

    static get observedAttributes() {
        return ["disabled"];
    }

    get disabled() {
        return this.getAttribute("disabled");
    }

    set disabled(value) {
        this.setAttribute("disabled", value);
    }

    connectedCallback() {
        const checkboxList = findElementsDownward(this, "ivy-checkbox");
        checkboxList.map(cur => {
            const checked = cur.getAttribute("checked");
            if (checked !== null) {
                this.value.push(cur.getAttribute("label"));
            }
            if (this.disabled !== null) {
                cur.setAttribute("disabled", "");
            }
        });
    }

    attributeChangedCallback(attr, oldVal, val) {
        if (attr === "disabled") {
            const checkboxList = findElementsDownward(this, "ivy-checkbox");
            if (val === null) {
                checkboxList.map(cur => {
                    cur.removeAttribute("disabled");
                });
            } else {
                checkboxList.map(cur => {
                    cur.setAttribute("disabled", "");
                });
            }
        }
    }

    disconnectedCallback() {}
}

if (!customElements.get("ivy-checkbox-group")) {
    customElements.define("ivy-checkbox-group", CheckboxGroup);
}

class Tag extends HTMLElement {
    constructor() {
        super();
        const template = document.createElement("template");

        template.innerHTML = `
            <style>
                :host {
                    display: inline-block;
                    font-size: 12px;
                    border-radius: 4px;
                    box-sizing: border-box;
                    margin-left: 10px;
                }
                :host(:first-child) {
                    margin-left:0;
                }

                :host,
                :host([size="large"]) {
                    line-height: 30px;
                    height: 32px;
                    padding: 0 12px;
                }
                :host([size="medium"]) {
                    line-height: 26px;
                    height: 28px;
                    padding: 0 10px;
                }
                :host([size="small"]) {
                    line-height: 22px;
                    height: 24px;
                    padding: 0 8px;
                }
                :host([size="mini"]) {
                    line-height: 18px;
                    height: 20px;
                    padding: 0 6px;
                }

                :host,
                :host([color="primary"]){
                    border: 1px solid ${colorBlend("#ffffff", $_color_primary, 0.8)};
                    color: ${$_color_primary};
                    background-color: ${colorBlend("#ffffff", $_color_primary, 0.9)};
                }
                :host([color="success"]){
                    border: 1px solid ${colorBlend("#ffffff", $_color_success, 0.8)};
                    color: ${$_color_success};
                    background-color: ${colorBlend("#ffffff", $_color_success, 0.9)};
                }
                :host([color="warning"]){
                    border: 1px solid ${colorBlend("#ffffff", $_color_warn, 0.8)};
                    color: ${$_color_warn};
                    background-color: ${colorBlend("#ffffff", $_color_warn, 0.9)};
                }
                :host([color="error"]){
                    border: 1px solid ${colorBlend("#ffffff", $_color_error, 0.8)};
                    color: ${$_color_error};
                    background-color: ${colorBlend("#ffffff", $_color_error, 0.9)};
                }
                :host([color="info"]){
                    border: 1px solid ${colorBlend("#ffffff", $_color_info, 0.8)};
                    color: ${$_color_info};
                    background-color: ${colorBlend("#ffffff", $_color_info, 0.9)};
                }

                :host([theme="plain"]),
                :host([theme="plain"][color="primary"]){
                    border: 1px solid ${colorBlend("#ffffff", $_color_primary, 0.6)};
                    color: ${$_color_primary};
                    background-color: #ffffff;
                }
                :host([theme="plain"][color="success"]){
                    border: 1px solid ${colorBlend("#ffffff", $_color_success, 0.6)};
                    color: ${$_color_success};
                    background-color: #ffffff;
                }
                :host([theme="plain"][color="warning"]){
                    border: 1px solid ${colorBlend("#ffffff", $_color_warn, 0.6)};
                    color: ${$_color_warn};
                    background-color: #ffffff;
                }
                :host([theme="plain"][color="error"]){
                    border: 1px solid ${colorBlend("#ffffff", $_color_error, 0.6)};
                    color: ${$_color_error};
                    background-color: #ffffff;
                }
                :host([theme="plain"][color="info"]){
                    border: 1px solid ${colorBlend("#ffffff", $_color_info, 0.6)};
                    color: ${$_color_info};
                    background-color: #ffffff;
                }

                :host([theme="dark"]),
                :host([theme="dark"][color="primary"]){
                    border: 1px solid ${$_color_primary};
                    color: #ffffff;
                    background-color: ${$_color_primary};
                }
                :host([theme="dark"][color="success"]){
                    border: 1px solid ${$_color_success};
                    color: #ffffff;
                    background-color: ${$_color_success};
                }
                :host([theme="dark"][color="warning"]){
                    border: 1px solid ${$_color_warn};
                    color: #ffffff;
                    background-color: ${$_color_warn};
                }
                :host([theme="dark"][color="error"]){
                    border: 1px solid ${$_color_error};
                    color: #ffffff;
                    background-color: ${$_color_error};
                }
                :host([theme="dark"][color="info"]){
                    border: 1px solid ${$_color_info};
                    color: #ffffff;
                    background-color: ${$_color_info};
                }
            </style>
            <slot></slot>
        `;
        this._shadowRoot = this.attachShadow({
            mode: "open",
        });
        this._shadowRoot.appendChild(template.content.cloneNode(true));
    }
    static get observedAttributes() {
        return ["color", "theme"];
    }

    set color(value) {
        this.setAttribute("color", value);
    }
    get color() {
        return this.getAttribute("color");
    }

    set theme(value) {
        this.setAttribute("theme", value);
    }
    get theme() {
        return this.getAttribute("theme");
    }

    generatorColor(color, theme) {
        if (theme === "plain") {
            this.style.color = color || "#ffffff";
            this.style.backgroundColor = "#FFFFFF";
            this.style.borderColor = colorBlend("#ffffff", color, 0.6) || null;
        } else if (theme === "dark") {
            this.style.color = "#FFFFFF";
            this.style.backgroundColor = color || null;
            this.style.borderColor = color || null;
        } else {
            this.style.color = color || "#FFFFFF";
            this.style.backgroundColor = colorBlend("#ffffff", color, 0.9) || null;
            this.style.borderColor = colorBlend("#ffffff", color, 0.8) || null;
        }
    }

    attributeChangedCallback(attr, oldVal, val) {
        if (attr === "color") {
            const theme = this.theme;
            if (!["primary", "success", "warning", "error", "info"].includes(val)) {
                this.generatorColor(val, theme);
            }
        } else if (attr === "theme") {
            const color = this.color;
            if (this.color && !["primary", "success", "warning", "error", "info"].includes(this.color)) {
                this.generatorColor(color, val);
            }
        }
    }
}

if (!customElements.get("ivy-tag")) {
    customElements.define("ivy-tag", Tag);
}

function createNode(text) {
    const node = document.createElement("pre");
    node.style.width = "1px";
    node.style.height = "1px";
    node.style.position = "fixed";
    node.style.top = "5px";
    node.textContent = text;
    return node;
}

function copyNode(node) {
    if ("clipboard" in navigator) {
        return navigator.clipboard.writeText(node.textContent || "");
    }

    const selection = getSelection();
    if (selection == null) {
        return Promise.reject(new Error());
    }

    selection.removeAllRanges();

    const range = document.createRange();
    range.selectNodeContents(node);
    selection.addRange(range);

    document.execCommand("copy");
    selection.removeAllRanges();
    return Promise.resolve();
}

function copyText(text) {
    if ("clipboard" in navigator) {
        return navigator.clipboard.writeText(text);
    }

    const body = document.body;
    if (!body) {
        return Promise.reject(new Error());
    }

    const node = createNode(text);
    body.appendChild(node);
    copyNode(node);
    body.removeChild(node);
    return Promise.resolve();
}

async function copy(button) {
    const id = button.getAttribute("for");
    const text = button.getAttribute("value");
    function trigger() {
        button.dispatchEvent(new CustomEvent("clipboard-copy", { bubbles: true }));
    }

    if (text) {
        await copyText(text);
        trigger();
    } else if (id) {
        const root = "getRootNode" in Element.prototype ? button.getRootNode() : button.ownerDocument;
        if (!(root instanceof Document || ("ShadowRoot" in window && root instanceof ShadowRoot))) return;
        const node = root.getElementById(id);
        if (node) {
            await copyTarget(node);
            trigger();
        }
    }
}

function copyTarget(content) {
    if (content instanceof HTMLInputElement || content instanceof HTMLTextAreaElement) {
        return copyText(content.value);
    } else if (content instanceof HTMLAnchorElement && content.hasAttribute("href")) {
        return copyText(content.href);
    } else {
        return copyNode(content);
    }
}

function clicked(event) {
    const button = event.currentTarget;
    if (button instanceof HTMLElement) {
        copy(button);
    }
}

function keydown(event) {
    if (event.key === " " || event.key === "Enter") {
        const button = event.currentTarget;
        if (button instanceof HTMLElement) {
            event.preventDefault();
            copy(button);
        }
    }
}

function focused(event) {
    event.currentTarget.addEventListener("keydown", keydown);
}

function blurred(event) {
    event.currentTarget.removeEventListener("keydown", keydown);
}

class ClipboardCopyElement extends HTMLElement {
    constructor() {
        super();
        this.addEventListener("click", clicked);
        this.addEventListener("focus", focused);
        this.addEventListener("blur", blurred);
    }

    connectedCallback() {
        if (!this.hasAttribute("tabindex")) {
            this.setAttribute("tabindex", "0");
        }

        if (!this.hasAttribute("role")) {
            this.setAttribute("role", "button");
        }
    }

    get value() {
        return this.getAttribute("value") || "";
    }

    set value(text) {
        this.setAttribute("value", text);
    }
}

if (!window.customElements.get("ivy-clipboard-copy")) {
    window.ClipboardCopyElement = ClipboardCopyElement;
    window.customElements.define("ivy-clipboard-copy", ClipboardCopyElement);
}

class Badge extends HTMLElement {
    constructor() {
        super();

        const template = document.createElement("template");

        template.innerHTML = `
            <style>
                :host {
                    display: inline-block;
                    position: relative;
                }
                :slot {
                    position: relative;
                    z-index: 0;
                }
                .ivy-badge-content {
                    position: absolute;
                    top: 0;
                    right: 10px;
                    z-index: 10;
                    transform: translateX(100%) translateY(-50%);
                    background-color: #f56c6c;
                    border-radius: 10px;
                    color: #fff;
                    display: inline-block;
                    font-size: 12px;
                    height: 18px;
                    line-height: 18px;
                    padding: 0 6px;
                    text-align: center;
                    white-space: nowrap;
                    border: 1px solid #fff;
                }
                :host(type="primary") .ivy-badge-content {
                    background-color: var(--color-primary, ${$_color_primary});
                    color: white;
                }
                :host(type="success") .ivy-badge-content {
                    background-color: var(--color-primary, ${$_color_success});
                    color: white;
                }
                :host(type="warning") .ivy-badge-content {
                    background-color: var(--color-warning, ${$_color_warn});
                    color: white;
                }
                :host(type="error") .ivy-badge-content {
                    background-color: var(--color-error, ${$_color_error});
                    color: white;
                }
                :host(type="info") .ivy-badge-content {
                    background-color: var(--color-info, ${$_color_info});
                    color: white;
                }

                :host([is-dot]) sup.ivy-badge-content {
                    height: 8px;
                    width: 8px;
                    line-height: 8px;
                    padding: 0;
                    right: 5px;
                    border-radius: 50%;
                    color: transparent;
                }
            </style>
            <sup class="ivy-badge-content">${this.value > this.max ? this.max + "+" : this.value}</sup>
            <slot></slot>
        `;

        this._shadowRoot = this.attachShadow({
            mode: "open",
        });
        this._shadowRoot.appendChild(template.content.cloneNode(true));

        this.$sup = this._shadowRoot.querySelector(".ivy-badge-content");
    }

    static get observedAttributes() {
        return ["value", "max", "type", "hidden", "is-dot"];
    }

    connectedCallback() {}

    get value() {
        return this.getAttribute("value") || 0;
    }

    set value(text) {
        this.setAttribute("value", text);
    }

    get max() {
        return this.getAttribute("max") || 99;
    }

    set max(text) {
        this.setAttribute("max", text);
    }

    get type() {
        return this.getAttribute("type");
    }

    set type(text) {
        this.setAttribute("type", text);
    }

    get hidden() {
        return this.getAttribute("hidden");
    }

    set hidden(text) {
        this.setAttribute("hidden", text);
    }

    get isDot() {
        return this.getAttribute("is-dot");
    }

    set isDot(text) {
        this.setAttribute("is-dot", text);
    }

    valueReg = /^\d+$/;

    attributeChangedCallback(attr, oldVal, val) {
        if (attr === "value" && oldVal !== value) {
            this.$sup.innerText = valueReg.test(val) ? (val > this.max ? `${this.max}+` : this.value) : this.value;
        }
        if (attr === "max" && oldVal !== value) {
            this.$sup.innerText = valueReg.test(val) ? (val > this.max ? `${this.max}+` : this.value) : this.value;
        }
    }
}

if (!window.customElements.get("ivy-badge")) {
    window.customElements.define("ivy-badge", Badge);
}
